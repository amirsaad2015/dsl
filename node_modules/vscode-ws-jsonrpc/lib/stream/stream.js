"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) 2017 TypeFox GmbH (http://www.typefox.io). All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var stream_1 = require("stream");
var ReadableStream = (function (_super) {
    __extends(ReadableStream, _super);
    function ReadableStream(data) {
        var _this = _super.call(this) || this;
        _this.push(data);
        _this.push(null);
        return _this;
    }
    ReadableStream.prototype._read = function (size) {
        /* no-op */
    };
    return ReadableStream;
}(stream_1.Readable));
exports.ReadableStream = ReadableStream;
var WritableStream = (function (_super) {
    __extends(WritableStream, _super);
    function WritableStream() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.data = new Buffer('');
        return _this;
    }
    WritableStream.prototype._write = function (data, encoding, callback) {
        var buffer = this.toBuffer(data, encoding);
        this.data = Buffer.concat([this.data, buffer]);
        callback();
    };
    WritableStream.prototype.toBuffer = function (data, encoding) {
        if (Buffer.isBuffer(data)) {
            return data;
        }
        return new Buffer(data, encoding);
    };
    return WritableStream;
}(stream_1.Writable));
exports.WritableStream = WritableStream;
//# sourceMappingURL=stream.js.map