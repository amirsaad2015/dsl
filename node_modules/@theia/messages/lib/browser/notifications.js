"use strict";
/*
 * Copyright (C) 2017 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NOTIFICATIONS_CONTAINER = 'theia-NotificationsContainer';
exports.NOTIFICATION = 'theia-Notification';
exports.ICON = 'icon';
exports.TEXT = 'text';
exports.BUTTONS = 'buttons';
var Notifications = /** @class */ (function () {
    function Notifications(parent) {
        this.parent = parent;
        this.parent = parent || document.body;
        this.container = this.createNotificationsContainer(this.parent);
    }
    Notifications.prototype.show = function (properties) {
        var notificationElement = this.createNotificationElement(properties);
        this.container.appendChild(notificationElement);
    };
    Notifications.prototype.createNotificationsContainer = function (parentContainer) {
        var container = document.createElement('div');
        container.classList.add(exports.NOTIFICATIONS_CONTAINER);
        return parentContainer.appendChild(container);
    };
    Notifications.prototype.createNotificationElement = function (properties) {
        var fragment = document.createDocumentFragment();
        var element = fragment.appendChild(document.createElement('div'));
        element.classList.add(exports.NOTIFICATION);
        var iconContainer = element.appendChild(document.createElement('div'));
        iconContainer.classList.add(exports.ICON);
        var icon = iconContainer.appendChild(document.createElement('i'));
        icon.classList.add('fa', this.toIconClass(properties.icon), 'fa-fw', properties.icon);
        var textContainer = element.appendChild(document.createElement('div'));
        textContainer.classList.add(exports.TEXT);
        var text = textContainer.appendChild(document.createElement('p'));
        text.innerText = properties.text;
        var close = function () {
            element.remove();
        };
        var handler = { element: element, properties: properties };
        var buttons = element.appendChild(document.createElement('div'));
        buttons.classList.add(exports.BUTTONS);
        if (!!properties.actions) {
            var _loop_1 = function (action) {
                var button = buttons.appendChild(document.createElement('button'));
                button.innerText = action.label;
                button.addEventListener('click', function () {
                    action.fn(handler);
                    close();
                });
            };
            try {
                for (var _a = __values(properties.actions), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var action = _b.value;
                    _loop_1(action);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return fragment;
        var e_1, _c;
    };
    Notifications.prototype.toIconClass = function (icon) {
        if (icon === 'error') {
            return 'fa-times-circle';
        }
        if (icon === 'warning') {
            return 'fa-warning';
        }
        return 'fa-info-circle';
    };
    return Notifications;
}());
exports.Notifications = Notifications;
//# sourceMappingURL=notifications.js.map