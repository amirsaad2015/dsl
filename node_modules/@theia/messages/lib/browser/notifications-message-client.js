"use strict";
/*
 * Copyright (C) 2017 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var common_1 = require("@theia/core/lib/common");
var notifications_1 = require("./notifications");
var NotificationsMessageClient = /** @class */ (function (_super) {
    __extends(NotificationsMessageClient, _super);
    function NotificationsMessageClient() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.notifications = new notifications_1.Notifications();
        return _this;
    }
    NotificationsMessageClient.prototype.showMessage = function (message) {
        return this.show(message);
    };
    NotificationsMessageClient.prototype.show = function (message) {
        var _this = this;
        return new Promise(function (resolve) {
            _this.showToast(message, function (a) { return resolve(a); });
        });
    };
    NotificationsMessageClient.prototype.showToast = function (message, onCloseFn) {
        var icon = this.iconFor(message.type);
        var text = message.text;
        var actions = (message.actions || []).map(function (action) { return ({
            label: action,
            fn: function (element) { return onCloseFn(action); }
        }); });
        actions.push({
            label: 'Close',
            fn: function (element) { return onCloseFn(undefined); }
        });
        this.notifications.show({
            icon: icon,
            text: text,
            actions: actions
        });
    };
    NotificationsMessageClient.prototype.iconFor = function (type) {
        if (type === common_1.MessageType.Error) {
            return 'error';
        }
        if (type === common_1.MessageType.Warning) {
            return 'warning';
        }
        return 'info';
    };
    NotificationsMessageClient = __decorate([
        inversify_1.injectable()
    ], NotificationsMessageClient);
    return NotificationsMessageClient;
}(common_1.MessageClient));
exports.NotificationsMessageClient = NotificationsMessageClient;
//# sourceMappingURL=notifications-message-client.js.map