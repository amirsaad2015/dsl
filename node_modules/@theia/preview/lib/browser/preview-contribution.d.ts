import { Widget } from "@phosphor/widgets";
import { FrontendApplicationContribution, WidgetOpenerOptions, WidgetOpenHandler } from "@theia/core/lib/browser";
import { EditorManager, TextEditor, EditorWidget } from '@theia/editor/lib/browser';
import { ResourceProvider, CommandContribution, CommandRegistry, Command, MenuContribution, MenuModelRegistry, Disposable, MessageService } from "@theia/core/lib/common";
import URI from '@theia/core/lib/common/uri';
import { Position } from 'vscode-languageserver-types';
import { PreviewWidget } from './preview-widget';
import { PreviewHandlerProvider } from './preview-handler';
export declare namespace PreviewCommands {
    const OPEN: Command;
}
export interface PreviewOpenerOptions extends WidgetOpenerOptions {
    originUri?: URI;
}
export declare class PreviewContribution extends WidgetOpenHandler<PreviewWidget> implements CommandContribution, MenuContribution, FrontendApplicationContribution {
    readonly id: string;
    readonly label: string;
    protected readonly editorManager: EditorManager;
    protected readonly previewHandlerProvider: PreviewHandlerProvider;
    protected readonly resourceProvider: ResourceProvider;
    protected readonly messageService: MessageService;
    protected readonly syncronizedUris: Set<string>;
    protected readonly defaultOpenFromEditorOptions: PreviewOpenerOptions;
    protected readonly defaultOpenOptions: PreviewOpenerOptions;
    onStart(): void;
    protected registerEditorAndPreviewSync(source: PreviewWidget | EditorWidget): Promise<void>;
    protected revealSourceLineInPreview(previewWidget: PreviewWidget, position: Position): void;
    protected synchronizeScrollToEditor(previewWidget: PreviewWidget, editor: TextEditor): Disposable;
    protected registerOpenOnDoubleClick(previewWidget: PreviewWidget): void;
    canHandle(uri: URI): Promise<number>;
    open(uri: URI, options?: PreviewOpenerOptions): Promise<PreviewWidget>;
    protected createWidgetOptions(uri: URI, options?: PreviewOpenerOptions): string;
    protected resolveOpenerOptions(options?: PreviewOpenerOptions): Promise<PreviewOpenerOptions>;
    protected findWidgetInMainAreaToAddAfter(): Widget | undefined;
    registerCommands(registry: CommandRegistry): void;
    registerMenus(menus: MenuModelRegistry): void;
    protected canHandleEditorUri(): boolean;
    protected getCurrentEditorUri(): URI | undefined;
    protected openForEditor(): Promise<void>;
}
