import { Disposable, DisposableCollection } from "./disposable";
import { MaybePromise } from "./types";
export interface Reference<T> extends Disposable {
    readonly object: T;
}
export declare class ReferenceCollection<K, V extends Disposable> {
    protected readonly factory: (key: K) => MaybePromise<V>;
    protected readonly values: Map<string, MaybePromise<V>>;
    protected readonly keyMap: Map<string, K>;
    protected readonly references: Map<string, DisposableCollection>;
    constructor(factory: (key: K) => MaybePromise<V>);
    has(args: K): boolean;
    keys(): K[];
    acquire(args: K): Promise<Reference<V>>;
    protected getOrCreateValue(key: string, args: K): Promise<V>;
    protected toKey(args: K): string;
    protected createReferences(key: string, object: V): DisposableCollection;
}
