"use strict";
/*
 * Copyright (C) 2018 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var disposable_1 = require("./disposable");
var ReferenceCollection = /** @class */ (function () {
    function ReferenceCollection(factory) {
        this.factory = factory;
        this.values = new Map();
        this.keyMap = new Map();
        this.references = new Map();
    }
    ReferenceCollection.prototype.has = function (args) {
        var key = this.toKey(args);
        return this.references.has(key);
    };
    ReferenceCollection.prototype.keys = function () {
        return __spread(this.keyMap.values());
    };
    ReferenceCollection.prototype.acquire = function (args) {
        return __awaiter(this, void 0, void 0, function () {
            var key, object, references, reference;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        key = this.toKey(args);
                        return [4 /*yield*/, this.getOrCreateValue(key, args)];
                    case 1:
                        object = _a.sent();
                        references = this.references.get(key) || this.createReferences(key, object);
                        reference = {
                            object: object,
                            dispose: function () { }
                        };
                        references.push(reference);
                        return [2 /*return*/, reference];
                }
            });
        });
    };
    ReferenceCollection.prototype.getOrCreateValue = function (key, args) {
        return __awaiter(this, void 0, void 0, function () {
            var existing, value;
            return __generator(this, function (_a) {
                existing = this.values.get(key);
                if (existing) {
                    return [2 /*return*/, existing];
                }
                value = this.factory(args);
                this.keyMap.set(key, args);
                this.values.set(key, value);
                return [2 /*return*/, value];
            });
        });
    };
    ReferenceCollection.prototype.toKey = function (args) {
        return JSON.stringify(args);
    };
    ReferenceCollection.prototype.createReferences = function (key, object) {
        var _this = this;
        var references = new disposable_1.DisposableCollection();
        references.onDispose(function () { return object.dispose(); });
        var disposeObject = object.dispose.bind(object);
        object.dispose = function () {
            disposeObject();
            _this.values.delete(key);
            _this.keyMap.delete(key);
            _this.references.delete(key);
            references.dispose();
        };
        this.references.set(key, references);
        return references;
    };
    return ReferenceCollection;
}());
exports.ReferenceCollection = ReferenceCollection;
//# sourceMappingURL=reference.js.map