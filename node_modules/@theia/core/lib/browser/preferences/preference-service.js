"use strict";
/*
 * Copyright (C) 2018 Ericsson and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var coreutils_1 = require("@phosphor/coreutils");
var inversify_1 = require("inversify");
var common_1 = require("../../common");
exports.PreferenceService = Symbol('PreferenceService');
exports.PreferenceProviders = Symbol('PreferenceProvidersFactory');
var PreferenceServiceImpl = /** @class */ (function () {
    function PreferenceServiceImpl() {
        this.preferences = {};
        this.toDispose = new common_1.DisposableCollection();
        this.onPreferenceChangedEmitter = new common_1.Emitter();
        this.onPreferenceChanged = this.onPreferenceChangedEmitter.event;
        this.toDispose.push(this.onPreferenceChangedEmitter);
    }
    Object.defineProperty(PreferenceServiceImpl.prototype, "preferenceProviders", {
        get: function () {
            if (!this._preferenceProviders) {
                this._preferenceProviders = this.createPreferenceProviders();
            }
            return this._preferenceProviders;
        },
        enumerable: true,
        configurable: true
    });
    PreferenceServiceImpl.prototype.onStart = function () {
        // tslint:disable-next-line:no-unused-expression
        this.ready;
    };
    Object.defineProperty(PreferenceServiceImpl.prototype, "ready", {
        get: function () {
            var _this = this;
            if (!this._ready) {
                this._ready = new Promise(function (resolve, reject) {
                    _this.toDispose.push(common_1.Disposable.create(function () { return reject(); }));
                    try {
                        for (var _a = __values(_this.preferenceProviders), _b = _a.next(); !_b.done; _b = _a.next()) {
                            var preferenceProvider = _b.value;
                            _this.toDispose.push(preferenceProvider);
                            preferenceProvider.onDidPreferencesChanged(function (event) { return _this.reconcilePreferences(); });
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    _this.reconcilePreferences();
                    resolve();
                    var e_1, _c;
                });
            }
            return this._ready;
        },
        enumerable: true,
        configurable: true
    });
    PreferenceServiceImpl.prototype.dispose = function () {
        this.toDispose.dispose();
    };
    PreferenceServiceImpl.prototype.reconcilePreferences = function () {
        var preferenceChanges = {};
        var deleted = new Set(Object.keys(this.preferences));
        try {
            for (var _a = __values(this.preferenceProviders), _b = _a.next(); !_b.done; _b = _a.next()) {
                var preferenceProvider = _b.value;
                var preferences = preferenceProvider.getPreferences();
                // tslint:disable-next-line:forin
                for (var preferenceName in preferences) {
                    deleted.delete(preferenceName);
                    var oldValue = this.preferences[preferenceName];
                    var newValue = common_1.deepFreeze(preferences[preferenceName]);
                    if (oldValue !== undefined) {
                        /* Value changed */
                        if (!coreutils_1.JSONExt.deepEqual(oldValue, newValue)) {
                            preferenceChanges[preferenceName] = { preferenceName: preferenceName, newValue: newValue, oldValue: oldValue };
                            this.preferences[preferenceName] = newValue;
                        }
                        /* Value didn't change - Do nothing */
                    }
                    else {
                        /* New value without old value */
                        preferenceChanges[preferenceName] = { preferenceName: preferenceName, newValue: newValue };
                        this.preferences[preferenceName] = newValue;
                    }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        try {
            /* Deleted values */
            for (var deleted_1 = __values(deleted), deleted_1_1 = deleted_1.next(); !deleted_1_1.done; deleted_1_1 = deleted_1.next()) {
                var preferenceName = deleted_1_1.value;
                var oldValue = this.preferences[preferenceName];
                preferenceChanges[preferenceName] = { preferenceName: preferenceName, oldValue: oldValue };
                this.preferences[preferenceName] = undefined;
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (deleted_1_1 && !deleted_1_1.done && (_d = deleted_1.return)) _d.call(deleted_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        // tslint:disable-next-line:forin
        for (var preferenceName in preferenceChanges) {
            this.onPreferenceChangedEmitter.fire(preferenceChanges[preferenceName]);
        }
        var e_2, _c, e_3, _d;
    };
    PreferenceServiceImpl.prototype.has = function (preferenceName) {
        return this.preferences[preferenceName] !== undefined;
    };
    PreferenceServiceImpl.prototype.get = function (preferenceName, defaultValue) {
        var value = this.preferences[preferenceName];
        return value !== null && value !== undefined ? value : defaultValue;
    };
    PreferenceServiceImpl.prototype.getBoolean = function (preferenceName, defaultValue) {
        var value = this.preferences[preferenceName];
        return value !== null && value !== undefined ? !!value : defaultValue;
    };
    PreferenceServiceImpl.prototype.getString = function (preferenceName, defaultValue) {
        var value = this.preferences[preferenceName];
        if (value === null || value === undefined) {
            return defaultValue;
        }
        if (typeof value === "string") {
            return value;
        }
        return value.toString();
    };
    PreferenceServiceImpl.prototype.getNumber = function (preferenceName, defaultValue) {
        var value = this.preferences[preferenceName];
        if (value === null || value === undefined) {
            return defaultValue;
        }
        if (typeof value === "number") {
            return value;
        }
        return Number(value);
    };
    __decorate([
        inversify_1.inject(exports.PreferenceProviders),
        __metadata("design:type", Function)
    ], PreferenceServiceImpl.prototype, "createPreferenceProviders", void 0);
    PreferenceServiceImpl = __decorate([
        inversify_1.injectable(),
        __metadata("design:paramtypes", [])
    ], PreferenceServiceImpl);
    return PreferenceServiceImpl;
}());
exports.PreferenceServiceImpl = PreferenceServiceImpl;
//# sourceMappingURL=preference-service.js.map