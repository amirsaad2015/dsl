import { FrontendApplicationContribution } from '../../browser';
import { Event, Emitter, DisposableCollection, Disposable } from '../../common';
import { PreferenceProvider } from './preference-provider';
export interface PreferenceChangedEvent {
    changes: PreferenceChange[];
}
export interface PreferenceChange {
    readonly preferenceName: string;
    readonly newValue?: any;
    readonly oldValue?: any;
}
export declare const PreferenceService: unique symbol;
export interface PreferenceService extends Disposable {
    readonly ready: Promise<void>;
    get<T>(preferenceName: string): T | undefined;
    get<T>(preferenceName: string, defaultValue: T): T;
    get<T>(preferenceName: string, defaultValue?: T): T | undefined;
    onPreferenceChanged: Event<PreferenceChange>;
}
export declare const PreferenceProviders: unique symbol;
export declare type PreferenceProviders = () => PreferenceProvider[];
export declare class PreferenceServiceImpl implements PreferenceService, FrontendApplicationContribution {
    protected preferences: {
        [key: string]: any;
    };
    protected readonly toDispose: DisposableCollection;
    protected readonly onPreferenceChangedEmitter: Emitter<PreferenceChange>;
    readonly onPreferenceChanged: Event<PreferenceChange>;
    protected readonly createPreferenceProviders: PreferenceProviders;
    constructor();
    protected _preferenceProviders: PreferenceProvider[] | undefined;
    protected readonly preferenceProviders: PreferenceProvider[];
    onStart(): void;
    protected _ready: Promise<void> | undefined;
    readonly ready: Promise<void>;
    dispose(): void;
    protected reconcilePreferences(): void;
    has(preferenceName: string): boolean;
    get<T>(preferenceName: string): T | undefined;
    get<T>(preferenceName: string, defaultValue: T): T;
    getBoolean(preferenceName: string): boolean | undefined;
    getBoolean(preferenceName: string, defaultValue: boolean): boolean;
    getString(preferenceName: string): string | undefined;
    getString(preferenceName: string, defaultValue: string): string;
    getNumber(preferenceName: string): number | undefined;
    getNumber(preferenceName: string, defaultValue: number): number;
}
