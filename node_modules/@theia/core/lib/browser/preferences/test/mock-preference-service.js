"use strict";
/*
 * Copyright (C) 2018 Ericsson and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var common_1 = require("../../../common");
var MockPreferenceService = /** @class */ (function () {
    function MockPreferenceService() {
        this.onPreferenceChanged = new common_1.Emitter().event;
    }
    MockPreferenceService.prototype.dispose = function () { };
    MockPreferenceService.prototype.get = function (preferenceName, defaultValue) {
        return undefined;
    };
    MockPreferenceService = __decorate([
        inversify_1.injectable(),
        __metadata("design:paramtypes", [])
    ], MockPreferenceService);
    return MockPreferenceService;
}());
exports.MockPreferenceService = MockPreferenceService;
//# sourceMappingURL=mock-preference-service.js.map