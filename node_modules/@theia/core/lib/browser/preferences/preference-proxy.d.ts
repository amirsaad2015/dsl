import { Disposable, Event } from '../../common';
import { PreferenceService } from "./preference-service";
import { PreferenceSchema } from "./preference-contribution";
export interface Configuration {
    [preferenceName: string]: any;
}
export interface PreferenceChangeEvent<T> {
    readonly preferenceName: keyof T;
    readonly newValue?: T[keyof T];
    readonly oldValue?: T[keyof T];
}
export interface PreferenceEventEmitter<T> {
    readonly onPreferenceChanged: Event<PreferenceChangeEvent<T>>;
    readonly ready: Promise<void>;
}
export declare type PreferenceProxy<T> = Readonly<T> & Disposable & PreferenceEventEmitter<T>;
export declare function createPreferenceProxy<T extends Configuration>(preferences: PreferenceService, schema: PreferenceSchema): PreferenceProxy<T>;
