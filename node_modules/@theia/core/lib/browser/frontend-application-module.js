"use strict";
/*
 * Copyright (C) 2017 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var common_1 = require("../common");
var keybinding_1 = require("./keybinding");
var frontend_application_1 = require("./frontend-application");
var opener_service_1 = require("./opener-service");
var http_open_handler_1 = require("./http-open-handler");
var common_frontend_contribution_1 = require("./common-frontend-contribution");
var quick_open_1 = require("./quick-open");
var storage_service_1 = require("./storage-service");
var widget_manager_1 = require("./widget-manager");
var shell_1 = require("./shell");
var status_bar_1 = require("./status-bar/status-bar");
var label_parser_1 = require("./label-parser");
var label_provider_1 = require("./label-provider");
var preferences_1 = require("./preferences");
var context_menu_renderer_1 = require("./context-menu-renderer");
var theming_1 = require("./theming");
var connection_status_service_1 = require("./connection-status-service");
require("../../src/browser/style/index.css");
require("font-awesome/css/font-awesome.min.css");
require("file-icons-js/css/style.css");
exports.frontendApplicationModule = new inversify_1.ContainerModule(function (bind, unbind, isBound, rebind) {
    bind(frontend_application_1.FrontendApplication).toSelf().inSingletonScope();
    bind(frontend_application_1.DefaultFrontendApplicationContribution).toSelf();
    common_1.bindContributionProvider(bind, frontend_application_1.FrontendApplicationContribution);
    bind(shell_1.ApplicationShellOptions).toConstantValue({});
    bind(shell_1.ApplicationShell).toSelf().inSingletonScope();
    bind(shell_1.SidePanelHandlerFactory).toAutoFactory(shell_1.SidePanelHandler);
    bind(shell_1.SidePanelHandler).toSelf();
    bind(shell_1.SplitPositionHandler).toSelf().inSingletonScope();
    bind(shell_1.DockPanelRenderer).toSelf();
    bind(shell_1.TabBarRendererFactory).toFactory(function (context) { return function () {
        var contextMenuRenderer = context.container.get(context_menu_renderer_1.ContextMenuRenderer);
        return new shell_1.TabBarRenderer(contextMenuRenderer);
    }; });
    common_1.bindContributionProvider(bind, opener_service_1.OpenHandler);
    bind(opener_service_1.DefaultOpenerService).toSelf().inSingletonScope();
    bind(opener_service_1.OpenerService).toDynamicValue(function (context) { return context.container.get(opener_service_1.DefaultOpenerService); });
    bind(http_open_handler_1.HttpOpenHandler).toSelf().inSingletonScope();
    bind(opener_service_1.OpenHandler).toDynamicValue(function (ctx) { return ctx.container.get(http_open_handler_1.HttpOpenHandler); }).inSingletonScope();
    common_1.bindContributionProvider(bind, widget_manager_1.WidgetFactory);
    bind(widget_manager_1.WidgetManager).toSelf().inSingletonScope();
    bind(shell_1.ShellLayoutRestorer).toSelf().inSingletonScope();
    bind(common_1.CommandContribution).toDynamicValue(function (ctx) { return ctx.container.get(shell_1.ShellLayoutRestorer); });
    bind(common_1.DefaultResourceProvider).toSelf().inSingletonScope();
    bind(common_1.ResourceProvider).toProvider(function (context) {
        return function (uri) { return context.container.get(common_1.DefaultResourceProvider).get(uri); };
    });
    common_1.bindContributionProvider(bind, common_1.ResourceResolver);
    bind(common_1.SelectionService).toSelf().inSingletonScope();
    bind(common_1.CommandRegistry).toSelf().inSingletonScope();
    bind(common_1.CommandService).toDynamicValue(function (context) { return context.container.get(common_1.CommandRegistry); });
    common_1.bindContributionProvider(bind, common_1.CommandContribution);
    bind(common_1.MenuModelRegistry).toSelf().inSingletonScope();
    common_1.bindContributionProvider(bind, common_1.MenuContribution);
    bind(keybinding_1.KeybindingRegistry).toSelf().inSingletonScope();
    common_1.bindContributionProvider(bind, keybinding_1.KeybindingContext);
    common_1.bindContributionProvider(bind, keybinding_1.KeybindingContribution);
    bind(common_1.MessageClient).toSelf().inSingletonScope();
    bind(common_1.MessageService).toSelf().inSingletonScope();
    bind(common_frontend_contribution_1.CommonFrontendContribution).toSelf().inSingletonScope();
    [common_1.CommandContribution, keybinding_1.KeybindingContribution, common_1.MenuContribution].forEach(function (serviceIdentifier) {
        return bind(serviceIdentifier).toDynamicValue(function (ctx) { return ctx.container.get(common_frontend_contribution_1.CommonFrontendContribution); }).inSingletonScope();
    });
    bind(quick_open_1.QuickOpenService).toSelf().inSingletonScope();
    bind(quick_open_1.QuickCommandService).toSelf().inSingletonScope();
    bind(quick_open_1.QuickCommandFrontendContribution).toSelf().inSingletonScope();
    [common_1.CommandContribution, keybinding_1.KeybindingContribution].forEach(function (serviceIdentifier) {
        return bind(serviceIdentifier).toDynamicValue(function (ctx) { return ctx.container.get(quick_open_1.QuickCommandFrontendContribution); }).inSingletonScope();
    });
    bind(storage_service_1.StorageService).to(storage_service_1.LocalStorageService).inSingletonScope();
    bind(status_bar_1.StatusBarImpl).toSelf().inSingletonScope();
    bind(status_bar_1.StatusBar).toDynamicValue(function (ctx) { return ctx.container.get(status_bar_1.StatusBarImpl); }).inSingletonScope();
    bind(label_parser_1.LabelParser).toSelf().inSingletonScope();
    common_1.bindContributionProvider(bind, label_provider_1.LabelProviderContribution);
    bind(label_provider_1.LabelProvider).toSelf().inSingletonScope();
    bind(label_provider_1.LabelProviderContribution).to(label_provider_1.DefaultUriLabelProviderContribution).inSingletonScope();
    bind(common_1.CommandContribution).to(theming_1.ThemingCommandContribution).inSingletonScope();
    bind(preferences_1.PreferenceProviders).toFactory(function (ctx) { return function () { return []; }; });
    bind(preferences_1.PreferenceServiceImpl).toSelf().inSingletonScope();
    try {
        for (var _a = __values([preferences_1.PreferenceService, frontend_application_1.FrontendApplicationContribution]), _b = _a.next(); !_b.done; _b = _a.next()) {
            var serviceIdentifier = _b.value;
            bind(serviceIdentifier).toDynamicValue(function (ctx) { return ctx.container.get(preferences_1.PreferenceServiceImpl); }).inSingletonScope();
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
        }
        finally { if (e_1) throw e_1.error; }
    }
    bind(connection_status_service_1.FrontendConnectionStatusService).toSelf().inSingletonScope();
    bind(connection_status_service_1.ConnectionStatusService).toDynamicValue(function (ctx) { return ctx.container.get(connection_status_service_1.FrontendConnectionStatusService); }).inSingletonScope();
    bind(frontend_application_1.FrontendApplicationContribution).toDynamicValue(function (ctx) { return ctx.container.get(connection_status_service_1.FrontendConnectionStatusService); }).inSingletonScope();
    bind(connection_status_service_1.ApplicationConnectionStatusContribution).toSelf().inSingletonScope();
    bind(frontend_application_1.FrontendApplicationContribution).toDynamicValue(function (ctx) { return ctx.container.get(connection_status_service_1.ApplicationConnectionStatusContribution); }).inSingletonScope();
    var e_1, _c;
});
var theme = theming_1.ThemeService.get().getCurrentTheme().id;
theming_1.ThemeService.get().setCurrentTheme(theme);
//# sourceMappingURL=frontend-application-module.js.map