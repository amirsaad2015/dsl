"use strict";
/*
 * Copyright (C) 2017 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var quick_open_service_1 = require("./quick-open/quick-open-service");
var quick_open_model_1 = require("./quick-open/quick-open-model");
var event_1 = require("../common/event");
var dark = require('../../src/browser/style/variables-dark.useable.css');
var light = require('../../src/browser/style/variables-bright.useable.css');
var darkTheme = {
    id: 'dark',
    label: 'Dark Theme',
    description: 'Bright fonts on dark backgrounds.',
    editorTheme: 'vs-dark',
    activate: function () {
        dark.use();
    },
    deactivate: function () {
        dark.unuse();
    }
};
var lightTheme = {
    id: 'light',
    label: 'Light Theme',
    description: 'Dark fonts on light backgrounds.',
    editorTheme: 'vs',
    activate: function () {
        light.use();
    },
    deactivate: function () {
        light.unuse();
    }
};
var ThemeService = /** @class */ (function () {
    function ThemeService(defaultTheme) {
        this.defaultTheme = defaultTheme;
        this.themes = {};
        this.themeChange = new event_1.Emitter();
        this.onThemeChange = this.themeChange.event;
    }
    ThemeService.prototype.register = function (theme) {
        this.themes[theme.id] = theme;
    };
    ThemeService.prototype.getThemes = function () {
        var result = [];
        for (var o in this.themes) {
            if (this.themes.hasOwnProperty(o)) {
                result.push(this.themes[o]);
            }
        }
        return result;
    };
    ThemeService.prototype.setCurrentTheme = function (themeId) {
        var newTheme = this.themes[themeId] || this.themes[this.defaultTheme];
        var oldTheme = this.activeTheme;
        if (oldTheme) {
            oldTheme.deactivate();
        }
        newTheme.activate();
        this.activeTheme = newTheme;
        this.themeChange.fire({
            newTheme: newTheme, oldTheme: oldTheme
        });
        window.localStorage.setItem('theme', themeId);
    };
    ThemeService.prototype.getCurrentTheme = function () {
        var themeId = window.localStorage.getItem('theme') || this.defaultTheme;
        return this.themes[themeId] || this.themes[this.defaultTheme];
    };
    ThemeService.get = function () {
        // tslint:disable-next-line:no-any
        var wnd = window;
        if (!wnd.__themeService) {
            var themeService = new ThemeService('dark');
            wnd.__themeService = themeService;
        }
        return wnd.__themeService;
    };
    return ThemeService;
}());
exports.ThemeService = ThemeService;
ThemeService.get().register(darkTheme);
ThemeService.get().register(lightTheme);
var ThemingCommandContribution = /** @class */ (function () {
    function ThemingCommandContribution(openService) {
        this.openService = openService;
        this.id = 'change_theme';
        this.label = 'Change Color Theme';
        this.themeService = ThemeService.get();
    }
    ThemingCommandContribution.prototype.registerCommands = function (commands) {
        commands.registerCommand(this, this);
    };
    ThemingCommandContribution.prototype.execute = function () {
        var _this = this;
        this.resetTo = this.themeService.getCurrentTheme().id;
        this.openService.open(this, {
            placeholder: 'Select Color Theme (Up/Down Keys to Preview)',
            fuzzyMatchLabel: true,
            selectIndex: function () { return _this.activeIndex(); },
            onClose: function () {
                if (_this.resetTo) {
                    _this.themeService.setCurrentTheme(_this.resetTo);
                }
            }
        });
    };
    ThemingCommandContribution.prototype.activeIndex = function () {
        var current = this.themeService.getCurrentTheme().id;
        var themes = this.themeService.getThemes();
        for (var i = 0; i < themes.length; i++) {
            if (themes[i].id === current) {
                return i;
            }
        }
        return -1;
    };
    ThemingCommandContribution.prototype.onType = function (lookFor, acceptor) {
        var _this = this;
        var items = this.themeService.getThemes().map(function (t) {
            return new quick_open_model_1.QuickOpenItem({
                label: t.label,
                description: t.description,
                run: function (mode) {
                    if (mode === quick_open_model_1.QuickOpenMode.OPEN) {
                        _this.resetTo = undefined;
                    }
                    _this.themeService.setCurrentTheme(t.id);
                    return true;
                }
            });
        });
        acceptor(items);
    };
    ThemingCommandContribution = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(quick_open_service_1.QuickOpenService)),
        __metadata("design:paramtypes", [quick_open_service_1.QuickOpenService])
    ], ThemingCommandContribution);
    return ThemingCommandContribution;
}());
exports.ThemingCommandContribution = ThemingCommandContribution;
//# sourceMappingURL=theming.js.map