"use strict";
/*
 * Copyright (C) 2018 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var event_1 = require("../../common/event");
/**
 * Decorator service which emits events from all known tree decorators.
 */
exports.TreeDecoratorService = Symbol('TreeDecoratorService');
/**
 * The default tree decorator service. Does nothing at all. One has to rebind to a concrete implementation
 * if decorators have to be supported in the tree widget.
 */
var NoopTreeDecoratorService = /** @class */ (function () {
    function NoopTreeDecoratorService() {
        this.emitter = new event_1.Emitter();
        this.onDidChangeDecorations = this.emitter.event;
    }
    NoopTreeDecoratorService.prototype.getDecorations = function () {
        return new Map();
    };
    NoopTreeDecoratorService.prototype.deflateDecorators = function (decorations) {
        return {};
    };
    // tslint:disable-next-line:no-any
    NoopTreeDecoratorService.prototype.inflateDecorators = function (state) {
        return new Map();
    };
    NoopTreeDecoratorService = __decorate([
        inversify_1.injectable()
    ], NoopTreeDecoratorService);
    return NoopTreeDecoratorService;
}());
exports.NoopTreeDecoratorService = NoopTreeDecoratorService;
/**
 * Abstract decorator service implementation which emits events from all known tree decorators and caches the current state.
 */
var AbstractTreeDecoratorService = /** @class */ (function () {
    function AbstractTreeDecoratorService(decorators) {
        var _this = this;
        this.decorators = decorators;
        this.emitter = new event_1.Emitter();
        this.decorations = new Map();
        this.decorators.forEach(function (decorator) {
            var id = decorator.id;
            decorator.onDidChangeDecorations(function (data) {
                _this.decorations.set(id, data);
                _this.emitter.fire(_this.getDecorations.bind(_this));
            });
        });
    }
    Object.defineProperty(AbstractTreeDecoratorService.prototype, "onDidChangeDecorations", {
        get: function () {
            return this.emitter.event;
        },
        enumerable: true,
        configurable: true
    });
    AbstractTreeDecoratorService.prototype.getDecorations = function (tree) {
        var changes = new Map();
        try {
            for (var _a = __values(this.decorations.values()), _b = _a.next(); !_b.done; _b = _a.next()) {
                var fn = _b.value;
                try {
                    for (var _c = __values(fn(tree).entries()), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var _e = __read(_d.value, 2), id = _e[0], data = _e[1];
                        if (changes.has(id)) {
                            changes.get(id).push(data);
                        }
                        else {
                            changes.set(id, [data]);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_f = _c.return)) _f.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_g = _a.return)) _g.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return changes;
        var e_2, _g, e_1, _f;
    };
    AbstractTreeDecoratorService.prototype.deflateDecorators = function (decorations) {
        // tslint:disable-next-line:no-null-keyword
        var state = Object.create(null);
        try {
            for (var decorations_1 = __values(decorations), decorations_1_1 = decorations_1.next(); !decorations_1_1.done; decorations_1_1 = decorations_1.next()) {
                var _a = __read(decorations_1_1.value, 2), id = _a[0], data = _a[1];
                state[id] = data;
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (decorations_1_1 && !decorations_1_1.done && (_b = decorations_1.return)) _b.call(decorations_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return state;
        var e_3, _b;
    };
    // tslint:disable-next-line:no-any
    AbstractTreeDecoratorService.prototype.inflateDecorators = function (state) {
        var decorators = new Map();
        try {
            for (var _a = __values(Object.keys(state)), _b = _a.next(); !_b.done; _b = _a.next()) {
                var id = _b.value;
                decorators.set(id, state[id]);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return decorators;
        var e_4, _c;
    };
    AbstractTreeDecoratorService = __decorate([
        inversify_1.injectable(),
        __metadata("design:paramtypes", [Object])
    ], AbstractTreeDecoratorService);
    return AbstractTreeDecoratorService;
}());
exports.AbstractTreeDecoratorService = AbstractTreeDecoratorService;
/**
 * Namespace for the decoration data and the styling refinements for the decorated tree nodes.
 */
var TreeDecoration;
(function (TreeDecoration) {
    /**
     * CSS styles for the tree decorators.
     */
    var Styles;
    (function (Styles) {
        Styles.CAPTION_PREFIX_CLASS = 'theia-caption-prefix';
        Styles.CAPTION_SUFFIX_CLASS = 'theia-caption-suffix';
        Styles.ICON_WRAPPER_CLASS = 'theia-icon-wrapper';
        Styles.DECORATOR_SIZE_CLASS = 'theia-decorator-size';
        Styles.TOP_RIGHT_CLASS = 'theia-top-right';
        Styles.BOTTOM_RIGHT_CLASS = 'theia-bottom-right';
        Styles.BOTTOM_LEFT_CLASS = 'theia-bottom-left';
        Styles.TOP_LEFT_CLASS = 'theia-top-left';
    })(Styles = TreeDecoration.Styles || (TreeDecoration.Styles = {}));
    /**
     * Enumeration for the quadrant to overlay the image on.
     */
    var IconOverlayPosition;
    (function (IconOverlayPosition) {
        /**
         * Overlays the top right quarter of the original image.
         */
        IconOverlayPosition[IconOverlayPosition["TOP_RIGHT"] = 0] = "TOP_RIGHT";
        /**
         * Overlays the bottom right of the original image.
         */
        IconOverlayPosition[IconOverlayPosition["BOTTOM_RIGHT"] = 1] = "BOTTOM_RIGHT";
        /**
         * Overlays the bottom left segment of the original image.
         */
        IconOverlayPosition[IconOverlayPosition["BOTTOM_LEFT"] = 2] = "BOTTOM_LEFT";
        /**
         * Occupies the top left quarter of the original icon.
         */
        IconOverlayPosition[IconOverlayPosition["TOP_LEFT"] = 3] = "TOP_LEFT";
    })(IconOverlayPosition = TreeDecoration.IconOverlayPosition || (TreeDecoration.IconOverlayPosition = {}));
    (function (IconOverlayPosition) {
        /**
         * Returns with the CSS class style for the enum.
         */
        function getStyle(position) {
            switch (position) {
                case IconOverlayPosition.TOP_RIGHT: return TreeDecoration.Styles.TOP_RIGHT_CLASS;
                case IconOverlayPosition.BOTTOM_RIGHT: return TreeDecoration.Styles.BOTTOM_RIGHT_CLASS;
                case IconOverlayPosition.BOTTOM_LEFT: return TreeDecoration.Styles.BOTTOM_LEFT_CLASS;
                case IconOverlayPosition.TOP_LEFT: return TreeDecoration.Styles.TOP_LEFT_CLASS;
            }
        }
        IconOverlayPosition.getStyle = getStyle;
    })(IconOverlayPosition = TreeDecoration.IconOverlayPosition || (TreeDecoration.IconOverlayPosition = {}));
    var Data;
    (function (Data) {
        /**
         * Compares the decoration data based on the priority. Lowest priorities come first.
         */
        Data.comparePriority = function (left, right) { return (left.priority || 0) - (right.priority || 0); };
    })(Data = TreeDecoration.Data || (TreeDecoration.Data = {}));
})(TreeDecoration = exports.TreeDecoration || (exports.TreeDecoration = {}));
//# sourceMappingURL=tree-decorator.js.map