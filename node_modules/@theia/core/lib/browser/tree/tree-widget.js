"use strict";
/*
 * Copyright (C) 2017 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var domutils_1 = require("@phosphor/domutils");
var virtualdom_1 = require("@phosphor/virtualdom");
var common_1 = require("../../common");
var keys_1 = require("../keys");
var context_menu_renderer_1 = require("../context-menu-renderer");
var widgets_1 = require("../widgets");
var tree_1 = require("./tree");
var tree_model_1 = require("./tree-model");
var tree_expansion_1 = require("./tree-expansion");
var tree_selection_1 = require("./tree-selection");
var tree_decorator_1 = require("./tree-decorator");
var objects_1 = require("../../common/objects");
exports.TREE_CLASS = 'theia-Tree';
exports.TREE_NODE_CLASS = 'theia-TreeNode';
exports.TREE_NODE_TAIL_CLASS = 'theia-TreeNodeTail';
exports.TREE_NODE_SEGMENT_CLASS = 'theia-TreeNodeSegment';
exports.TREE_NODE_SEGMENT_GROW_CLASS = 'theia-TreeNodeSegmentGrow';
exports.EXPANDABLE_TREE_NODE_CLASS = 'theia-ExpandableTreeNode';
exports.COMPOSITE_TREE_NODE_CLASS = 'theia-CompositeTreeNode';
exports.TREE_NODE_CAPTION_CLASS = 'theia-TreeNodeCaption';
exports.EXPANSION_TOGGLE_CLASS = 'theia-ExpansionToggle';
exports.TreeProps = Symbol('TreeProps');
exports.defaultTreeProps = {
    leftPadding: 16
};
var TreeWidget = /** @class */ (function (_super) {
    __extends(TreeWidget, _super);
    function TreeWidget(props, model, contextMenuRenderer) {
        var _this = _super.call(this) || this;
        _this.props = props;
        _this.model = model;
        _this.contextMenuRenderer = contextMenuRenderer;
        _this.decorations = new Map();
        _this.scrollOptions = {
            suppressScrollX: true
        };
        _this.addClass(exports.TREE_CLASS);
        _this.node.tabIndex = 0;
        model.onChanged(function () { return _this.update(); });
        _this.toDispose.push(model);
        return _this;
    }
    TreeWidget.prototype.init = function () {
        var _this = this;
        this.toDispose.pushAll([
            this.decoratorService.onDidChangeDecorations(function (op) { return _this.updateDecorations(op(_this.model)); }),
            this.model.onNodeRefreshed(function () { return _this.updateDecorations(_this.decoratorService.getDecorations(_this.model)); }),
            this.model.onExpansionChanged(function () { return _this.updateDecorations(_this.decoratorService.getDecorations(_this.model)); })
        ]);
    };
    TreeWidget.prototype.updateDecorations = function (decorations) {
        this.decorations = decorations;
        this.update();
    };
    TreeWidget.prototype.onActivateRequest = function (msg) {
        _super.prototype.onActivateRequest.call(this, msg);
        if (!this.model.selectedNode && tree_selection_1.ISelectableTreeNode.is(this.model.root)) {
            this.model.selectNode(this.model.root);
        }
        this.node.focus();
    };
    TreeWidget.prototype.onUpdateRequest = function (msg) {
        _super.prototype.onUpdateRequest.call(this, msg);
        var selected = this.node.getElementsByClassName(widgets_1.SELECTED_CLASS)[0];
        if (selected) {
            domutils_1.ElementExt.scrollIntoViewIfNeeded(this.node, selected);
        }
    };
    TreeWidget.prototype.render = function () {
        return this.renderTree(this.model);
    };
    TreeWidget.prototype.renderTree = function (model) {
        if (model.root) {
            var props = this.createRootProps(model.root);
            return this.renderSubTree(model.root, props);
        }
        // tslint:disable-next-line:no-null-keyword
        return null;
    };
    TreeWidget.prototype.createRootProps = function (node) {
        return {
            depth: 0,
            visible: true
        };
    };
    TreeWidget.prototype.renderSubTree = function (node, props) {
        var children = this.renderNodeChildren(node, props);
        if (!tree_1.ITreeNode.isVisible(node)) {
            return children;
        }
        var parent = this.renderNode(node, props);
        return widgets_1.VirtualRenderer.merge(parent, children);
    };
    TreeWidget.prototype.renderIcon = function (node, props) {
        // tslint:disable-next-line:no-null-keyword
        return null;
    };
    TreeWidget.prototype.renderExpansionToggle = function (node, props) {
        var _this = this;
        if (!this.isExpandable(node)) {
            // tslint:disable-next-line:no-null-keyword
            return null;
        }
        var classes = [exports.TREE_NODE_SEGMENT_CLASS, exports.EXPANSION_TOGGLE_CLASS];
        if (!node.expanded) {
            classes.push(widgets_1.COLLAPSED_CLASS);
        }
        var className = classes.join(' ');
        return virtualdom_1.h.div({
            className: className,
            style: {
                paddingLeft: '4px',
                paddingRight: '6px',
                minWidth: '8px'
            },
            onclick: function (event) {
                _this.handleClickEvent(node, event);
                event.stopPropagation();
            }
        });
    };
    TreeWidget.prototype.renderCaption = function (node, props) {
        var tooltip = this.getDecorationData(node, 'tooltip').filter(objects_1.notEmpty).join(' â€¢ ');
        var classes = [exports.TREE_NODE_SEGMENT_CLASS];
        if (!this.hasTrailingSuffixes(node)) {
            classes.push(exports.TREE_NODE_SEGMENT_GROW_CLASS);
        }
        var className = classes.join(' ');
        var attrs = this.decorateCaption(node, {
            className: className
        });
        if (tooltip.length > 0) {
            attrs = __assign({}, attrs, { title: tooltip });
        }
        return virtualdom_1.h.div(attrs, node.name);
    };
    TreeWidget.prototype.decorateCaption = function (node, attrs) {
        var _this = this;
        var style = this.getDecorationData(node, 'fontData').filter(objects_1.notEmpty).reverse().map(function (fontData) { return _this.applyFontStyles({}, fontData); }).reduce(function (acc, current) {
            return (__assign({}, acc, current));
        }, {});
        return __assign({}, attrs, { style: style });
    };
    TreeWidget.prototype.hasTrailingSuffixes = function (node) {
        return this.getDecorationData(node, 'captionSuffixes').filter(objects_1.notEmpty).reduce(function (acc, current) { return acc.concat(current); }, []).length > 0;
    };
    TreeWidget.prototype.applyFontStyles = function (original, fontData) {
        if (fontData === undefined) {
            return original;
        }
        var modified = original;
        var color = fontData.color, style = fontData.style;
        if (color) {
            modified = __assign({}, modified, { color: color });
        }
        if (style) {
            (Array.isArray(style) ? style : [style]).forEach(function (s) {
                switch (style) {
                    case 'bold':
                        modified = __assign({}, modified, { fontWeight: style });
                        break;
                    case 'normal': // Fall through.
                    case 'oblique': // Fall through.
                    case 'italic':
                        modified = __assign({}, modified, { fontStyle: style });
                        break;
                    case 'underline': // Fall through.
                    case 'line-through':
                        modified = __assign({}, modified, { textDecoration: style });
                        break;
                    default:
                        throw new Error("Unexpected font style: " + style + ".");
                }
            });
        }
        return modified;
    };
    TreeWidget.prototype.renderCaptionAffixes = function (node, props, affixKey) {
        var suffix = affixKey === 'captionSuffixes';
        var affixClass = suffix ? tree_decorator_1.TreeDecoration.Styles.CAPTION_SUFFIX_CLASS : tree_decorator_1.TreeDecoration.Styles.CAPTION_PREFIX_CLASS;
        var classes = [exports.TREE_NODE_SEGMENT_CLASS, affixClass];
        var affixes = this.getDecorationData(node, affixKey).filter(objects_1.notEmpty).reduce(function (acc, current) { return acc.concat(current); }, []);
        var children = [];
        for (var i = 0; i < affixes.length; i++) {
            var affix = affixes[i];
            if (suffix && i === affixes.length - 1) {
                classes.push(exports.TREE_NODE_SEGMENT_GROW_CLASS);
            }
            var style = this.applyFontStyles({}, affix.fontData);
            var className = classes.join(' ');
            var attrs = {
                className: className,
                style: style
            };
            children.push(virtualdom_1.h.div(attrs, affix.data));
        }
        return children;
    };
    TreeWidget.prototype.decorateIcon = function (node, icon) {
        if (icon === null) {
            // tslint:disable-next-line:no-null-keyword
            return null;
        }
        var overlayIcons = [];
        new Map(this.getDecorationData(node, 'iconOverlay').reverse().filter(objects_1.notEmpty)
            .map(function (overlay) { return [overlay.position, overlay]; }))
            .forEach(function (overlay, position) {
            var overlayClass = function (iconName) {
                return ['a', 'fa', "fa-" + iconName, tree_decorator_1.TreeDecoration.Styles.DECORATOR_SIZE_CLASS, tree_decorator_1.TreeDecoration.IconOverlayPosition.getStyle(position)].join(' ');
            };
            var style = function (color) { return color === undefined ? {} : { color: color }; };
            if (overlay.background) {
                overlayIcons.push(virtualdom_1.h.span({ className: overlayClass(overlay.background.shape), style: style(overlay.background.color) }));
            }
            overlayIcons.push(virtualdom_1.h.span({ className: overlayClass(overlay.icon), style: style(overlay.color) }));
        });
        if (overlayIcons.length > 0) {
            return virtualdom_1.h.div({ className: tree_decorator_1.TreeDecoration.Styles.ICON_WRAPPER_CLASS }, widgets_1.VirtualRenderer.merge(icon, overlayIcons));
        }
        return icon;
    };
    TreeWidget.prototype.renderTailDecorations = function (node, props) {
        var _this = this;
        var style = function (fontData) { return _this.applyFontStyles({}, fontData); };
        return this.getDecorationData(node, 'tailDecorations').filter(objects_1.notEmpty).reduce(function (acc, current) { return acc.concat(current); }, []).map(function (decoration) {
            var fontData = decoration.fontData, data = decoration.data, tooltip = decoration.tooltip;
            return virtualdom_1.h.div({
                className: [exports.TREE_NODE_SEGMENT_CLASS, exports.TREE_NODE_TAIL_CLASS].join(' '),
                style: style(fontData),
                title: tooltip
            }, data);
        });
    };
    TreeWidget.prototype.renderNode = function (node, props) {
        var attributes = this.createNodeAttributes(node, props);
        return virtualdom_1.h.div.apply(virtualdom_1.h, __spread([attributes,
            this.renderExpansionToggle(node, props),
            this.decorateIcon(node, this.renderIcon(node, props))], this.renderCaptionAffixes(node, props, 'captionPrefixes'), [this.renderCaption(node, props)], this.renderCaptionAffixes(node, props, 'captionSuffixes'), this.renderTailDecorations(node, props)));
    };
    TreeWidget.prototype.createNodeAttributes = function (node, props) {
        var _this = this;
        var className = this.createNodeClassNames(node, props).join(' ');
        var style = this.createNodeStyle(node, props);
        return {
            className: className,
            style: style,
            onclick: function (event) { return _this.handleClickEvent(node, event); },
            ondblclick: function (event) { return _this.handleDblClickEvent(node, event); },
            oncontextmenu: function (event) { return _this.handleContextMenuEvent(node, event); },
        };
    };
    TreeWidget.prototype.createNodeClassNames = function (node, props) {
        var classNames = [exports.TREE_NODE_CLASS];
        if (tree_1.ICompositeTreeNode.is(node)) {
            classNames.push(exports.COMPOSITE_TREE_NODE_CLASS);
        }
        if (this.isExpandable(node)) {
            classNames.push(exports.EXPANDABLE_TREE_NODE_CLASS);
        }
        if (tree_selection_1.ISelectableTreeNode.isSelected(node)) {
            classNames.push(widgets_1.SELECTED_CLASS);
        }
        return classNames;
    };
    TreeWidget.prototype.getDefaultNodeStyle = function (node, props) {
        // If the node is a composite, a toggle will be rendered. Otherwise we need to add the width and the left, right padding => 18px
        var paddingLeft = props.depth * this.props.leftPadding + (this.isExpandable(node) ? 0 : 18) + "px";
        var style = {
            paddingLeft: paddingLeft
        };
        if (!props.visible) {
            style = __assign({}, style, { display: 'none' });
        }
        return style;
    };
    TreeWidget.prototype.createNodeStyle = function (node, props) {
        return this.decorateNodeStyle(node, this.getDefaultNodeStyle(node, props));
    };
    TreeWidget.prototype.decorateNodeStyle = function (node, style) {
        var backgroundColor = this.getDecorationData(node, 'backgroundColor').filter(objects_1.notEmpty).shift();
        if (backgroundColor) {
            style = __assign({}, (style || {}), { backgroundColor: backgroundColor });
        }
        return style;
    };
    TreeWidget.prototype.isExpandable = function (node) {
        return tree_expansion_1.IExpandableTreeNode.is(node);
    };
    TreeWidget.prototype.renderNodeChildren = function (node, props) {
        if (tree_1.ICompositeTreeNode.is(node)) {
            return this.renderCompositeChildren(node, props);
        }
        // tslint:disable-next-line:no-null-keyword
        return null;
    };
    TreeWidget.prototype.renderCompositeChildren = function (parent, props) {
        var _this = this;
        return widgets_1.VirtualRenderer.flatten(parent.children.map(function (child) { return _this.renderChild(child, parent, props); }));
    };
    TreeWidget.prototype.renderChild = function (child, parent, props) {
        var childProps = this.createChildProps(child, parent, props);
        return this.renderSubTree(child, childProps);
    };
    TreeWidget.prototype.createChildProps = function (child, parent, props) {
        if (this.isExpandable(parent)) {
            return this.createExpandableChildProps(child, parent, props);
        }
        return props;
    };
    TreeWidget.prototype.createExpandableChildProps = function (child, parent, props) {
        if (!props.visible) {
            return props;
        }
        var visible = parent.expanded;
        var depth = props.depth + 1;
        return __assign({}, props, { visible: visible, depth: depth });
    };
    TreeWidget.prototype.getDecorations = function (node) {
        var decorations = this.decorations.get(node.id);
        if (decorations) {
            return decorations.sort(tree_decorator_1.TreeDecoration.Data.comparePriority);
        }
        return [];
    };
    TreeWidget.prototype.getDecorationData = function (node, key) {
        return this.getDecorations(node).filter(function (data) { return data[key] !== undefined; }).map(function (data) { return data[key]; }).filter(objects_1.notEmpty);
    };
    TreeWidget.prototype.onAfterAttach = function (msg) {
        var _this = this;
        _super.prototype.onAfterAttach.call(this, msg);
        this.addKeyListener(this.node, keys_1.Key.ARROW_LEFT, function () { return _this.handleLeft(); });
        this.addKeyListener(this.node, keys_1.Key.ARROW_RIGHT, function () { return _this.handleRight(); });
        this.addKeyListener(this.node, keys_1.Key.ARROW_UP, function () { return _this.handleUp(); });
        this.addKeyListener(this.node, keys_1.Key.ARROW_DOWN, function () { return _this.handleDown(); });
        this.addKeyListener(this.node, keys_1.Key.ENTER, function () { return _this.handleEnter(); });
        this.addEventListener(this.node, 'contextmenu', function (e) { return _this.handleContextMenuEvent(_this.model.root, e); });
        this.addEventListener(this.node, 'click', function (e) { return _this.handleClickEvent(_this.model.root, e); });
    };
    TreeWidget.prototype.handleLeft = function () {
        if (!this.model.collapseNode()) {
            this.model.selectParent();
        }
    };
    TreeWidget.prototype.handleRight = function () {
        if (!this.model.expandNode()) {
            this.model.selectNextNode();
        }
    };
    TreeWidget.prototype.handleUp = function () {
        this.model.selectPrevNode();
    };
    TreeWidget.prototype.handleDown = function () {
        this.model.selectNextNode();
    };
    TreeWidget.prototype.handleEnter = function () {
        this.model.openNode();
    };
    TreeWidget.prototype.handleClickEvent = function (node, event) {
        if (node) {
            if (tree_selection_1.ISelectableTreeNode.is(node)) {
                this.model.selectNode(node);
            }
            if (this.isExpandable(node)) {
                this.model.toggleNodeExpansion(node);
            }
            event.stopPropagation();
        }
    };
    TreeWidget.prototype.handleDblClickEvent = function (node, event) {
        this.model.openNode(node);
        event.stopPropagation();
    };
    TreeWidget.prototype.handleContextMenuEvent = function (node, event) {
        var _this = this;
        if (tree_selection_1.ISelectableTreeNode.is(node)) {
            this.model.selectNode(node);
            var contextMenuPath_1 = this.props.contextMenuPath;
            if (contextMenuPath_1) {
                this.onRender.push(common_1.Disposable.create(function () {
                    return setTimeout(function () {
                        return _this.contextMenuRenderer.render(contextMenuPath_1, event);
                    });
                }));
            }
            this.update();
        }
        event.stopPropagation();
        event.preventDefault();
    };
    TreeWidget.prototype.deflateForStorage = function (node) {
        // tslint:disable-next-line:no-any
        var copy = Object.assign({}, node);
        if (copy.parent) {
            delete copy.parent;
        }
        if (tree_1.ICompositeTreeNode.is(node)) {
            copy.children = [];
            try {
                for (var _a = __values(node.children), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var child = _b.value;
                    copy.children.push(this.deflateForStorage(child));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return copy;
        var e_1, _c;
    };
    // tslint:disable-next-line:no-any
    TreeWidget.prototype.inflateFromStorage = function (node, parent) {
        if (node.selected) {
            node.selected = false;
        }
        if (parent) {
            node.parent = parent;
        }
        if (Array.isArray(node.children)) {
            try {
                for (var _a = __values(node.children), _b = _a.next(); !_b.done; _b = _a.next()) {
                    var child = _b.value;
                    this.inflateFromStorage(child, node);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return node;
        var e_2, _c;
    };
    TreeWidget.prototype.storeState = function () {
        var decorations = this.decoratorService.deflateDecorators(this.decorations);
        var state = {
            decorations: decorations
        };
        if (this.model.root) {
            state = __assign({}, state, { root: this.deflateForStorage(this.model.root) });
        }
        return state;
    };
    TreeWidget.prototype.restoreState = function (oldState) {
        // tslint:disable-next-line:no-any
        var _a = oldState, root = _a.root, decorations = _a.decorations;
        if (root) {
            this.model.root = this.inflateFromStorage(root);
        }
        if (decorations) {
            this.updateDecorations(this.decoratorService.inflateDecorators(decorations));
        }
    };
    __decorate([
        inversify_1.inject(tree_decorator_1.TreeDecoratorService),
        __metadata("design:type", Object)
    ], TreeWidget.prototype, "decoratorService", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], TreeWidget.prototype, "init", null);
    TreeWidget = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(exports.TreeProps)),
        __param(1, inversify_1.inject(tree_model_1.ITreeModel)),
        __param(2, inversify_1.inject(context_menu_renderer_1.ContextMenuRenderer)),
        __metadata("design:paramtypes", [Object, Object, Object])
    ], TreeWidget);
    return TreeWidget;
}(widgets_1.VirtualWidget));
exports.TreeWidget = TreeWidget;
//# sourceMappingURL=tree-widget.js.map