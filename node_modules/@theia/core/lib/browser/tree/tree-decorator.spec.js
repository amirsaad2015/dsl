"use strict";
/*
 * Copyright (C) 2018 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var tree_decorator_1 = require("./tree-decorator");
var MockTreeDecoratorService = /** @class */ (function (_super) {
    __extends(MockTreeDecoratorService, _super);
    function MockTreeDecoratorService() {
        return _super.call(this, []) || this;
    }
    return MockTreeDecoratorService;
}(tree_decorator_1.AbstractTreeDecoratorService));
describe('tree-decorator', function () {
    describe('tree-decorator-service', function () {
        var decoratorService = new MockTreeDecoratorService();
        it('should inflate an empty object into an empty map', function () {
            chai_1.expect(decoratorService.inflateDecorators({})).to.be.empty;
        });
        it('should inflate an object into the corresponding map', function () {
            var expected = new Map();
            expected.set('id_1', [
                {
                    tooltip: 'tooltip'
                },
                {
                    fontData: {
                        color: 'blue'
                    }
                }
            ]);
            expected.set('id_2', [
                {
                    backgroundColor: 'yellow'
                },
                {
                    priority: 100
                }
            ]);
            chai_1.expect(decoratorService.inflateDecorators({
                "id_1": [
                    {
                        "tooltip": "tooltip"
                    },
                    {
                        "fontData": {
                            "color": "blue"
                        }
                    }
                ],
                "id_2": [
                    {
                        "backgroundColor": "yellow"
                    },
                    {
                        "priority": 100
                    }
                ]
            })).to.be.deep.equal(expected);
        });
        it('should deflate an empty map into an empty object', function () {
            chai_1.expect(decoratorService.inflateDecorators({})).to.be.empty;
        });
        it('should inflate an object into the corresponding map', function () {
            var decorations = new Map();
            decorations.set('id_1', [
                {
                    tooltip: 'tooltip'
                },
                {
                    fontData: {
                        color: 'blue'
                    }
                }
            ]);
            decorations.set('id_2', [
                {
                    backgroundColor: 'yellow'
                },
                {
                    priority: 100
                }
            ]);
            chai_1.expect(decoratorService.deflateDecorators(decorations)).to.be.deep.equal({
                "id_1": [
                    {
                        "tooltip": "tooltip"
                    },
                    {
                        "fontData": {
                            "color": "blue"
                        }
                    }
                ],
                "id_2": [
                    {
                        "backgroundColor": "yellow"
                    },
                    {
                        "priority": 100
                    }
                ]
            });
        });
    });
});
//# sourceMappingURL=tree-decorator.spec.js.map