"use strict";
/*
 * Copyright (C) 2018 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var logger_1 = require("../common/logger");
var endpoint_1 = require("./endpoint");
var event_1 = require("../common/event");
var frontend_application_1 = require("./frontend-application");
var status_bar_1 = require("./status-bar/status-bar");
/**
 * Service for listening on backend connection changes.
 */
exports.ConnectionStatusService = Symbol('ConnectionStatusService');
/**
 * The connection-status states.
 */
var ConnectionState;
(function (ConnectionState) {
    /**
     * Connected to the backend.
     */
    ConnectionState[ConnectionState["ONLINE"] = 0] = "ONLINE";
    /**
     * The connection is lost between the client and the endpoint.
     */
    ConnectionState[ConnectionState["OFFLINE"] = 1] = "OFFLINE";
    /**
     * Initially we don't know whether we are online or offline.
     */
    ConnectionState[ConnectionState["INITIAL"] = 2] = "INITIAL";
})(ConnectionState = exports.ConnectionState || (exports.ConnectionState = {}));
var ConnectionStatusOptions = /** @class */ (function () {
    function ConnectionStatusOptions() {
    }
    ConnectionStatusOptions.DEFAULT = {
        retry: 5,
        retryInterval: 1000,
        requestTimeout: 1000,
        maxRetryInterval: 10000
    };
    ConnectionStatusOptions = __decorate([
        inversify_1.injectable()
    ], ConnectionStatusOptions);
    return ConnectionStatusOptions;
}());
exports.ConnectionStatusOptions = ConnectionStatusOptions;
var FrontendConnectionStatusService = /** @class */ (function () {
    function FrontendConnectionStatusService(options, logger) {
        if (options === void 0) { options = ConnectionStatusOptions.DEFAULT; }
        this.options = options;
        this.logger = logger;
        this.statusChangeEmitter = new event_1.Emitter();
        this.retryInterval = this.options.retryInterval;
        this.connectionState = new ConnectionStatusImpl({ threshold: this.options.retry });
        this.endpointUrl = new endpoint_1.Endpoint().getRestUrl().toString();
    }
    FrontendConnectionStatusService.prototype.onStart = function () {
        this.start();
    };
    FrontendConnectionStatusService.prototype.onStop = function () {
        this.stop();
    };
    FrontendConnectionStatusService.prototype.start = function () {
        if (this.timer === undefined) {
            this.schedule(this.checkAlive.bind(this));
            this.logger.debug('Started checking the backend connection status.');
            this.fireStatusChange(this.connectionState);
        }
    };
    FrontendConnectionStatusService.prototype.stop = function () {
        if (this.timer !== undefined) {
            this.clearTimeout(this.timer);
            this.timer = undefined;
            this.logger.debug('Stopped checking the backend connection status.');
        }
    };
    Object.defineProperty(FrontendConnectionStatusService.prototype, "onStatusChange", {
        get: function () {
            return this.statusChangeEmitter.event;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FrontendConnectionStatusService.prototype, "currentState", {
        get: function () {
            return this.connectionState;
        },
        enumerable: true,
        configurable: true
    });
    FrontendConnectionStatusService.prototype.schedule = function (checkAlive) {
        var _this = this;
        var tick = function () { return __awaiter(_this, void 0, void 0, function () {
            var success, previousState, newState;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.debug("Checking backend connection status. Scheduled an alive request with " + this.retryInterval + " ms timeout.");
                        return [4 /*yield*/, checkAlive()];
                    case 1:
                        success = _a.sent();
                        this.logger.debug(success ? "Connected to the backend." : "Cannot reach the backend.");
                        previousState = this.connectionState;
                        newState = this.updateStatus(success);
                        if (previousState.state !== newState.state) {
                            this.fireStatusChange(newState);
                        }
                        // Increase the retry interval in a linear scale.
                        this.retryInterval = success ? this.options.retryInterval : Math.min(this.retryInterval + this.options.retryInterval, this.options.maxRetryInterval);
                        this.timer = this.setTimeout(tick, this.retryInterval);
                        return [2 /*return*/];
                }
            });
        }); };
        this.timer = this.setTimeout(tick, this.retryInterval);
    };
    FrontendConnectionStatusService.prototype.updateStatus = function (success) {
        this.connectionState = this.connectionState.next(success);
        return this.connectionState;
    };
    FrontendConnectionStatusService.prototype.fireStatusChange = function (event) {
        this.statusChangeEmitter.fire(event);
    };
    FrontendConnectionStatusService.prototype.checkAlive = function () {
        var _this = this;
        return new Promise(function (resolve) {
            var handle = function (success) { return resolve(success); };
            var xhr = new XMLHttpRequest();
            xhr.timeout = _this.options.requestTimeout;
            xhr.onreadystatechange = function () {
                var readyState = xhr.readyState, status = xhr.status;
                if (readyState === XMLHttpRequest.DONE) {
                    handle(status === 200);
                }
            };
            xhr.onerror = function () { return handle(false); };
            xhr.ontimeout = function () { return handle(false); };
            xhr.open('GET', _this.endpointUrl + "/alive");
            try {
                xhr.send();
            }
            catch (_a) {
                handle(false);
            }
        });
    };
    // tslint:disable-next-line:no-any
    FrontendConnectionStatusService.prototype.setTimeout = function (handler, timeout) {
        return window.setTimeout(handler, timeout);
    };
    FrontendConnectionStatusService.prototype.clearTimeout = function (handle) {
        window.clearTimeout(handle);
    };
    FrontendConnectionStatusService = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(ConnectionStatusOptions)), __param(0, inversify_1.optional()),
        __param(1, inversify_1.inject(logger_1.ILogger)),
        __metadata("design:paramtypes", [ConnectionStatusOptions, Object])
    ], FrontendConnectionStatusService);
    return FrontendConnectionStatusService;
}());
exports.FrontendConnectionStatusService = FrontendConnectionStatusService;
var ApplicationConnectionStatusContribution = /** @class */ (function (_super) {
    __extends(ApplicationConnectionStatusContribution, _super);
    function ApplicationConnectionStatusContribution(connectionStatusService, statusBar, logger) {
        var _this = _super.call(this) || this;
        _this.connectionStatusService = connectionStatusService;
        _this.statusBar = statusBar;
        _this.logger = logger;
        _this.statusbarId = 'connection-status';
        _this.connectionStatusService.onStatusChange(function (status) { return _this.onStatusChange(status); });
        return _this;
    }
    ApplicationConnectionStatusContribution.prototype.onStatusChange = function (status) {
        switch (status.state) {
            case ConnectionState.OFFLINE: {
                this.handleOffline();
                break;
            }
            case ConnectionState.ONLINE: {
                this.handleOnline();
                break;
            }
        }
    };
    ApplicationConnectionStatusContribution.prototype.handleOnline = function () {
        this.statusBar.setBackgroundColor(undefined);
        this.statusBar.removeElement(this.statusbarId);
    };
    ApplicationConnectionStatusContribution.prototype.handleOffline = function () {
        this.statusBar.setBackgroundColor('var(--theia-warn-color0)');
        this.statusBar.setElement(this.statusbarId, {
            alignment: status_bar_1.StatusBarAlignment.LEFT,
            text: 'Offline',
            tooltip: 'Cannot connect to backend.',
            priority: 5000
        });
    };
    ApplicationConnectionStatusContribution = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(exports.ConnectionStatusService)),
        __param(1, inversify_1.inject(status_bar_1.StatusBar)),
        __param(2, inversify_1.inject(logger_1.ILogger)),
        __metadata("design:paramtypes", [Object, Object, Object])
    ], ApplicationConnectionStatusContribution);
    return ApplicationConnectionStatusContribution;
}(frontend_application_1.DefaultFrontendApplicationContribution));
exports.ApplicationConnectionStatusContribution = ApplicationConnectionStatusContribution;
var ConnectionStatusImpl = /** @class */ (function () {
    function ConnectionStatusImpl(props, state, history) {
        if (state === void 0) { state = ConnectionState.INITIAL; }
        if (history === void 0) { history = []; }
        this.props = props;
        this.state = state;
        this.history = history;
    }
    ConnectionStatusImpl.prototype.next = function (success) {
        var newHistory = this.updateHistory(success);
        var online = newHistory.slice(-this.props.threshold).some(function (s) { return s; });
        // Ideally, we do not switch back to online if we see any `true` items but, let's say, after three consecutive `true`s.
        return new ConnectionStatusImpl(this.props, online ? ConnectionState.ONLINE : ConnectionState.OFFLINE, newHistory);
    };
    ConnectionStatusImpl.prototype.updateHistory = function (success) {
        var updated = __spread(this.history, [success]);
        if (updated.length > ConnectionStatusImpl.MAX_HISTORY) {
            updated.shift();
        }
        return updated;
    };
    ConnectionStatusImpl.MAX_HISTORY = 100;
    return ConnectionStatusImpl;
}());
exports.ConnectionStatusImpl = ConnectionStatusImpl;
//# sourceMappingURL=connection-status-service.js.map