import { CommandRegistry, CommandContribution, CommandHandler, Command } from '../common/command';
import { QuickOpenService } from './quick-open/quick-open-service';
import { QuickOpenModel, QuickOpenItem } from './quick-open/quick-open-model';
import { Event } from '../common/event';
export interface Theme {
    id: string;
    label: string;
    description?: string;
    editorTheme?: string;
    activate(): void;
    deactivate(): void;
}
export interface ThemeChangeEvent {
    newTheme: Theme;
    oldTheme?: Theme;
}
export declare class ThemeService {
    private defaultTheme;
    private themes;
    private activeTheme;
    private readonly themeChange;
    readonly onThemeChange: Event<ThemeChangeEvent>;
    protected constructor(defaultTheme: string);
    register(theme: Theme): void;
    getThemes(): Theme[];
    setCurrentTheme(themeId: string): void;
    getCurrentTheme(): Theme;
    static get(): ThemeService;
}
export declare class ThemingCommandContribution implements CommandContribution, CommandHandler, Command, QuickOpenModel {
    protected openService: QuickOpenService;
    id: string;
    label: string;
    private resetTo;
    private themeService;
    constructor(openService: QuickOpenService);
    registerCommands(commands: CommandRegistry): void;
    execute(): void;
    private activeIndex();
    onType(lookFor: string, acceptor: (items: QuickOpenItem[]) => void): void;
}
