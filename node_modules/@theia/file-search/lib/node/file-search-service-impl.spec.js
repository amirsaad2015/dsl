"use strict";
/*
 * Copyright (C) 2017 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
require("mocha");
var chai = require("chai");
var path = require("path");
var file_search_service_impl_1 = require("./file-search-service-impl");
var node_1 = require("@theia/core/lib/node");
var inversify_1 = require("inversify");
var logger_backend_module_1 = require("@theia/core/lib/node/logger-backend-module");
var process_backend_module_1 = require("@theia/process/lib/node/process-backend-module");
var lib_1 = require("vscode-ws-jsonrpc/lib");
var expect = chai.expect;
var testContainer = new inversify_1.Container();
testContainer.load(logger_backend_module_1.loggerBackendModule);
testContainer.load(process_backend_module_1.default);
testContainer.load(new inversify_1.ContainerModule(function (bind) {
    bind(file_search_service_impl_1.FileSearchServiceImpl).toSelf().inSingletonScope();
}));
describe('search-service', function () {
    var _this = this;
    this.timeout(10000);
    it('shall fuzzy search this spec file', function () { return __awaiter(_this, void 0, void 0, function () {
        var service, rootPath, matches, expectedFile, testFile;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    service = testContainer.get(file_search_service_impl_1.FileSearchServiceImpl);
                    rootPath = path.resolve(__dirname, "..");
                    return [4 /*yield*/, service.find('spc', { rootPath: rootPath })];
                case 1:
                    matches = _a.sent();
                    expectedFile = node_1.FileUri.create(__filename).displayName;
                    testFile = matches.find(function (e) { return e.endsWith(expectedFile); });
                    expect(testFile !== undefined);
                    return [2 /*return*/];
            }
        });
    }); });
    it('shall respect nested .gitignore', function () { return __awaiter(_this, void 0, void 0, function () {
        var service, rootPath, matches;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    service = testContainer.get(file_search_service_impl_1.FileSearchServiceImpl);
                    rootPath = path.resolve(__dirname, "../../test-resources");
                    return [4 /*yield*/, service.find('foo', { rootPath: rootPath, fuzzyMatch: false })];
                case 1:
                    matches = _a.sent();
                    expect(!matches.some(function (e) { return e.endsWith('subdir1/sub-bar/foo.txt'); }), matches.join(','));
                    expect(matches.some(function (e) { return e.endsWith('subdir1/sub2/foo.txt'); }), matches.join(','));
                    expect(matches.some(function (e) { return e.endsWith('subdir1/foo.txt'); }), matches.join(','));
                    return [2 /*return*/];
            }
        });
    }); });
    it('shall cancel searches', function () { return __awaiter(_this, void 0, void 0, function () {
        var service, rootPath, cancelTokenSource, matches;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    service = testContainer.get(file_search_service_impl_1.FileSearchServiceImpl);
                    rootPath = path.resolve(__dirname, "../../../../..");
                    cancelTokenSource = new lib_1.CancellationTokenSource();
                    cancelTokenSource.cancel();
                    return [4 /*yield*/, service.find('foo', { rootPath: rootPath, fuzzyMatch: false }, cancelTokenSource.token)];
                case 1:
                    matches = _a.sent();
                    expect(matches.length === 0);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=file-search-service-impl.spec.js.map