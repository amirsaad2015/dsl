"use strict";
/*
 * Copyright (C) 2017 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var browser_1 = require("@theia/core/lib/browser");
var marker_manager_1 = require("./marker-manager");
var common_1 = require("@theia/filesystem/lib/common");
var uri_1 = require("@theia/core/lib/common/uri");
var label_provider_1 = require("@theia/core/lib/browser/label-provider");
exports.MarkerOptions = Symbol('MarkerOptions');
var MarkerTree = /** @class */ (function (_super) {
    __extends(MarkerTree, _super);
    function MarkerTree(markerManager, markerOptions, labelProvider) {
        var _this = _super.call(this) || this;
        _this.markerManager = markerManager;
        _this.markerOptions = markerOptions;
        _this.labelProvider = labelProvider;
        markerManager.onDidChangeMarkers(function () { return _this.refresh(); });
        _this.root = {
            visible: false,
            id: 'theia-' + markerOptions.kind + '-marker-widget',
            name: 'MarkerTree',
            kind: markerOptions.kind,
            children: [],
            parent: undefined
        };
        return _this;
    }
    MarkerTree.prototype.resolveChildren = function (parent) {
        if (MarkerRootNode.is(parent)) {
            return this.getMarkerInfoNodes(parent);
        }
        else if (MarkerInfoNode.is(parent)) {
            return this.getMarkerNodes(parent);
        }
        return _super.prototype.resolveChildren.call(this, parent);
    };
    MarkerTree.prototype.getMarkerInfoNodes = function (parent) {
        return __awaiter(this, void 0, void 0, function () {
            var uriNodes, _a, _b, uriString, id, uri, label, icon, description, numberOfMarkers, cachedMarkerInfo, e_1_1, e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        uriNodes = [];
                        if (!(this.root && MarkerRootNode.is(this.root))) return [3 /*break*/, 10];
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 8, 9, 10]);
                        _a = __values(this.markerManager.getUris()), _b = _a.next();
                        _d.label = 2;
                    case 2:
                        if (!!_b.done) return [3 /*break*/, 7];
                        uriString = _b.value;
                        id = 'markerInfo-' + uriString;
                        uri = new uri_1.default(uriString);
                        return [4 /*yield*/, this.labelProvider.getName(uri)];
                    case 3:
                        label = _d.sent();
                        return [4 /*yield*/, this.labelProvider.getIcon(uri)];
                    case 4:
                        icon = _d.sent();
                        return [4 /*yield*/, this.labelProvider.getLongName(uri.parent)];
                    case 5:
                        description = _d.sent();
                        numberOfMarkers = this.markerManager.findMarkers({ uri: uri }).length;
                        if (numberOfMarkers > 0) {
                            cachedMarkerInfo = this.getNode(id);
                            if (cachedMarkerInfo && MarkerInfoNode.is(cachedMarkerInfo)) {
                                cachedMarkerInfo.numberOfMarkers = numberOfMarkers;
                                uriNodes.push(cachedMarkerInfo);
                            }
                            else {
                                uriNodes.push({
                                    children: [],
                                    expanded: true,
                                    uri: uri,
                                    id: id,
                                    name: label,
                                    icon: icon,
                                    description: description,
                                    parent: parent,
                                    selected: false,
                                    numberOfMarkers: numberOfMarkers
                                });
                            }
                        }
                        _d.label = 6;
                    case 6:
                        _b = _a.next();
                        return [3 /*break*/, 2];
                    case 7: return [3 /*break*/, 10];
                    case 8:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 10];
                    case 9:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 10: return [2 /*return*/, Promise.resolve(uriNodes)];
                }
            });
        });
    };
    MarkerTree.prototype.getMarkerNodes = function (parent) {
        var markerNodes = [];
        var markers = this.markerManager.findMarkers({ uri: parent.uri });
        for (var i = 0; i < markers.length; i++) {
            var marker = markers[i];
            var uri = new uri_1.default(marker.uri);
            var id = uri.toString() + "_" + i;
            var cachedMarkerNode = this.getNode(id);
            if (MarkerNode.is(cachedMarkerNode)) {
                cachedMarkerNode.marker = marker;
                markerNodes.push(cachedMarkerNode);
            }
            else {
                markerNodes.push({
                    id: id,
                    name: 'marker',
                    parent: parent,
                    selected: false,
                    uri: uri,
                    marker: marker
                });
            }
        }
        return Promise.resolve(markerNodes);
    };
    MarkerTree = __decorate([
        inversify_1.injectable(),
        __metadata("design:paramtypes", [marker_manager_1.MarkerManager, Object, label_provider_1.LabelProvider])
    ], MarkerTree);
    return MarkerTree;
}(browser_1.Tree));
exports.MarkerTree = MarkerTree;
var MarkerNode;
(function (MarkerNode) {
    function is(node) {
        return common_1.UriSelection.is(node) && browser_1.ISelectableTreeNode.is(node) && 'marker' in node;
    }
    MarkerNode.is = is;
})(MarkerNode = exports.MarkerNode || (exports.MarkerNode = {}));
var MarkerInfoNode;
(function (MarkerInfoNode) {
    function is(node) {
        return browser_1.IExpandableTreeNode.is(node) && common_1.UriSelection.is(node);
    }
    MarkerInfoNode.is = is;
})(MarkerInfoNode = exports.MarkerInfoNode || (exports.MarkerInfoNode = {}));
var MarkerRootNode;
(function (MarkerRootNode) {
    function is(node) {
        return browser_1.ICompositeTreeNode.is(node) && 'kind' in node;
    }
    MarkerRootNode.is = is;
})(MarkerRootNode = exports.MarkerRootNode || (exports.MarkerRootNode = {}));
//# sourceMappingURL=marker-tree.js.map