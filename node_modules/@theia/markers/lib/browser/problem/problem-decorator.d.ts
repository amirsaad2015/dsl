import { Diagnostic } from 'vscode-languageserver-types';
import { Event, Emitter } from '@theia/core/lib/common/event';
import { ITree } from '@theia/core/lib/browser/tree/tree';
import { TreeDecorator, TreeDecoration } from '@theia/core/lib/browser/tree/tree-decorator';
import { Marker } from '../../common/marker';
import { ProblemManager } from './problem-manager';
export declare class ProblemDecorator implements TreeDecorator {
    protected readonly problemManager: ProblemManager;
    readonly id: string;
    protected readonly emitter: Emitter<(tree: ITree) => Map<string, TreeDecoration.Data>>;
    constructor(problemManager: ProblemManager);
    readonly onDidChangeDecorations: Event<(tree: ITree) => Map<string, TreeDecoration.Data>>;
    protected fireDidChangeDecorations(event: (tree: ITree) => Map<string, TreeDecoration.Data>): void;
    protected collectDecorators(tree: ITree): Map<string, TreeDecoration.Data>;
    protected appendContainerMarkers(tree: ITree, markers: Marker<Diagnostic>[]): Map<string, Marker<Diagnostic>>;
    protected collectMarkers(tree: ITree): Marker<Diagnostic>[];
    protected toDecorator(marker: Marker<Diagnostic>): TreeDecoration.Data;
    protected getOverlayIcon(marker: Marker<Diagnostic>): string;
    protected getOverlayIconColor(marker: Marker<Diagnostic>): TreeDecoration.Color;
    protected compare(left: Marker<Diagnostic>, right: Marker<Diagnostic>): number;
}
export declare namespace ProblemDecorator {
    const severityCompare: (left: Marker<Diagnostic>, right: Marker<Diagnostic>) => number;
}
