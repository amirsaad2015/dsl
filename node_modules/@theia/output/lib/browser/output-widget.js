"use strict";
/*
 * Copyright (C) 2018 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var browser_1 = require("@theia/core/lib/browser");
var virtualdom_1 = require("@phosphor/virtualdom");
var output_channel_1 = require("../common/output-channel");
require("../../src/browser/style/output.css");
exports.OUTPUT_WIDGET_KIND = 'outputView';
var OutputWidget = /** @class */ (function (_super) {
    __extends(OutputWidget, _super);
    function OutputWidget(outputChannelManager) {
        var _this = _super.call(this) || this;
        _this.outputChannelManager = outputChannelManager;
        _this.OUTPUT_CONTENTS_ID = 'outputContents';
        _this.NONE = '<no channels>';
        _this.id = exports.OUTPUT_WIDGET_KIND;
        _this.title.label = 'Output';
        _this.title.iconClass = 'fa fa-flag';
        _this.title.closable = true;
        _this.addClass('theia-output');
        outputChannelManager.getChannels().forEach(_this.registerListener.bind(_this));
        outputChannelManager.onChannelAdded(function (channel) {
            _this.registerListener(channel);
            _this.update();
        });
        _this.update();
        return _this;
    }
    OutputWidget.prototype.onActivateRequest = function (msg) {
        _super.prototype.onActivateRequest.call(this, msg);
        var channelSelector = document.getElementById('outputChannelList');
        if (channelSelector) {
            channelSelector.focus();
        }
        else {
            this.node.focus();
        }
    };
    OutputWidget.prototype.registerListener = function (outputChannel) {
        var _this = this;
        if (!this.selectedChannel) {
            this.selectedChannel = outputChannel;
        }
        outputChannel.onContentChange(function (c) {
            if (outputChannel === _this.selectedChannel) {
                _this.update();
            }
        });
    };
    OutputWidget.prototype.render = function () {
        return [this.renderChannelSelector(), this.renderChannelContents()];
    };
    OutputWidget.prototype.renderChannelContents = function () {
        var _this = this;
        if (this.selectedChannel) {
            return virtualdom_1.h.div({ id: this.OUTPUT_CONTENTS_ID }, browser_1.VirtualRenderer.flatten(this.selectedChannel.getLines().map(function (line) { return _this.toHtmlText(line); })));
        }
        else {
            return virtualdom_1.h.div({ id: this.OUTPUT_CONTENTS_ID });
        }
    };
    OutputWidget.prototype.toHtmlText = function (text) {
        var result = [];
        if (text) {
            var lines = text.split(/([\n\r]+)/);
            try {
                for (var lines_1 = __values(lines), lines_1_1 = lines_1.next(); !lines_1_1.done; lines_1_1 = lines_1.next()) {
                    var line = lines_1_1.value;
                    result.push(virtualdom_1.h.div(line));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (lines_1_1 && !lines_1_1.done && (_a = lines_1.return)) _a.call(lines_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            result.push(virtualdom_1.h.div('<no output yet>'));
        }
        return result;
        var e_1, _a;
    };
    OutputWidget.prototype.renderChannelSelector = function () {
        var _this = this;
        var channelOptionElements = [];
        this.outputChannelManager.getChannels().forEach(function (channel) {
            channelOptionElements.push(virtualdom_1.h.option({ value: channel.name }, channel.name));
        });
        if (channelOptionElements.length === 0) {
            channelOptionElements.push(virtualdom_1.h.option({ value: this.NONE }, this.NONE));
        }
        return virtualdom_1.h.select({
            id: 'outputChannelList',
            onchange: function (event) { return __awaiter(_this, void 0, void 0, function () {
                var channelName;
                return __generator(this, function (_a) {
                    channelName = event.target.value;
                    if (channelName !== this.NONE) {
                        this.selectedChannel = this.outputChannelManager.getChannel(channelName);
                        this.update();
                    }
                    return [2 /*return*/];
                });
            }); }
        }, browser_1.VirtualRenderer.flatten(channelOptionElements));
    };
    OutputWidget.prototype.onUpdateRequest = function (msg) {
        var _this = this;
        _super.prototype.onUpdateRequest.call(this, msg);
        setTimeout(function () {
            var div = document.getElementById(_this.OUTPUT_CONTENTS_ID);
            if (div && div.children.length > 0) {
                div.children[div.children.length - 1].scrollIntoView(false);
            }
        });
    };
    OutputWidget = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(output_channel_1.OutputChannelManager)),
        __metadata("design:paramtypes", [output_channel_1.OutputChannelManager])
    ], OutputWidget);
    return OutputWidget;
}(browser_1.VirtualWidget));
exports.OutputWidget = OutputWidget;
//# sourceMappingURL=output-widget.js.map