"use strict";
/*
 * Copyright (C) 2017 Ericsson and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var _1 = require("@theia/core/lib/common/");
var task_manager_1 = require("./task-manager");
var node_1 = require("@theia/process/lib/node");
exports.TaskProcessOptions = Symbol("TaskProcessOptions");
exports.TaskFactory = Symbol("TaskFactory");
var Task = /** @class */ (function () {
    function Task(taskManager, logger, options, processManager) {
        var _this = this;
        this.taskManager = taskManager;
        this.logger = logger;
        this.options = options;
        this.processManager = processManager;
        this.taskId = this.taskManager.register(this, this.options.context);
        var toDispose = this.process.onExit(function (event) {
            _this.taskManager.delete(_this);
            toDispose.dispose();
        });
        this.logger.info("Created new task, id: " + this.id + ", process id: " + this.options.process.id + ", OS PID: " + this.process.pid + ", context: " + this.context);
    }
    /** terminates the task */
    Task.prototype.kill = function () {
        var _this = this;
        return new Promise(function (resolve) {
            if (_this.process.killed) {
                resolve();
            }
            else {
                var toDispose_1 = _this.process.onExit(function (event) {
                    toDispose_1.dispose();
                    resolve();
                });
                _this.process.kill();
            }
        });
    };
    /** Returns runtime information about task */
    Task.prototype.getRuntimeInfo = function () {
        return {
            taskId: this.id,
            osProcessId: this.process.pid,
            terminalId: (this.processType === 'terminal') ? this.process.id : undefined,
            processId: (this.processType === 'raw') ? this.process.id : undefined,
            command: this.command,
            label: this.label,
            ctx: this.context
        };
    };
    Object.defineProperty(Task.prototype, "command", {
        get: function () {
            return this.options.command;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Task.prototype, "process", {
        get: function () {
            return this.options.process;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Task.prototype, "id", {
        get: function () {
            return this.taskId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Task.prototype, "context", {
        get: function () {
            return this.options.context;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Task.prototype, "processType", {
        get: function () {
            return this.options.processType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Task.prototype, "label", {
        get: function () {
            return this.options.label;
        },
        enumerable: true,
        configurable: true
    });
    Task = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(task_manager_1.TaskManager)),
        __param(1, inversify_1.inject(_1.ILogger)),
        __param(2, inversify_1.inject(exports.TaskProcessOptions)),
        __param(3, inversify_1.inject(node_1.ProcessManager)),
        __metadata("design:paramtypes", [task_manager_1.TaskManager, Object, Object, node_1.ProcessManager])
    ], Task);
    return Task;
}());
exports.Task = Task;
//# sourceMappingURL=task.js.map