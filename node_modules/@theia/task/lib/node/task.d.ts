import { ILogger } from '@theia/core/lib/common/';
import { ProcessType, TaskInfo } from '../common/task-protocol';
import { TaskManager } from './task-manager';
import { Process, ProcessManager } from "@theia/process/lib/node";
export declare const TaskProcessOptions: unique symbol;
export interface TaskProcessOptions {
    label: string;
    command: string;
    process: Process;
    processType: ProcessType;
    context?: string;
}
export declare const TaskFactory: unique symbol;
export declare type TaskFactory = (options: TaskProcessOptions) => Task;
export declare class Task {
    protected readonly taskManager: TaskManager;
    protected readonly logger: ILogger;
    protected readonly options: TaskProcessOptions;
    protected readonly processManager: ProcessManager;
    protected taskId: number;
    constructor(taskManager: TaskManager, logger: ILogger, options: TaskProcessOptions, processManager: ProcessManager);
    /** terminates the task */
    kill(): Promise<void>;
    /** Returns runtime information about task */
    getRuntimeInfo(): TaskInfo;
    readonly command: string;
    readonly process: Process;
    readonly id: number;
    readonly context: string | undefined;
    readonly processType: ProcessType;
    readonly label: string;
}
