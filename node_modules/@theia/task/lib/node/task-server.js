"use strict";
/*
 * Copyright (C) 2017 Ericsson and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var _1 = require("@theia/core/lib/common/");
var task_1 = require("./task");
var _2 = require("@theia/process/lib/node/");
var _3 = require("@theia/process/lib/node/");
var task_manager_1 = require("./task-manager");
var uri_1 = require("@theia/core/lib/common/uri");
var node_1 = require("@theia/core/lib/node");
var fs = require("fs");
var path = require("path");
var TaskServerImpl = /** @class */ (function () {
    function TaskServerImpl(logger, rawProcessFactory, terminalProcessFactory, taskManager, taskFactory) {
        var _this = this;
        this.logger = logger;
        this.rawProcessFactory = rawProcessFactory;
        this.terminalProcessFactory = terminalProcessFactory;
        this.taskManager = taskManager;
        this.taskFactory = taskFactory;
        /** Task clients, to send notifications-to. */
        this.clients = [];
        /** Map of objects to dispose-of, per running task id */
        this.tasksToDispose = new Map();
        taskManager.onDelete(function (id) {
            var toDispose = _this.tasksToDispose.get(id);
            if (toDispose !== undefined) {
                toDispose.dispose();
                _this.tasksToDispose.delete(id);
            }
        });
    }
    TaskServerImpl.prototype.dispose = function () {
        // do nothing
    };
    TaskServerImpl.prototype.getTasks = function (context) {
        var taskinfo = [];
        var tasks = this.taskManager.getTasks(context);
        if (tasks !== undefined) {
            try {
                for (var tasks_1 = __values(tasks), tasks_1_1 = tasks_1.next(); !tasks_1_1.done; tasks_1_1 = tasks_1.next()) {
                    var task = tasks_1_1.value;
                    taskinfo.push(task.getRuntimeInfo());
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (tasks_1_1 && !tasks_1_1.done && (_a = tasks_1.return)) _a.call(tasks_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        this.logger.debug("getTasks(): about to return task information for " + taskinfo.length + " tasks");
        return Promise.resolve(taskinfo);
        var e_1, _a;
    };
    TaskServerImpl.prototype.run = function (options, ctx) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var processOptions, command, cwd, cmd, task_2, proc, taskInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        processOptions = (_1.isWindows && options.windowsProcessOptions !== undefined) ?
                            options.windowsProcessOptions : options.processOptions;
                        command = processOptions.command;
                        // sanity checks:
                        // - we expect the cwd to be set by the client.
                        // - we expect processType to be set by the client
                        if (!options.cwd) {
                            return [2 /*return*/, Promise.reject(new Error("Can't run a task when 'cwd' is not provided by the client"))];
                        }
                        if (!options.processType) {
                            return [2 /*return*/, Promise.reject(new Error("Can't run a task when 'processType' is not provided by the client"))];
                        }
                        cwd = node_1.FileUri.fsPath(options.cwd);
                        // Use task's cwd with spawned process and pass node env object to
                        // new process, so e.g. we can re-use the system path
                        processOptions.options = {
                            cwd: cwd,
                            env: process.env
                        };
                        return [4 /*yield*/, this.findCommand(command, cwd)];
                    case 1:
                        cmd = _a.sent();
                        if (cmd) {
                            try {
                                proc = void 0;
                                if (options.processType === 'terminal') {
                                    this.logger.debug('Task: creating underlying terminal process');
                                    proc = this.terminalProcessFactory(processOptions);
                                }
                                else {
                                    this.logger.debug('Task: creating underlying raw process');
                                    proc = this.rawProcessFactory(processOptions);
                                }
                                task_2 = this.taskFactory({
                                    label: options.label,
                                    command: cmd,
                                    process: proc,
                                    processType: options.processType,
                                    context: ctx
                                });
                                this.tasksToDispose.set(task_2.id, proc.onExit(function (event) {
                                    _this.fireTaskExitedEvent({
                                        'taskId': task_2.id,
                                        'code': event.code,
                                        'signal': event.signal,
                                        'ctx': ctx === undefined ? '' : ctx
                                    });
                                }));
                                taskInfo = task_2.getRuntimeInfo();
                                this.fireTaskCreatedEvent(taskInfo);
                                return [2 /*return*/, taskInfo];
                            }
                            catch (error) {
                                this.logger.error("Error occured while creating task: " + error);
                                return [2 /*return*/, Promise.reject(new Error(error))];
                            }
                        }
                        else {
                            return [2 /*return*/, Promise.reject(new Error("Command not found: " + command))];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    TaskServerImpl.prototype.fireTaskExitedEvent = function (event) {
        this.logger.debug(function (log) { return log("task has exited:", event); });
        this.clients.forEach(function (client) {
            client.onTaskExit(event);
        });
    };
    TaskServerImpl.prototype.fireTaskCreatedEvent = function (event) {
        this.logger.debug(function (log) { return log("task created:", event); });
        this.clients.forEach(function (client) {
            client.onTaskCreated(event);
        });
    };
    /** Kill task for a given id. Rejects if task is not found */
    TaskServerImpl.prototype.kill = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var taskToKill;
            return __generator(this, function (_a) {
                taskToKill = this.taskManager.get(id);
                if (taskToKill !== undefined) {
                    this.logger.info("Killing task id " + id);
                    return [2 /*return*/, taskToKill.kill()];
                }
                else {
                    this.logger.info("Could not find task to kill, task id " + id + ". Already terminated?");
                    return [2 /*return*/, Promise.reject("Could not find task to kill, task id " + id + ". Already terminated?")];
                }
                return [2 /*return*/];
            });
        });
    };
    /** Adds a client to this server */
    TaskServerImpl.prototype.setClient = function (client) {
        this.logger.debug("a client has connected - adding it to the list:");
        this.clients.push(client);
    };
    /** Removes a client, from this server */
    TaskServerImpl.prototype.disconnectClient = function (client) {
        this.logger.debug("a client has disconnected - removed from list:");
        var idx = this.clients.indexOf(client);
        if (idx > -1) {
            this.clients.splice(idx, 1);
        }
    };
    /**
     * uses heuristics to look-for a command. Will look into the system path, if the command
     * is given without a path. Will resolve if a potential match is found, else reject. There
     * is no garantee that a command we find will be the one executed, if multiple commands with
     * the same name exist.
     * @param command command name to look-for
     * @param cwd current working directory
     */
    TaskServerImpl.prototype.findCommand = function (command, cwd) {
        return __awaiter(this, void 0, void 0, function () {
            var systemPath, pathDelimiter, resolvedCommand, pathArray, pathArray_1, pathArray_1_1, p, candidate, e_2_1, e_2, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        systemPath = process.env.PATH;
                        pathDelimiter = path.delimiter;
                        if (!path.isAbsolute(command)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.executableFileExists(command)];
                    case 1:
                        if (_b.sent()) {
                            return [2 /*return*/, command];
                        }
                        return [3 /*break*/, 12];
                    case 2:
                        resolvedCommand = node_1.FileUri.fsPath(new uri_1.default(cwd).resolve(command));
                        return [4 /*yield*/, this.executableFileExists(resolvedCommand)];
                    case 3:
                        if (!_b.sent()) return [3 /*break*/, 4];
                        return [2 /*return*/, resolvedCommand];
                    case 4:
                        if (!(path.basename(command) === command)) return [3 /*break*/, 12];
                        if (!(systemPath !== undefined)) return [3 /*break*/, 12];
                        pathArray = systemPath.split(pathDelimiter);
                        _b.label = 5;
                    case 5:
                        _b.trys.push([5, 10, 11, 12]);
                        pathArray_1 = __values(pathArray), pathArray_1_1 = pathArray_1.next();
                        _b.label = 6;
                    case 6:
                        if (!!pathArray_1_1.done) return [3 /*break*/, 9];
                        p = pathArray_1_1.value;
                        candidate = node_1.FileUri.fsPath(new uri_1.default(p).resolve(command));
                        return [4 /*yield*/, this.executableFileExists(candidate)];
                    case 7:
                        if (_b.sent()) {
                            return [2 /*return*/, candidate];
                        }
                        _b.label = 8;
                    case 8:
                        pathArray_1_1 = pathArray_1.next();
                        return [3 /*break*/, 6];
                    case 9: return [3 /*break*/, 12];
                    case 10:
                        e_2_1 = _b.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 12];
                    case 11:
                        try {
                            if (pathArray_1_1 && !pathArray_1_1.done && (_a = pathArray_1.return)) _a.call(pathArray_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 12: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Checks for the existance of a file, at the provided path, and make sure that
     * it's readable and executable.
     */
    TaskServerImpl.prototype.executableFileExists = function (filePath) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            fs.access(filePath, fs.constants.F_OK | fs.constants.X_OK, function (err) {
                                resolve(err ? false : true);
                            });
                            return [2 /*return*/];
                        });
                    }); })];
            });
        });
    };
    TaskServerImpl = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(_1.ILogger)),
        __param(1, inversify_1.inject(_2.RawProcessFactory)),
        __param(2, inversify_1.inject(_3.TerminalProcessFactory)),
        __param(3, inversify_1.inject(task_manager_1.TaskManager)),
        __param(4, inversify_1.inject(task_1.TaskFactory)),
        __metadata("design:paramtypes", [Object, Function, Function, task_manager_1.TaskManager, Function])
    ], TaskServerImpl);
    return TaskServerImpl;
}());
exports.TaskServerImpl = TaskServerImpl;
//# sourceMappingURL=task-server.js.map