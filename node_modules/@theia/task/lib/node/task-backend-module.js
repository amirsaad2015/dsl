"use strict";
/*
 * Copyright (C) 2017 Ericsson and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var messaging_1 = require("@theia/core/lib/common/messaging");
var task_1 = require("./task");
var task_protocol_1 = require("../common/task-protocol");
var task_server_1 = require("./task-server");
var task_manager_1 = require("./task-manager");
var task_watcher_1 = require("../common/task-watcher");
var logger_1 = require("@theia/core/lib/common/logger");
var node_1 = require("@theia/core/lib/node");
exports.default = new inversify_1.ContainerModule(function (bind) {
    bind(task_manager_1.TaskManager).toSelf().inSingletonScope();
    bind(node_1.BackendApplicationContribution).toDynamicValue(function (ctx) { return ctx.container.get(task_manager_1.TaskManager); }).inSingletonScope();
    bind(task_protocol_1.TaskServer).to(task_server_1.TaskServerImpl).inSingletonScope();
    bind(task_1.Task).toSelf().inTransientScope();
    bind(task_watcher_1.TaskWatcher).toSelf().inSingletonScope();
    bind(logger_1.ILogger).toDynamicValue(function (ctx) {
        var logger = ctx.container.get(logger_1.ILogger);
        return logger.child({ 'module': 'task' });
    }).inSingletonScope().whenTargetNamed("task");
    bind(messaging_1.ConnectionHandler).toDynamicValue(function (ctx) {
        return new messaging_1.JsonRpcConnectionHandler(task_protocol_1.taskPath, function (client) {
            var taskServer = ctx.container.get(task_protocol_1.TaskServer);
            taskServer.setClient(client);
            // when connection closes, cleanup that client of task-server
            client.onDidCloseConnection(function () {
                taskServer.disconnectClient(client);
            });
            return taskServer;
        });
    }).inSingletonScope();
    bind(task_1.TaskFactory).toFactory(function (ctx) {
        return function (options) {
            var child = new inversify_1.Container({ defaultScope: 'Singleton' });
            child.parent = ctx.container;
            child.bind(task_1.TaskProcessOptions).toConstantValue(options);
            return child.get(task_1.Task);
        };
    });
});
//# sourceMappingURL=task-backend-module.js.map