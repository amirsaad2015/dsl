import { ILogger, Disposable } from '@theia/core/lib/common/';
import { TaskClient, TaskExitedEvent, TaskInfo, TaskOptions, TaskServer } from '../common/task-protocol';
import { TaskFactory } from './task';
import { RawProcessFactory } from '@theia/process/lib/node/';
import { TerminalProcessFactory } from '@theia/process/lib/node/';
import { TaskManager } from './task-manager';
export declare class TaskServerImpl implements TaskServer {
    protected readonly logger: ILogger;
    protected readonly rawProcessFactory: RawProcessFactory;
    protected readonly terminalProcessFactory: TerminalProcessFactory;
    protected readonly taskManager: TaskManager;
    protected readonly taskFactory: TaskFactory;
    /** Task clients, to send notifications-to. */
    protected clients: TaskClient[];
    /** Map of objects to dispose-of, per running task id */
    protected tasksToDispose: Map<number, Disposable>;
    constructor(logger: ILogger, rawProcessFactory: RawProcessFactory, terminalProcessFactory: TerminalProcessFactory, taskManager: TaskManager, taskFactory: TaskFactory);
    dispose(): void;
    getTasks(context?: string | undefined): Promise<TaskInfo[]>;
    run(options: TaskOptions, ctx?: string): Promise<TaskInfo>;
    protected fireTaskExitedEvent(event: TaskExitedEvent): void;
    protected fireTaskCreatedEvent(event: TaskInfo): void;
    /** Kill task for a given id. Rejects if task is not found */
    kill(id: number): Promise<void>;
    /** Adds a client to this server */
    setClient(client: TaskClient): void;
    /** Removes a client, from this server */
    disconnectClient(client: TaskClient): void;
    /**
     * uses heuristics to look-for a command. Will look into the system path, if the command
     * is given without a path. Will resolve if a potential match is found, else reject. There
     * is no garantee that a command we find will be the one executed, if multiple commands with
     * the same name exist.
     * @param command command name to look-for
     * @param cwd current working directory
     */
    protected findCommand(command: string, cwd: string): Promise<string | undefined>;
    /**
     * Checks for the existance of a file, at the provided path, and make sure that
     * it's readable and executable.
     */
    protected executableFileExists(filePath: string): Promise<boolean>;
}
