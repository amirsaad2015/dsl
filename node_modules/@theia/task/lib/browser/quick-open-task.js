"use strict";
/*
 * Copyright (C) 2017 Ericsson and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var task_service_1 = require("./task-service");
var _1 = require("@theia/core/lib/browser/quick-open/");
var QuickOpenTask = /** @class */ (function () {
    function QuickOpenTask(taskService, quickOpenService) {
        this.taskService = taskService;
        this.quickOpenService = quickOpenService;
    }
    QuickOpenTask.prototype.open = function () {
        this.items = [];
        var tasks = this.taskService.getTasks();
        try {
            for (var tasks_1 = __values(tasks), tasks_1_1 = tasks_1.next(); !tasks_1_1.done; tasks_1_1 = tasks_1.next()) {
                var task = tasks_1_1.value;
                this.items.push(new TaskRunQuickOpenItem(task, this.taskService));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (tasks_1_1 && !tasks_1_1.done && (_a = tasks_1.return)) _a.call(tasks_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.quickOpenService.open(this, {
            placeholder: 'Type the name of a task you want to execute',
            fuzzyMatchLabel: true,
            fuzzySort: true
        });
        var e_1, _a;
    };
    QuickOpenTask.prototype.attach = function () {
        var _this = this;
        this.items = [];
        this.taskService.getRunningTasks().then(function (tasks) {
            try {
                for (var tasks_2 = __values(tasks), tasks_2_1 = tasks_2.next(); !tasks_2_1.done; tasks_2_1 = tasks_2.next()) {
                    var task = tasks_2_1.value;
                    // can only attach to terminal processes, so only list those
                    if (task.terminalId) {
                        _this.items.push(new TaskAttachQuickOpenItem(task, _this.getRunningTaskLabel(task), _this.taskService));
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (tasks_2_1 && !tasks_2_1.done && (_a = tasks_2.return)) _a.call(tasks_2);
                }
                finally { if (e_2) throw e_2.error; }
            }
            _this.quickOpenService.open(_this, {
                placeholder: 'Choose task to open',
                fuzzyMatchLabel: true,
                fuzzySort: true
            });
            var e_2, _a;
        });
    };
    QuickOpenTask.prototype.getItems = function (lookFor) {
        return this.items;
    };
    QuickOpenTask.prototype.onType = function (lookFor, acceptor) {
        acceptor(this.items);
    };
    QuickOpenTask.prototype.getRunningTaskLabel = function (task) {
        return "Task id: " + task.taskId + ", label: " + task.label;
    };
    QuickOpenTask = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(task_service_1.TaskService)),
        __param(1, inversify_1.inject(_1.QuickOpenService)),
        __metadata("design:paramtypes", [task_service_1.TaskService,
            _1.QuickOpenService])
    ], QuickOpenTask);
    return QuickOpenTask;
}());
exports.QuickOpenTask = QuickOpenTask;
var TaskRunQuickOpenItem = /** @class */ (function (_super) {
    __extends(TaskRunQuickOpenItem, _super);
    function TaskRunQuickOpenItem(taskLabel, taskService) {
        var _this = _super.call(this) || this;
        _this.taskLabel = taskLabel;
        _this.taskService = taskService;
        return _this;
    }
    TaskRunQuickOpenItem.prototype.getLabel = function () {
        return this.taskLabel;
    };
    TaskRunQuickOpenItem.prototype.run = function (mode) {
        if (mode !== _1.QuickOpenMode.OPEN) {
            return false;
        }
        this.taskService.run(this.taskLabel);
        return true;
    };
    return TaskRunQuickOpenItem;
}(_1.QuickOpenItem));
exports.TaskRunQuickOpenItem = TaskRunQuickOpenItem;
var TaskAttachQuickOpenItem = /** @class */ (function (_super) {
    __extends(TaskAttachQuickOpenItem, _super);
    function TaskAttachQuickOpenItem(task, taskLabel, taskService) {
        var _this = _super.call(this) || this;
        _this.task = task;
        _this.taskLabel = taskLabel;
        _this.taskService = taskService;
        return _this;
    }
    TaskAttachQuickOpenItem.prototype.getLabel = function () {
        return this.taskLabel;
    };
    TaskAttachQuickOpenItem.prototype.run = function (mode) {
        if (mode !== _1.QuickOpenMode.OPEN) {
            return false;
        }
        if (this.task.terminalId) {
            this.taskService.attach(this.task.terminalId, this.task.taskId);
        }
        return true;
    };
    return TaskAttachQuickOpenItem;
}(_1.QuickOpenItem));
exports.TaskAttachQuickOpenItem = TaskAttachQuickOpenItem;
//# sourceMappingURL=quick-open-task.js.map