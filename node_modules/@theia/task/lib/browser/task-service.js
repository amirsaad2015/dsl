"use strict";
/*
 * Copyright (C) 2017 Ericsson and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var common_1 = require("@theia/core/lib/common");
var browser_1 = require("@theia/core/lib/browser");
var task_protocol_1 = require("../common/task-protocol");
var terminal_widget_1 = require("@theia/terminal/lib/browser/terminal-widget");
var widget_manager_1 = require("@theia/core/lib/browser/widget-manager");
var task_watcher_1 = require("../common/task-watcher");
var message_service_1 = require("@theia/core/lib/common/message-service");
var workspace_service_1 = require("@theia/workspace/lib/browser/workspace-service");
var task_configurations_1 = require("./task-configurations");
var TaskService = /** @class */ (function () {
    function TaskService(app, taskServer, logger, widgetManager, taskWatcher, messageService, workspaceService, taskConfigurations) {
        var _this = this;
        this.app = app;
        this.taskServer = taskServer;
        this.logger = logger;
        this.widgetManager = widgetManager;
        this.taskWatcher = taskWatcher;
        this.messageService = messageService;
        this.workspaceService = workspaceService;
        this.taskConfigurations = taskConfigurations;
        this.workspaceRootUri = undefined;
        /**
         * Reflects whether a valid task configuration file was found
         * in the current workspace, and is being watched for changes.
         */
        this.configurationFileFound = false;
        // wait for the workspace root to be set
        this.workspaceService.root.then(function (root) { return __awaiter(_this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!root) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.taskConfigurations.watchConfigurationFile(root.uri)];
                    case 1:
                        _a.configurationFileFound = _b.sent();
                        this.workspaceRootUri = root.uri;
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        }); });
        // notify user that task has started
        this.taskWatcher.onTaskCreated(function (event) {
            if (_this.isEventForThisClient(event.ctx)) {
                _this.messageService.info("Task #" + event.taskId + " created - " + event.label);
            }
        });
        // notify user that task has finished
        this.taskWatcher.onTaskExit(function (event) {
            var signal = event.signal;
            if (!_this.isEventForThisClient(event.ctx)) {
                return;
            }
            if (event.code === 0) {
                var success = '';
                // this finer breakdown will not work on Windows.
                if (signal && signal !== '0') {
                    if (signal === '1') {
                        success = 'Terminal Hangup received - ';
                    }
                    else if (signal === '2') {
                        success = 'User Interrupt received - ';
                    }
                    else if (signal === '15' || signal === 'SIGTERM') {
                        success = 'Termination Interrupt received - ';
                    }
                    else {
                        success = 'Interrupt received - ';
                    }
                }
                else {
                    success = 'Success - ';
                }
                success += "Task " + event.taskId + " has finished. exit code: " + event.code + ", signal: " + event.signal;
                _this.messageService.info(success);
            }
            else {
                _this.messageService.error("Error: Task " + event.taskId + " failed. Exit code: " + event.code + ", signal: " + event.signal);
            }
        });
    }
    /** returns an array of known task configuration labels */
    TaskService.prototype.getTasks = function () {
        return this.taskConfigurations.getTaskLabels();
    };
    /** Returns an array of running tasks 'TaskInfo' objects */
    TaskService.prototype.getRunningTasks = function () {
        return this.taskServer.getTasks(this.getContext());
    };
    /** runs a task, by task configuration label */
    TaskService.prototype.run = function (taskName) {
        return __awaiter(this, void 0, void 0, function () {
            var taskInfo, task, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        task = this.taskConfigurations.getTask(taskName);
                        if (!task) {
                            this.logger.error("Can't get task launch configuration for label: " + taskName);
                            return [2 /*return*/];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.taskServer.run(this.prepareTaskConfiguration(task), this.getContext())];
                    case 2:
                        taskInfo = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        this.logger.error("Error launching task '" + taskName + "': " + error_1);
                        this.messageService.error("Error launching task '" + taskName + "': " + error_1);
                        return [2 /*return*/];
                    case 4:
                        this.logger.debug("Task created. task id: " + taskInfo.taskId + ", OS ProcessId: " + taskInfo.osProcessId + " ");
                        // open terminal widget if the task is based on a terminal process:
                        if (taskInfo.terminalId !== undefined) {
                            this.attach(taskInfo.terminalId, taskInfo.taskId);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Perform some adjustments to the task launch configuration, before sending
     * it to the backend to be executed. We can make sure that parameters that
     * are optional to the user but required by the server will be defined, with
     * sane default values.
     */
    TaskService.prototype.prepareTaskConfiguration = function (task) {
        if (task.cwd) {
            if (this.workspaceRootUri) {
                task.cwd = task.cwd.replace(/\$workspace/gi, this.workspaceRootUri);
            }
        }
        else if (this.workspaceRootUri) {
            // if "cwd' is not set in task launch config. Let's use the workspace root
            // as default
            task.cwd = this.workspaceRootUri;
        }
        if (!task.processType) {
            task.processType = 'terminal';
        }
        return task;
    };
    TaskService.prototype.attach = function (terminalId, taskId) {
        return __awaiter(this, void 0, void 0, function () {
            var widget;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.widgetManager.getOrCreateWidget(terminal_widget_1.TERMINAL_WIDGET_FACTORY_ID, {
                            created: new Date().toString(),
                            id: 'task-' + taskId,
                            caption: "Task #" + taskId,
                            label: "Task #" + taskId,
                            destroyTermOnClose: true
                        })];
                    case 1:
                        widget = _a.sent();
                        widget.start(terminalId);
                        return [2 /*return*/];
                }
            });
        });
    };
    TaskService.prototype.isEventForThisClient = function (context) {
        if (context === this.getContext()) {
            return true;
        }
        return false;
    };
    TaskService.prototype.taskConfigurationChanged = function (event) {
        // do nothing for now
    };
    TaskService.prototype.getContext = function () {
        return this.workspaceRootUri;
    };
    TaskService = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(browser_1.FrontendApplication)),
        __param(1, inversify_1.inject(task_protocol_1.TaskServer)),
        __param(2, inversify_1.inject(common_1.ILogger)),
        __param(3, inversify_1.inject(widget_manager_1.WidgetManager)),
        __param(4, inversify_1.inject(task_watcher_1.TaskWatcher)),
        __param(5, inversify_1.inject(message_service_1.MessageService)),
        __param(6, inversify_1.inject(workspace_service_1.WorkspaceService)),
        __param(7, inversify_1.inject(task_configurations_1.TaskConfigurations)),
        __metadata("design:paramtypes", [browser_1.FrontendApplication, Object, Object, widget_manager_1.WidgetManager,
            task_watcher_1.TaskWatcher,
            message_service_1.MessageService,
            workspace_service_1.WorkspaceService,
            task_configurations_1.TaskConfigurations])
    ], TaskService);
    return TaskService;
}());
exports.TaskService = TaskService;
//# sourceMappingURL=task-service.js.map