import { ILogger } from '@theia/core/lib/common';
import { FrontendApplication } from '@theia/core/lib/browser';
import { TaskServer, TaskOptions, TaskInfo } from '../common/task-protocol';
import { WidgetManager } from '@theia/core/lib/browser/widget-manager';
import { TaskWatcher } from '../common/task-watcher';
import { MessageService } from '@theia/core/lib/common/message-service';
import { WorkspaceService } from '@theia/workspace/lib/browser/workspace-service';
import { TaskConfigurations, TaskConfigurationClient } from './task-configurations';
export declare class TaskService implements TaskConfigurationClient {
    protected readonly app: FrontendApplication;
    protected readonly taskServer: TaskServer;
    protected readonly logger: ILogger;
    protected readonly widgetManager: WidgetManager;
    protected readonly taskWatcher: TaskWatcher;
    protected readonly messageService: MessageService;
    protected readonly workspaceService: WorkspaceService;
    protected readonly taskConfigurations: TaskConfigurations;
    protected workspaceRootUri: string | undefined;
    /**
     * Reflects whether a valid task configuration file was found
     * in the current workspace, and is being watched for changes.
     */
    protected configurationFileFound: boolean;
    constructor(app: FrontendApplication, taskServer: TaskServer, logger: ILogger, widgetManager: WidgetManager, taskWatcher: TaskWatcher, messageService: MessageService, workspaceService: WorkspaceService, taskConfigurations: TaskConfigurations);
    /** returns an array of known task configuration labels */
    getTasks(): string[];
    /** Returns an array of running tasks 'TaskInfo' objects */
    getRunningTasks(): Promise<TaskInfo[]>;
    /** runs a task, by task configuration label */
    run(taskName: string): Promise<void>;
    /**
     * Perform some adjustments to the task launch configuration, before sending
     * it to the backend to be executed. We can make sure that parameters that
     * are optional to the user but required by the server will be defined, with
     * sane default values.
     */
    protected prepareTaskConfiguration(task: TaskOptions): TaskOptions;
    attach(terminalId: number, taskId: number): Promise<void>;
    protected isEventForThisClient(context: string | undefined): boolean;
    taskConfigurationChanged(event: string[]): void;
    protected getContext(): string | undefined;
}
