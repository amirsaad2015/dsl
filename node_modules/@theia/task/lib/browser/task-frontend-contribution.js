"use strict";
/*
 * Copyright (C) 2017 Ericsson and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var common_1 = require("@theia/core/lib/common");
var quick_open_task_1 = require("./quick-open-task");
var common_2 = require("@theia/core/lib/common");
var browser_1 = require("@theia/core/lib/browser");
var widget_manager_1 = require("@theia/core/lib/browser/widget-manager");
var TaskCommands;
(function (TaskCommands) {
    // Task menu
    TaskCommands.TASK_MENU = __spread(common_2.MAIN_MENU_BAR, ['3_task']);
    TaskCommands.TASK_MENU_RUN = __spread(TaskCommands.TASK_MENU, ['1_run']);
    TaskCommands.TASK_MENU_LABEL = 'Task';
    // run task group
    TaskCommands.TASK = __spread(common_2.MAIN_MENU_BAR, ['3_task']);
    TaskCommands.RUN_GROUP = __spread(TaskCommands.TASK, ['1_run']);
    // run task command
    TaskCommands.TASK_RUN = {
        id: 'task:run',
        label: 'Run Task...'
    };
    TaskCommands.TASK_ATTACH = {
        id: 'task:attach',
        label: 'Attach to Task ...'
    };
})(TaskCommands = exports.TaskCommands || (exports.TaskCommands = {}));
var TaskFrontendContribution = /** @class */ (function () {
    function TaskFrontendContribution(quickOpenTask, app, logger, widgetManager) {
        this.quickOpenTask = quickOpenTask;
        this.app = app;
        this.logger = logger;
        this.widgetManager = widgetManager;
    }
    TaskFrontendContribution.prototype.registerCommands = function (registry) {
        var _this = this;
        registry.registerCommand(TaskCommands.TASK_RUN, {
            isEnabled: function () { return true; },
            execute: function () { return _this.quickOpenTask.open(); }
        });
        registry.registerCommand(TaskCommands.TASK_ATTACH, {
            isEnabled: function () { return true; },
            execute: function () { return _this.quickOpenTask.attach(); }
        });
    };
    TaskFrontendContribution.prototype.registerMenus = function (menus) {
        // Explicitly register the Task Submenu
        menus.registerSubmenu(TaskCommands.TASK_MENU, TaskCommands.TASK_MENU_LABEL);
        menus.registerMenuAction(TaskCommands.RUN_GROUP, {
            commandId: TaskCommands.TASK_RUN.id,
            order: '0'
        });
        menus.registerMenuAction(TaskCommands.RUN_GROUP, {
            commandId: TaskCommands.TASK_ATTACH.id,
            order: '1'
        });
    };
    TaskFrontendContribution = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(quick_open_task_1.QuickOpenTask)),
        __param(1, inversify_1.inject(browser_1.FrontendApplication)),
        __param(2, inversify_1.inject(common_1.ILogger)),
        __param(3, inversify_1.inject(widget_manager_1.WidgetManager)),
        __metadata("design:paramtypes", [quick_open_task_1.QuickOpenTask,
            browser_1.FrontendApplication, Object, widget_manager_1.WidgetManager])
    ], TaskFrontendContribution);
    return TaskFrontendContribution;
}());
exports.TaskFrontendContribution = TaskFrontendContribution;
//# sourceMappingURL=task-frontend-contribution.js.map