"use strict";
/*
 * Copyright (C) 2017 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var cluster = require("cluster");
var inversify_1 = require("inversify");
var common_1 = require("@theia/core/lib/common");
var node_filesystem_1 = require("./node-filesystem");
var common_2 = require("../common");
var filesystem_watcher_protocol_1 = require("../common/filesystem-watcher-protocol");
var filesystem_watcher_client_1 = require("./filesystem-watcher-client");
var nsfw_filesystem_watcher_1 = require("./nsfw-watcher/nsfw-filesystem-watcher");
function bindFileSystem(bind) {
    bind(node_filesystem_1.FileSystemNode).toSelf().inSingletonScope();
    bind(common_2.FileSystem).toDynamicValue(function (ctx) { return ctx.container.get(node_filesystem_1.FileSystemNode); }).inSingletonScope();
}
exports.bindFileSystem = bindFileSystem;
function bindFileSystemWatcherServer(bind) {
    if (cluster.isMaster) {
        bind(filesystem_watcher_protocol_1.FileSystemWatcherServer).toDynamicValue(function (ctx) {
            var logger = ctx.container.get(common_1.ILogger);
            return new nsfw_filesystem_watcher_1.NsfwFileSystemWatcherServer({
                info: function (message) {
                    var args = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        args[_i - 1] = arguments[_i];
                    }
                    return logger.info.apply(logger, __spread([message], args));
                },
                error: function (message) {
                    var args = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        args[_i - 1] = arguments[_i];
                    }
                    return logger.error.apply(logger, __spread([message], args));
                }
            });
        });
    }
    else {
        bind(filesystem_watcher_client_1.FileSystemWatcherServerClient).toSelf();
        bind(filesystem_watcher_protocol_1.FileSystemWatcherServer).toDynamicValue(function (ctx) {
            return ctx.container.get(filesystem_watcher_client_1.FileSystemWatcherServerClient);
        });
    }
}
exports.bindFileSystemWatcherServer = bindFileSystemWatcherServer;
exports.default = new inversify_1.ContainerModule(function (bind) {
    bindFileSystem(bind);
    bind(common_1.ConnectionHandler).toDynamicValue(function (ctx) {
        return new common_1.JsonRpcConnectionHandler(common_2.fileSystemPath, function (client) {
            var server = ctx.container.get(common_2.FileSystem);
            server.setClient(client);
            client.onDidCloseConnection(function () { return server.dispose(); });
            return server;
        });
    }).inSingletonScope();
    bindFileSystemWatcherServer(bind);
    bind(common_1.ConnectionHandler).toDynamicValue(function (ctx) {
        return new common_1.JsonRpcConnectionHandler(filesystem_watcher_protocol_1.fileSystemWatcherPath, function (client) {
            var server = ctx.container.get(filesystem_watcher_protocol_1.FileSystemWatcherServer);
            server.setClient(client);
            client.onDidCloseConnection(function () { return server.dispose(); });
            return server;
        });
    }).inSingletonScope();
});
//# sourceMappingURL=filesystem-backend-module.js.map