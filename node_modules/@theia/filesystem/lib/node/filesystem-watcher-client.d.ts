import { JsonRpcProxyFactory, ILogger, DisposableCollection, Disposable } from "@theia/core";
import { IPCConnectionProvider } from "@theia/core/lib/node/messaging";
import { FileSystemWatcherServer, WatchOptions, FileSystemWatcherClient, ReconnectingFileSystemWatcherServer } from "../common/filesystem-watcher-protocol";
export declare const NSFW_WATCHER = "nsfw-watcher";
export declare class FileSystemWatcherServerClient implements FileSystemWatcherServer {
    protected readonly logger: ILogger;
    protected readonly ipcConnectionProvider: IPCConnectionProvider;
    protected readonly proxyFactory: JsonRpcProxyFactory<FileSystemWatcherServer>;
    protected readonly remote: ReconnectingFileSystemWatcherServer;
    protected readonly toDispose: DisposableCollection;
    constructor(logger: ILogger, ipcConnectionProvider: IPCConnectionProvider);
    dispose(): void;
    watchFileChanges(uri: string, options?: WatchOptions): Promise<number>;
    unwatchFileChanges(watcher: number): Promise<void>;
    protected client: FileSystemWatcherClient | undefined;
    setClient(client: FileSystemWatcherClient | undefined): void;
    protected listen(): Disposable;
}
