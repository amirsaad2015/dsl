/// <reference types="minimatch" />
import { IMinimatch } from "minimatch";
import { Disposable, DisposableCollection } from '@theia/core/lib/common/disposable';
import { FileChange, FileChangeType, FileSystemWatcherClient, FileSystemWatcherServer, WatchOptions } from '../../common/filesystem-watcher-protocol';
export interface WatcherOptions {
    ignored: IMinimatch[];
}
export declare class NsfwFileSystemWatcherServer implements FileSystemWatcherServer {
    protected client: FileSystemWatcherClient | undefined;
    protected watcherSequence: number;
    protected readonly watchers: Map<number, Disposable>;
    protected readonly watcherOptions: Map<number, WatcherOptions>;
    protected readonly toDispose: DisposableCollection;
    protected changes: FileChange[];
    protected readonly fireDidFilesChangedTimeout: number;
    protected readonly toDisposeOnFileChange: DisposableCollection;
    protected readonly options: {
        verbose: boolean;
        info: (message: string, ...args: any[]) => void;
        error: (message: string, ...args: any[]) => void;
    };
    constructor(options?: {
        verbose?: boolean;
        info?: (message: string, ...args: any[]) => void;
        error?: (message: string, ...args: any[]) => void;
    });
    dispose(): void;
    watchFileChanges(uri: string, options?: WatchOptions): Promise<number>;
    protected start(watcherId: number, basePath: string, rawOptions?: WatchOptions): Promise<void>;
    unwatchFileChanges(watcherId: number): Promise<void>;
    setClient(client: FileSystemWatcherClient): void;
    protected pushAdded(watcherId: number, path: string): void;
    protected pushUpdated(watcherId: number, path: string): void;
    protected pushDeleted(watcherId: number, path: string): void;
    protected pushFileChange(watcherId: number, path: string, type: FileChangeType): void;
    protected fireDidFilesChanged(): void;
    protected isIgnored(watcherId: number, path: string): boolean;
    protected debug(message: string, ...params: any[]): void;
}
