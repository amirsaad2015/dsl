import { Resource, ResourceResolver, Emitter, Event, DisposableCollection } from "@theia/core";
import URI from "@theia/core/lib/common/uri";
import { FileSystem, FileStat } from "../common/filesystem";
import { FileSystemWatcher } from "./filesystem-watcher";
export declare class FileResource implements Resource {
    readonly uri: URI;
    protected readonly fileSystem: FileSystem;
    protected readonly fileSystemWatcher: FileSystemWatcher;
    protected readonly toDispose: DisposableCollection;
    protected readonly onDidChangeContentsEmitter: Emitter<void>;
    readonly onDidChangeContents: Event<void>;
    protected state: FileResource.State;
    protected uriString: string;
    constructor(uri: URI, fileSystem: FileSystem, fileSystemWatcher: FileSystemWatcher);
    dispose(): void;
    readContents(options?: {
        encoding?: string;
    }): Promise<string>;
    protected doReadContents(options?: {
        encoding?: string;
    }): Promise<FileResource.State>;
    saveContents(content: string, options?: {
        encoding?: string;
    }): Promise<void>;
    protected doSaveContents(content: string, options?: {
        encoding?: string;
    }): Promise<FileStat>;
}
export declare namespace FileResource {
    interface State {
        stat?: FileStat;
        content: string;
    }
    const emptyState: State;
}
export declare class FileResourceResolver implements ResourceResolver {
    protected readonly fileSystem: FileSystem;
    protected readonly fileSystemWatcher: FileSystemWatcher;
    constructor(fileSystem: FileSystem, fileSystemWatcher: FileSystemWatcher);
    resolve(uri: URI): Promise<FileResource>;
    protected getFileStat(uri: URI): Promise<FileStat | undefined>;
}
