import URI from '@theia/core/lib/common/uri';
import { ICompositeTreeNode, TreeModel, TreeServices, ITreeNode } from "@theia/core/lib/browser";
import { FileSystem } from "../../common";
import { FileSystemWatcher, FileChange } from '../filesystem-watcher';
import { FileStatNode, DirNode, FileTree } from "./file-tree";
import { LocationService } from '../location';
import { LabelProvider } from "@theia/core/lib/browser/label-provider";
export declare class FileTreeServices extends TreeServices {
    readonly fileSystem: FileSystem;
    readonly watcher: FileSystemWatcher;
}
export declare class FileTreeModel extends TreeModel implements LocationService {
    protected readonly tree: FileTree;
    protected readonly fileSystem: FileSystem;
    protected readonly watcher: FileSystemWatcher;
    protected readonly labelProvider: LabelProvider;
    constructor(tree: FileTree, services: FileTreeServices);
    location: URI | undefined;
    readonly selectedFileStatNode: Readonly<FileStatNode> | undefined;
    protected onFilesChanged(changes: FileChange[]): void;
    protected isRootAffected(changes: FileChange[]): boolean;
    protected getAffectedNodes(changes: FileChange[]): ICompositeTreeNode[];
    protected collectAffectedNodes(change: FileChange, accept: (node: ICompositeTreeNode) => void): void;
    protected isFileContentChanged(change: FileChange): boolean;
    copy(uri: URI): boolean;
    /**
     * Move the given source file or directory to the given target directory.
     */
    move(source: ITreeNode, target: ITreeNode): Promise<void>;
    protected shouldReplace(fileName: string): Promise<boolean>;
    upload(node: DirNode, items: DataTransferItemList): void;
    protected uploadEntry(base: URI, entry: WebKitEntry | null): void;
    protected uploadDirectoryEntry(base: URI, entry: WebKitDirectoryEntry): Promise<void>;
    /**
     *  Read all entries within a folder by block of 100 files or folders until the
     *  whole folder has been read.
     */
    protected readEntries(entry: WebKitDirectoryEntry, cb: (items: any) => void): void;
    protected uploadEntries(base: URI, entries: WebKitEntry[]): void;
    protected uploadFileEntry(base: URI, entry: WebKitFileEntry): void;
    protected uploadFile(base: URI, file: File): void;
    protected uploadFileContent(base: URI, fileContent: Iterable<number>): Promise<void>;
}
