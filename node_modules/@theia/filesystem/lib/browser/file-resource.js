"use strict";
/*
 * Copyright (C) 2017 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var core_1 = require("@theia/core");
var filesystem_1 = require("../common/filesystem");
var filesystem_watcher_1 = require("./filesystem-watcher");
var FileResource = /** @class */ (function () {
    function FileResource(uri, fileSystem, fileSystemWatcher) {
        var _this = this;
        this.uri = uri;
        this.fileSystem = fileSystem;
        this.fileSystemWatcher = fileSystemWatcher;
        this.toDispose = new core_1.DisposableCollection();
        this.onDidChangeContentsEmitter = new core_1.Emitter();
        this.onDidChangeContents = this.onDidChangeContentsEmitter.event;
        this.state = FileResource.emptyState;
        this.uriString = this.uri.toString();
        this.toDispose.push(this.onDidChangeContentsEmitter);
        this.toDispose.push(this.fileSystemWatcher.onFilesChanged(function (changes) {
            if (changes.some(function (e) { return e.uri.toString() === uri.toString(); })) {
                _this.onDidChangeContentsEmitter.fire(undefined);
            }
        }));
    }
    FileResource.prototype.dispose = function () {
        this.toDispose.dispose();
    };
    FileResource.prototype.readContents = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.doReadContents(options)];
                    case 1:
                        _a.state = _b.sent();
                        return [2 /*return*/, this.state.content];
                }
            });
        });
    };
    FileResource.prototype.doReadContents = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.fileSystem.exists(this.uriString)];
                    case 1:
                        if (!(_b.sent())) {
                            return [2 /*return*/, FileResource.emptyState];
                        }
                        return [2 /*return*/, this.fileSystem.resolveContent(this.uriString, options)];
                    case 2:
                        _a = _b.sent();
                        return [2 /*return*/, FileResource.emptyState];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    FileResource.prototype.saveContents = function (content, options) {
        return __awaiter(this, void 0, void 0, function () {
            var stat;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.doSaveContents(content, options)];
                    case 1:
                        stat = _a.sent();
                        this.state = { stat: stat, content: content };
                        return [2 /*return*/];
                }
            });
        });
    };
    FileResource.prototype.doSaveContents = function (content, options) {
        return __awaiter(this, void 0, void 0, function () {
            var stat, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.fileSystem.exists(this.uriString)];
                    case 1:
                        if (!(_b.sent())) {
                            return [2 /*return*/, this.fileSystem.createFile(this.uriString, { content: content })];
                        }
                        _a = this.state.stat;
                        if (_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.fileSystem.getFileStat(this.uriString)];
                    case 2:
                        _a = (_b.sent());
                        _b.label = 3;
                    case 3:
                        stat = _a;
                        return [2 /*return*/, this.fileSystem.setContent(stat, content, options)];
                }
            });
        });
    };
    return FileResource;
}());
exports.FileResource = FileResource;
(function (FileResource) {
    FileResource.emptyState = { content: '' };
})(FileResource = exports.FileResource || (exports.FileResource = {}));
exports.FileResource = FileResource;
var FileResourceResolver = /** @class */ (function () {
    function FileResourceResolver(fileSystem, fileSystemWatcher) {
        this.fileSystem = fileSystem;
        this.fileSystemWatcher = fileSystemWatcher;
    }
    FileResourceResolver.prototype.resolve = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var fileStat;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (uri.scheme !== 'file') {
                            throw new Error('The given uri is not file uri: ' + uri);
                        }
                        return [4 /*yield*/, this.getFileStat(uri)];
                    case 1:
                        fileStat = _a.sent();
                        if (fileStat && fileStat.isDirectory) {
                            throw new Error('The given uri is a directory: ' + uri);
                        }
                        return [2 /*return*/, new FileResource(uri, this.fileSystem, this.fileSystemWatcher)];
                }
            });
        });
    };
    FileResourceResolver.prototype.getFileStat = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 4, , 5]);
                        return [4 /*yield*/, this.fileSystem.exists(uri.toString())];
                    case 1:
                        if (!_b.sent()) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.fileSystem.getFileStat(uri.toString())];
                    case 2: return [2 /*return*/, _b.sent()];
                    case 3: return [2 /*return*/, undefined];
                    case 4:
                        _a = _b.sent();
                        return [2 /*return*/, undefined];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    FileResourceResolver = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(filesystem_1.FileSystem)),
        __param(1, inversify_1.inject(filesystem_watcher_1.FileSystemWatcher)),
        __metadata("design:paramtypes", [Object, filesystem_watcher_1.FileSystemWatcher])
    ], FileResourceResolver);
    return FileResourceResolver;
}());
exports.FileResourceResolver = FileResourceResolver;
//# sourceMappingURL=file-resource.js.map