import { h } from '@phosphor/virtualdom';
import { Message } from '@phosphor/messaging';
import URI from '@theia/core/lib/common/uri';
import { MessageService, ResourceProvider, CommandService, DisposableCollection, MenuPath } from '@theia/core';
import { ContextMenuRenderer, VirtualWidget, LabelProvider } from '@theia/core/lib/browser';
import { EditorManager, EditorWidget, EditorOpenerOptions } from '@theia/editor/lib/browser';
import { WorkspaceService } from '@theia/workspace/lib/browser';
import { Git, GitFileChange, GitFileStatus, Repository, WorkingDirectoryStatus } from '../common';
import { GitWatcher } from '../common/git-watcher';
import { GitRepositoryProvider } from './git-repository-provider';
export declare const GIT_WIDGET_CONTEXT_MENU: MenuPath;
export interface GitFileChangeNode extends GitFileChange {
    readonly icon: string;
    readonly label: string;
    readonly description: string;
    readonly caption?: string;
    readonly extraIconClassName?: string;
    readonly commitSha?: string;
    selected?: boolean;
}
export declare namespace GitFileChangeNode {
    function is(node: Object | undefined): node is GitFileChangeNode;
}
export declare class GitWidget extends VirtualWidget {
    protected readonly git: Git;
    protected readonly gitWatcher: GitWatcher;
    protected readonly contextMenuRenderer: ContextMenuRenderer;
    protected readonly resourceProvider: ResourceProvider;
    protected readonly messageService: MessageService;
    protected readonly commandService: CommandService;
    protected readonly repositoryProvider: GitRepositoryProvider;
    protected readonly labelProvider: LabelProvider;
    protected readonly workspaceService: WorkspaceService;
    protected stagedChanges: GitFileChangeNode[];
    protected unstagedChanges: GitFileChangeNode[];
    protected mergeChanges: GitFileChangeNode[];
    protected message: string;
    protected messageInputHighlighted: boolean;
    protected additionalMessage: string;
    protected status: WorkingDirectoryStatus | undefined;
    protected toDispose: DisposableCollection;
    protected scrollContainer: string;
    protected readonly editorManager: EditorManager;
    constructor(git: Git, gitWatcher: GitWatcher, contextMenuRenderer: ContextMenuRenderer, resourceProvider: ResourceProvider, messageService: MessageService, commandService: CommandService, repositoryProvider: GitRepositoryProvider, labelProvider: LabelProvider, workspaceService: WorkspaceService);
    protected init(): void;
    protected onActivateRequest(msg: Message): void;
    initialize(repository: Repository | undefined): Promise<void>;
    protected updateView(status: WorkingDirectoryStatus | undefined): Promise<void>;
    protected render(): h.Child;
    protected renderCommandBar(repository: Repository | undefined): h.Child;
    protected renderMessageInput(): h.Child;
    protected renderMessageTextarea(): h.Child;
    protected renderGitItemButtons(repository: Repository, change: GitFileChange): h.Child;
    protected renderGitItem(repository: Repository | undefined, change: GitFileChangeNode): h.Child;
    protected renderChangesHeader(title: string): h.Child;
    protected renderMergeChanges(repository: Repository | undefined): h.Child | undefined;
    protected renderStagedChanges(repository: Repository | undefined): h.Child | undefined;
    protected renderUnstagedChanges(repository: Repository | undefined): h.Child | undefined;
    protected logError(error: any): void;
    protected getStatusCaption(status: GitFileStatus, staged?: boolean): string;
    protected getAbbreviatedStatusCaption(status: GitFileStatus, staged?: boolean): string;
    findChange(uri: URI): GitFileChange | undefined;
    openChange(change: GitFileChange, options?: EditorOpenerOptions): Promise<EditorWidget | undefined>;
    protected createChangeUri(change: GitFileChange): URI;
}
