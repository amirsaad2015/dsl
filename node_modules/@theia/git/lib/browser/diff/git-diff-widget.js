"use strict";
/*
 * Copyright (C) 2018 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var virtualdom_1 = require("@phosphor/virtualdom");
var diff_uris_1 = require("@theia/editor/lib/browser/diff-uris");
var browser_1 = require("@theia/core/lib/browser");
var git_resource_1 = require("../git-resource");
var uri_1 = require("@theia/core/lib/common/uri");
var common_1 = require("../../common");
var git_navigable_list_widget_1 = require("../git-navigable-list-widget");
var diff_navigator_1 = require("@theia/editor/lib/browser/diff-navigator");
var browser_2 = require("@theia/editor/lib/browser");
var git_watcher_1 = require("../../common/git-watcher");
var inversify_1 = require("inversify");
var git_widget_1 = require("../git-widget");
exports.GIT_DIFF = "git-diff";
var GitDiffWidget = /** @class */ (function (_super) {
    __extends(GitDiffWidget, _super);
    function GitDiffWidget() {
        var _this = _super.call(this) || this;
        _this.id = exports.GIT_DIFF;
        _this.scrollContainer = "git-diff-list-container";
        _this.title.label = "Diff";
        _this.addClass('theia-git');
        return _this;
    }
    GitDiffWidget.prototype.init = function () {
        var _this = this;
        this.toDispose.push(this.gitWatcher.onGitEvent(function (gitEvent) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.options) {
                    this.setContent(this.options);
                }
                return [2 /*return*/];
            });
        }); }));
    };
    Object.defineProperty(GitDiffWidget.prototype, "toRevision", {
        get: function () {
            return this.options.range && this.options.range.toRevision;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GitDiffWidget.prototype, "fromRevision", {
        get: function () {
            return this.options.range && this.options.range.fromRevision;
        },
        enumerable: true,
        configurable: true
    });
    GitDiffWidget.prototype.setContent = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var repository, fileChanges, fileChangeNodes, fileChanges_1, fileChanges_1_1, fileChange, fileChangeUri, _a, icon, label, description, caption, e_1_1, e_1, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this.options = options;
                        repository = this.repositoryProvider.selectedRepository;
                        if (!repository) return [3 /*break*/, 10];
                        return [4 /*yield*/, this.git.diff(repository, {
                                range: options.range,
                                uri: options.uri
                            })];
                    case 1:
                        fileChanges = _c.sent();
                        fileChangeNodes = [];
                        _c.label = 2;
                    case 2:
                        _c.trys.push([2, 7, 8, 9]);
                        fileChanges_1 = __values(fileChanges), fileChanges_1_1 = fileChanges_1.next();
                        _c.label = 3;
                    case 3:
                        if (!!fileChanges_1_1.done) return [3 /*break*/, 6];
                        fileChange = fileChanges_1_1.value;
                        fileChangeUri = new uri_1.default(fileChange.uri);
                        return [4 /*yield*/, Promise.all([
                                this.labelProvider.getIcon(fileChangeUri),
                                this.labelProvider.getName(fileChangeUri),
                                this.relativePath(fileChangeUri.parent)
                            ])];
                    case 4:
                        _a = __read.apply(void 0, [_c.sent(), 3]), icon = _a[0], label = _a[1], description = _a[2];
                        caption = this.computeCaption(fileChange);
                        fileChangeNodes.push(__assign({}, fileChange, { icon: icon, label: label, description: description, caption: caption }));
                        _c.label = 5;
                    case 5:
                        fileChanges_1_1 = fileChanges_1.next();
                        return [3 /*break*/, 3];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_1_1 = _c.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (fileChanges_1_1 && !fileChanges_1_1.done && (_b = fileChanges_1.return)) _b.call(fileChanges_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 9:
                        this.fileChangeNodes = fileChangeNodes;
                        this.update();
                        _c.label = 10;
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    GitDiffWidget.prototype.storeState = function () {
        var _a = this, fileChangeNodes = _a.fileChangeNodes, options = _a.options;
        return {
            fileChangeNodes: fileChangeNodes,
            options: options
        };
    };
    // tslint:disable-next-line:no-any
    GitDiffWidget.prototype.restoreState = function (oldState) {
        this.fileChangeNodes = oldState['fileChangeNodes'];
        this.options = oldState['options'];
        this.update();
    };
    GitDiffWidget.prototype.render = function () {
        this.gitNodes = this.fileChangeNodes;
        var commitishBar = this.renderDiffListHeader();
        var fileChangeList = this.renderFileChangeList();
        return virtualdom_1.h.div({ className: "git-diff-container" }, browser_1.VirtualRenderer.flatten([commitishBar, fileChangeList]));
    };
    GitDiffWidget.prototype.renderDiffListHeader = function () {
        var _this = this;
        var elements = [];
        if (this.options.uri) {
            var path = this.relativePath(this.options.uri);
            if (path.length > 0) {
                elements.push(virtualdom_1.h.div({ className: 'header-row' }, virtualdom_1.h.div({ className: 'theia-header' }, 'path:'), virtualdom_1.h.div({ className: 'header-value' }, '/' + path)));
            }
        }
        if (this.fromRevision) {
            var revision = void 0;
            if (typeof this.fromRevision === 'string') {
                revision = virtualdom_1.h.div({ className: 'header-value' }, this.fromRevision);
            }
            else {
                revision = virtualdom_1.h.div({ className: 'header-value' }, (this.toRevision || 'HEAD') + '~' + this.fromRevision);
            }
            elements.push(virtualdom_1.h.div({ className: 'header-row' }, virtualdom_1.h.div({ className: 'theia-header' }, 'revision: '), revision));
        }
        var header = virtualdom_1.h.div({ className: 'theia-header' }, 'Files changed');
        var leftButton = virtualdom_1.h.span({
            className: "fa fa-arrow-left",
            title: "Previous Change",
            onclick: function () { return _this.navigateLeft(); }
        });
        var rightButton = virtualdom_1.h.span({
            className: "fa fa-arrow-right",
            title: "Next Change",
            onclick: function () { return _this.navigateRight(); }
        });
        var lrBtns = virtualdom_1.h.div({ className: 'lrBtns' }, leftButton, rightButton);
        var headerRow = virtualdom_1.h.div({ className: 'header-row space-between' }, header, lrBtns);
        return virtualdom_1.h.div.apply(virtualdom_1.h, __spread([{ className: "diff-header" }], elements, [headerRow]));
    };
    GitDiffWidget.prototype.renderFileChangeList = function () {
        var files = [];
        try {
            for (var _a = __values(this.fileChangeNodes), _b = _a.next(); !_b.done; _b = _a.next()) {
                var fileChange = _b.value;
                var fileChangeElement = this.renderGitItem(fileChange);
                files.push(fileChangeElement);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return virtualdom_1.h.div.apply(virtualdom_1.h, __spread([{ className: "listContainer", id: this.scrollContainer }], files));
        var e_2, _c;
    };
    GitDiffWidget.prototype.renderGitItem = function (change) {
        var _this = this;
        var iconSpan = virtualdom_1.h.span({ className: change.icon + ' file-icon' });
        var nameSpan = virtualdom_1.h.span({ className: 'name' }, change.label + ' ');
        var pathSpan = virtualdom_1.h.span({ className: 'path' }, change.description);
        var elements = [];
        elements.push(virtualdom_1.h.div({
            title: change.caption,
            className: 'noWrapInfo',
            onclick: function () {
                _this.selectNode(change);
            },
            ondblclick: function () {
                _this.openChange(change);
            }
        }, iconSpan, nameSpan, pathSpan));
        if (change.extraIconClassName) {
            elements.push(virtualdom_1.h.div({
                title: change.caption,
                className: change.extraIconClassName
            }));
        }
        elements.push(virtualdom_1.h.div({
            title: change.caption,
            className: 'status staged ' + common_1.GitFileStatus[change.status].toLowerCase()
        }, this.getStatusCaption(change.status, true).charAt(0)));
        return virtualdom_1.h.div.apply(virtualdom_1.h, __spread([{ className: "gitItem noselect" + (change.selected ? ' ' + browser_1.SELECTED_CLASS : '') }], elements));
    };
    GitDiffWidget.prototype.navigateRight = function () {
        var _this = this;
        var selected = this.getSelected();
        if (selected && git_widget_1.GitFileChangeNode.is(selected)) {
            var uri = this.getUriToOpen(selected);
            this.editorManager.getByUri(uri).then(function (widget) {
                if (widget) {
                    var diffNavigator = _this.diffNavigatorProvider(widget.editor);
                    if (diffNavigator.canNavigate() && diffNavigator.hasNext()) {
                        diffNavigator.next();
                    }
                    else {
                        _this.selectNextNode();
                        _this.openSelected();
                    }
                }
                else {
                    _this.openChange(selected);
                }
            });
        }
        else if (this.gitNodes.length > 0) {
            this.selectNode(this.gitNodes[0]);
            this.openSelected();
        }
    };
    GitDiffWidget.prototype.navigateLeft = function () {
        var _this = this;
        var selected = this.getSelected();
        if (git_widget_1.GitFileChangeNode.is(selected)) {
            var uri = this.getUriToOpen(selected);
            this.editorManager.getByUri(uri).then(function (widget) {
                if (widget) {
                    var diffNavigator = _this.diffNavigatorProvider(widget.editor);
                    if (diffNavigator.canNavigate() && diffNavigator.hasPrevious()) {
                        diffNavigator.previous();
                    }
                    else {
                        _this.selectPreviousNode();
                        _this.openSelected();
                    }
                }
                else {
                    _this.openChange(selected);
                }
            });
        }
    };
    GitDiffWidget.prototype.selectNextNode = function () {
        var idx = this.indexOfSelected;
        if (idx >= 0 && idx < this.gitNodes.length - 1) {
            this.selectNode(this.gitNodes[idx + 1]);
        }
        else if (this.gitNodes.length > 0 && (idx === -1 || idx === this.gitNodes.length - 1)) {
            this.selectNode(this.gitNodes[0]);
        }
    };
    GitDiffWidget.prototype.selectPreviousNode = function () {
        var idx = this.indexOfSelected;
        if (idx > 0) {
            this.selectNode(this.gitNodes[idx - 1]);
        }
        else if (idx === 0) {
            this.selectNode(this.gitNodes[this.gitNodes.length - 1]);
        }
    };
    GitDiffWidget.prototype.handleListEnter = function () {
        this.openSelected();
    };
    GitDiffWidget.prototype.openSelected = function () {
        var selected = this.getSelected();
        if (selected) {
            this.openChange(selected);
        }
    };
    GitDiffWidget.prototype.getUriToOpen = function (change) {
        var uri = new uri_1.default(change.uri);
        var fromURI = uri;
        if (change.oldUri) {
            fromURI = new uri_1.default(change.oldUri);
        }
        if (this.fromRevision !== undefined) {
            if (typeof this.fromRevision !== 'number') {
                fromURI = fromURI.withScheme(git_resource_1.GIT_RESOURCE_SCHEME).withQuery(this.fromRevision);
            }
            else {
                fromURI = fromURI.withScheme(git_resource_1.GIT_RESOURCE_SCHEME).withQuery(this.toRevision + "~" + this.fromRevision);
            }
        }
        else {
            // default is to compare with previous revision
            fromURI = fromURI.withScheme(git_resource_1.GIT_RESOURCE_SCHEME).withQuery(this.toRevision + "~1");
        }
        var toURI = uri;
        if (this.toRevision) {
            toURI = toURI.withScheme(git_resource_1.GIT_RESOURCE_SCHEME).withQuery(this.toRevision);
        }
        var uriToOpen = uri;
        if (change.status === common_1.GitFileStatus.Deleted) {
            uriToOpen = fromURI;
        }
        else if (change.status === common_1.GitFileStatus.New) {
            uriToOpen = toURI;
        }
        else {
            uriToOpen = diff_uris_1.DiffUris.encode(fromURI, toURI, uri.displayName);
        }
        return uriToOpen;
    };
    GitDiffWidget.prototype.openChanges = function (uri, options) {
        return __awaiter(this, void 0, void 0, function () {
            var stringUri, change;
            return __generator(this, function (_a) {
                stringUri = uri.toString();
                change = this.fileChangeNodes.find(function (n) { return n.uri.toString() === stringUri; });
                return [2 /*return*/, change && this.openChange(change, options)];
            });
        });
    };
    GitDiffWidget.prototype.openChange = function (change, options) {
        var uriToOpen = this.getUriToOpen(change);
        return this.editorManager.open(uriToOpen, options);
    };
    GitDiffWidget.prototype.doOpen = function (uriToOpen) {
        browser_1.open(this.openerService, uriToOpen, { mode: 'reveal' });
    };
    __decorate([
        inversify_1.inject(common_1.Git),
        __metadata("design:type", Object)
    ], GitDiffWidget.prototype, "git", void 0);
    __decorate([
        inversify_1.inject(diff_navigator_1.DiffNavigatorProvider),
        __metadata("design:type", Function)
    ], GitDiffWidget.prototype, "diffNavigatorProvider", void 0);
    __decorate([
        inversify_1.inject(browser_1.OpenerService),
        __metadata("design:type", Object)
    ], GitDiffWidget.prototype, "openerService", void 0);
    __decorate([
        inversify_1.inject(browser_2.EditorManager),
        __metadata("design:type", browser_2.EditorManager)
    ], GitDiffWidget.prototype, "editorManager", void 0);
    __decorate([
        inversify_1.inject(git_watcher_1.GitWatcher),
        __metadata("design:type", git_watcher_1.GitWatcher)
    ], GitDiffWidget.prototype, "gitWatcher", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], GitDiffWidget.prototype, "init", null);
    GitDiffWidget = __decorate([
        inversify_1.injectable(),
        __metadata("design:paramtypes", [])
    ], GitDiffWidget);
    return GitDiffWidget;
}(git_navigable_list_widget_1.GitNavigableListWidget));
exports.GitDiffWidget = GitDiffWidget;
//# sourceMappingURL=git-diff-widget.js.map