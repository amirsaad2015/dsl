import { ILogger } from '@theia/core/lib/common/logger';
import { Event, Emitter } from '@theia/core/lib/common/event';
import { ITree } from '@theia/core/lib/browser/tree/tree';
import { DisposableCollection } from '@theia/core/lib/common/disposable';
import { PreferenceChangeEvent } from '@theia/core/lib/browser/preferences/preference-proxy';
import { TreeDecorator, TreeDecoration } from '@theia/core/lib/browser/tree/tree-decorator';
import { Git } from '../common/git';
import { GitWatcher } from '../common/git-watcher';
import { WorkingDirectoryStatus } from '../common/git-model';
import { GitRepositoryProvider } from './git-repository-provider';
import { GitFileChange, GitFileStatus } from '../common/git-model';
import { GitPreferences, GitConfiguration } from './git-preferences';
export declare class GitDecorator implements TreeDecorator {
    protected readonly git: Git;
    protected readonly repositoryProvider: GitRepositoryProvider;
    protected readonly watcher: GitWatcher;
    protected readonly preferences: GitPreferences;
    protected readonly logger: ILogger;
    readonly id: string;
    protected readonly toDispose: DisposableCollection;
    protected readonly emitter: Emitter<(tree: ITree) => Map<string, TreeDecoration.Data>>;
    protected enabled: boolean;
    protected showColors: boolean;
    constructor(git: Git, repositoryProvider: GitRepositoryProvider, watcher: GitWatcher, preferences: GitPreferences, logger: ILogger);
    readonly onDidChangeDecorations: Event<(tree: ITree) => Map<string, TreeDecoration.Data>>;
    protected fireDidChangeDecorations(event: (tree: ITree) => Map<string, TreeDecoration.Data>): void;
    protected collectDecorators(tree: ITree, status: WorkingDirectoryStatus): Map<string, TreeDecoration.Data>;
    protected appendContainerChanges(tree: ITree, changes: GitFileChange[]): Map<string, GitFileChange>;
    protected toDecorator(change: GitFileChange): TreeDecoration.Data;
    protected compare(left: GitFileChange, right: GitFileChange): number;
    protected getDecorationColor(status: GitFileStatus, staged?: boolean): string;
    protected handlePreferenceChange(event: PreferenceChangeEvent<GitConfiguration>): Promise<void>;
}
