import { EditorManager, EditorWidget } from '@theia/editor/lib/browser';
import { Workspace } from '@theia/languages/lib/common';
import URI from '@theia/core/lib/common/uri';
import { DirtyDiff } from './diff-computer';
import { Emitter, Event, Disposable, ReferenceCollection } from '@theia/core';
import { GitPreferences, GitConfiguration } from '../git-preferences';
import { PreferenceChangeEvent } from '@theia/core/lib/browser';
import { GitResourceResolver } from '../git-resource';
import { WorkingDirectoryStatus, GitFileChange, Repository } from '../../common';
import { GitRepositoryTracker } from '../git-repository-tracker';
export declare class DirtyDiffManager {
    protected readonly models: ReferenceCollection<string, DirtyDiffModel>;
    protected readonly onDirtyDiffUpdateEmitter: Emitter<DirtyDiffUpdate>;
    readonly onDirtyDiffUpdate: Event<DirtyDiffUpdate>;
    protected readonly repositoryTracker: GitRepositoryTracker;
    protected readonly gitResourceResolver: GitResourceResolver;
    protected readonly editorManager: EditorManager;
    protected readonly workspace: Workspace;
    protected readonly preferences: GitPreferences;
    protected initialize(): Promise<void>;
    protected handleEditorCreated(editorWidget: EditorWidget): Promise<void>;
    protected createNewModel(uri: string): DirtyDiffModel;
    protected readGitResourceContents(uri: URI): Promise<string>;
    protected handleDocumentChanged(uri: string): Promise<void>;
    protected handleGitStatusUpdate(repository: Repository, status: WorkingDirectoryStatus): Promise<void>;
    protected isEnabled(): boolean;
    protected handlePreferenceChange(event: PreferenceChangeEvent<GitConfiguration>): Promise<void>;
    protected allModels(): Promise<DirtyDiffModel[]>;
    protected getModel(uri: string): Promise<DirtyDiffModel | undefined>;
}
export interface DirtyDiffUpdate extends DirtyDiff {
    readonly uri: string;
}
export declare class DirtyDiffModel implements Disposable {
    readonly uri: string;
    protected readonly readGitResource: DirtyDiffModel.GitResourceReader;
    enabled: boolean;
    protected dirty: boolean;
    protected staged: boolean;
    protected previousContent: string[];
    protected currentContent: string[];
    protected readonly onDirtyDiffUpdateEmitter: Emitter<DirtyDiffUpdate>;
    readonly onDirtyDiffUpdate: Event<DirtyDiffUpdate>;
    protected readonly updateDelayer: DirtyDiffModel.Throttler;
    constructor(uri: string, readGitResource: DirtyDiffModel.GitResourceReader);
    update(): void;
    handleDocumentChanged(documentContent: string): void;
    handleGitStatusUpdate(repository: Repository, relevantChanges: GitFileChange[]): Promise<void>;
    protected isInGitRepository(repository: Repository): boolean;
    protected getPreviousRevision(): Promise<string[]>;
    dispose(): void;
}
export declare namespace DirtyDiffModel {
    function computeDirtyDiff(previous: string[], current: string[]): DirtyDiff;
    function splitLines(text: string): string[];
    interface GitResourceReader {
        (uri: URI): Promise<string>;
    }
    class Throttler {
        protected readonly delay: number;
        protected lastTask: () => void;
        protected timeout: number | undefined;
        constructor(delay: number);
        push(task: () => void): void;
    }
}
