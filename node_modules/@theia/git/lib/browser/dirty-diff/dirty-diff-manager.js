"use strict";
/*
 * Copyright (C) 2018 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var browser_1 = require("@theia/editor/lib/browser");
var common_1 = require("@theia/languages/lib/common");
var uri_1 = require("@theia/core/lib/common/uri");
var diff_computer_1 = require("./diff-computer");
var core_1 = require("@theia/core");
var git_preferences_1 = require("../git-preferences");
var git_resource_1 = require("../git-resource");
var common_2 = require("../../common");
var git_repository_tracker_1 = require("../git-repository-tracker");
var DirtyDiffManager = /** @class */ (function () {
    function DirtyDiffManager() {
        var _this = this;
        this.models = new core_1.ReferenceCollection(function (uri) { return _this.createNewModel(uri); });
        this.onDirtyDiffUpdateEmitter = new core_1.Emitter();
        this.onDirtyDiffUpdate = this.onDirtyDiffUpdateEmitter.event;
    }
    DirtyDiffManager.prototype.initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var gitStatus, repository;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.workspace.onDidChangeTextDocument(function (params) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.handleDocumentChanged(params.textDocument.uri)];
                                case 1: return [2 /*return*/, _a.sent()];
                            }
                        }); }); });
                        this.preferences.onPreferenceChanged(function (e) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.handlePreferenceChange(e)];
                                case 1: return [2 /*return*/, _a.sent()];
                            }
                        }); }); });
                        this.editorManager.onCreated(function (e) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.handleEditorCreated(e)];
                                case 1: return [2 /*return*/, _a.sent()];
                            }
                        }); }); });
                        this.repositoryTracker.onGitEvent(function (event) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.handleGitStatusUpdate(event.source, event.status)];
                                case 1: return [2 /*return*/, _a.sent()];
                            }
                        }); }); });
                        gitStatus = this.repositoryTracker.selectedRepositoryStatus;
                        repository = this.repositoryTracker.selectedRepository;
                        if (!(gitStatus && repository)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.handleGitStatusUpdate(repository, gitStatus)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    DirtyDiffManager.prototype.handleEditorCreated = function (editorWidget) {
        return __awaiter(this, void 0, void 0, function () {
            var editor, uri, reference, model, gitStatus, repository, changes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        editor = editorWidget.editor;
                        uri = editor.document.uri;
                        return [4 /*yield*/, this.models.acquire(uri)];
                    case 1:
                        reference = _a.sent();
                        editorWidget.disposed.connect(function () { return reference.dispose(); });
                        model = reference.object;
                        gitStatus = this.repositoryTracker.selectedRepositoryStatus;
                        repository = this.repositoryTracker.selectedRepository;
                        if (!(gitStatus && repository)) return [3 /*break*/, 3];
                        changes = gitStatus.changes.filter(function (c) { return c.uri === uri; });
                        return [4 /*yield*/, model.handleGitStatusUpdate(repository, changes)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        model.handleDocumentChanged(editor.document.getText());
                        return [2 /*return*/];
                }
            });
        });
    };
    DirtyDiffManager.prototype.createNewModel = function (uri) {
        var _this = this;
        var model = new DirtyDiffModel(uri, function (gitUri) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, this.readGitResourceContents(gitUri)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        }); }); });
        model.onDirtyDiffUpdate(function (e) { return _this.onDirtyDiffUpdateEmitter.fire(e); });
        model.enabled = this.isEnabled();
        return model;
    };
    DirtyDiffManager.prototype.readGitResourceContents = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var gitResource;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.gitResourceResolver.getResource(uri)];
                    case 1:
                        gitResource = _a.sent();
                        return [2 /*return*/, gitResource.readContents()];
                }
            });
        });
    };
    DirtyDiffManager.prototype.handleDocumentChanged = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var model, document_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getModel(uri)];
                    case 1:
                        model = _a.sent();
                        if (model) {
                            document_1 = this.workspace.textDocuments.find(function (d) { return d.uri === uri; });
                            if (document_1) {
                                model.handleDocumentChanged(document_1.getText());
                            }
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    DirtyDiffManager.prototype.handleGitStatusUpdate = function (repository, status) {
        return __awaiter(this, void 0, void 0, function () {
            var uris, relevantChanges, models, _loop_1, models_1, models_1_1, model, e_1_1, e_1, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        uris = new Set(this.models.keys());
                        relevantChanges = status.changes.filter(function (c) { return uris.has(c.uri); });
                        return [4 /*yield*/, this.allModels()];
                    case 1:
                        models = _b.sent();
                        _loop_1 = function (model) {
                            var uri, changes;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        uri = model.uri;
                                        changes = relevantChanges.filter(function (c) { return c.uri === uri; });
                                        return [4 /*yield*/, model.handleGitStatusUpdate(repository, changes)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        };
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 7, 8, 9]);
                        models_1 = __values(models), models_1_1 = models_1.next();
                        _b.label = 3;
                    case 3:
                        if (!!models_1_1.done) return [3 /*break*/, 6];
                        model = models_1_1.value;
                        return [5 /*yield**/, _loop_1(model)];
                    case 4:
                        _b.sent();
                        _b.label = 5;
                    case 5:
                        models_1_1 = models_1.next();
                        return [3 /*break*/, 3];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_1_1 = _b.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (models_1_1 && !models_1_1.done && (_a = models_1.return)) _a.call(models_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    DirtyDiffManager.prototype.isEnabled = function () {
        return this.preferences["git.editor.decorations.enabled"];
    };
    DirtyDiffManager.prototype.handlePreferenceChange = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var preferenceName, newValue, enabled, models, models_2, models_2_1, model, e_2, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        preferenceName = event.preferenceName, newValue = event.newValue;
                        if (!(preferenceName === "git.editor.decorations.enabled")) return [3 /*break*/, 2];
                        enabled = !!newValue;
                        return [4 /*yield*/, this.allModels()];
                    case 1:
                        models = _b.sent();
                        try {
                            for (models_2 = __values(models), models_2_1 = models_2.next(); !models_2_1.done; models_2_1 = models_2.next()) {
                                model = models_2_1.value;
                                model.enabled = enabled;
                                model.update();
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (models_2_1 && !models_2_1.done && (_a = models_2.return)) _a.call(models_2);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        _b.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    DirtyDiffManager.prototype.allModels = function () {
        return __awaiter(this, void 0, void 0, function () {
            var models, uris, uris_1, uris_1_1, uri, reference, e_3_1, e_3, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        models = [];
                        uris = this.models.keys();
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, 7, 8]);
                        uris_1 = __values(uris), uris_1_1 = uris_1.next();
                        _b.label = 2;
                    case 2:
                        if (!!uris_1_1.done) return [3 /*break*/, 5];
                        uri = uris_1_1.value;
                        return [4 /*yield*/, this.models.acquire(uri)];
                    case 3:
                        reference = _b.sent();
                        models.push(reference.object);
                        reference.dispose();
                        _b.label = 4;
                    case 4:
                        uris_1_1 = uris_1.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_3_1 = _b.sent();
                        e_3 = { error: e_3_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (uris_1_1 && !uris_1_1.done && (_a = uris_1.return)) _a.call(uris_1);
                        }
                        finally { if (e_3) throw e_3.error; }
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/, models];
                }
            });
        });
    };
    DirtyDiffManager.prototype.getModel = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var reference, model;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.models.has(uri)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.models.acquire(uri)];
                    case 1:
                        reference = _a.sent();
                        model = reference.object;
                        reference.dispose();
                        return [2 /*return*/, model];
                    case 2: return [2 /*return*/, undefined];
                }
            });
        });
    };
    __decorate([
        inversify_1.inject(git_repository_tracker_1.GitRepositoryTracker),
        __metadata("design:type", git_repository_tracker_1.GitRepositoryTracker)
    ], DirtyDiffManager.prototype, "repositoryTracker", void 0);
    __decorate([
        inversify_1.inject(git_resource_1.GitResourceResolver),
        __metadata("design:type", git_resource_1.GitResourceResolver)
    ], DirtyDiffManager.prototype, "gitResourceResolver", void 0);
    __decorate([
        inversify_1.inject(browser_1.EditorManager),
        __metadata("design:type", browser_1.EditorManager)
    ], DirtyDiffManager.prototype, "editorManager", void 0);
    __decorate([
        inversify_1.inject(common_1.Workspace),
        __metadata("design:type", Object)
    ], DirtyDiffManager.prototype, "workspace", void 0);
    __decorate([
        inversify_1.inject(git_preferences_1.GitPreferences),
        __metadata("design:type", Object)
    ], DirtyDiffManager.prototype, "preferences", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], DirtyDiffManager.prototype, "initialize", null);
    DirtyDiffManager = __decorate([
        inversify_1.injectable()
    ], DirtyDiffManager);
    return DirtyDiffManager;
}());
exports.DirtyDiffManager = DirtyDiffManager;
var DirtyDiffModel = /** @class */ (function () {
    function DirtyDiffModel(uri, readGitResource) {
        this.uri = uri;
        this.readGitResource = readGitResource;
        this.enabled = true;
        this.dirty = true;
        this.onDirtyDiffUpdateEmitter = new core_1.Emitter();
        this.onDirtyDiffUpdate = this.onDirtyDiffUpdateEmitter.event;
        this.updateDelayer = new DirtyDiffModel.Throttler(200);
    }
    DirtyDiffModel.prototype.update = function () {
        var _this = this;
        var enabled = this.enabled && this.dirty;
        var previous = enabled ? this.previousContent : [];
        var current = enabled ? this.currentContent : [];
        if (!previous || !current) {
            return;
        }
        var uri = this.uri;
        this.updateDelayer.push(function () {
            var dirtyDiff = enabled
                ? DirtyDiffModel.computeDirtyDiff(previous, current)
                : { added: [], removed: [], modified: [] };
            var dirtyDiffUpdate = __assign({ uri: uri }, dirtyDiff);
            _this.onDirtyDiffUpdateEmitter.fire(dirtyDiffUpdate);
        });
    };
    DirtyDiffModel.prototype.handleDocumentChanged = function (documentContent) {
        this.currentContent = DirtyDiffModel.splitLines(documentContent);
        this.update();
    };
    DirtyDiffModel.prototype.handleGitStatusUpdate = function (repository, relevantChanges) {
        return __awaiter(this, void 0, void 0, function () {
            var noRelevantChanges, isNewAndStaged, isNewAndUnstaged, modifiedChange, isModified, _a, _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        noRelevantChanges = relevantChanges.length === 0;
                        isNewAndStaged = relevantChanges.some(function (c) { return c.status === common_2.GitFileStatus.New && !!c.staged; });
                        isNewAndUnstaged = relevantChanges.some(function (c) { return c.status === common_2.GitFileStatus.New && !c.staged; });
                        modifiedChange = relevantChanges.find(function (c) { return c.status === common_2.GitFileStatus.Modified; });
                        isModified = !!modifiedChange;
                        if (!(isModified || isNewAndStaged)) return [3 /*break*/, 4];
                        this.dirty = true;
                        this.staged = isNewAndStaged || modifiedChange.staged || false;
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 3, , 4]);
                        _a = this;
                        return [4 /*yield*/, this.getPreviousRevision()];
                    case 2:
                        _a.previousContent = _e.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        _b = _e.sent();
                        this.dirty = false;
                        this.previousContent = [];
                        return [3 /*break*/, 4];
                    case 4:
                        if (isNewAndUnstaged && !isNewAndStaged) {
                            this.dirty = false;
                            this.previousContent = [];
                        }
                        if (!(noRelevantChanges && this.isInGitRepository(repository))) return [3 /*break*/, 8];
                        _e.label = 5;
                    case 5:
                        _e.trys.push([5, 7, , 8]);
                        _c = this;
                        return [4 /*yield*/, this.getPreviousRevision()];
                    case 6:
                        _c.previousContent = _e.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        _d = _e.sent();
                        return [3 /*break*/, 8];
                    case 8:
                        this.update();
                        return [2 /*return*/];
                }
            });
        });
    };
    DirtyDiffModel.prototype.isInGitRepository = function (repository) {
        var modelUri = new uri_1.default(this.uri).withoutScheme().toString();
        var repoUri = new uri_1.default(repository.localUri).withoutScheme().toString();
        return modelUri.startsWith(repoUri);
    };
    DirtyDiffModel.prototype.getPreviousRevision = function () {
        return __awaiter(this, void 0, void 0, function () {
            var query, uri, contents;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        query = this.staged ? "" : "HEAD";
                        uri = new uri_1.default(this.uri).withScheme(git_resource_1.GIT_RESOURCE_SCHEME).withQuery(query);
                        return [4 /*yield*/, this.readGitResource(uri)];
                    case 1:
                        contents = _a.sent();
                        return [2 /*return*/, DirtyDiffModel.splitLines(contents)];
                }
            });
        });
    };
    DirtyDiffModel.prototype.dispose = function () {
        this.onDirtyDiffUpdateEmitter.dispose();
    };
    return DirtyDiffModel;
}());
exports.DirtyDiffModel = DirtyDiffModel;
(function (DirtyDiffModel) {
    var diffComputer = new diff_computer_1.DiffComputer();
    function computeDirtyDiff(previous, current) {
        return diffComputer.computeDirtyDiff(previous, current);
    }
    DirtyDiffModel.computeDirtyDiff = computeDirtyDiff;
    function splitLines(text) {
        return text.split(/\r\n|\n/);
    }
    DirtyDiffModel.splitLines = splitLines;
    var Throttler = /** @class */ (function () {
        function Throttler(delay) {
            this.delay = delay;
        }
        Throttler.prototype.push = function (task) {
            var _this = this;
            this.lastTask = task;
            if (!this.timeout) {
                this.timeout = window.setTimeout(function () {
                    _this.timeout = undefined;
                    _this.lastTask();
                }, this.delay);
            }
        };
        return Throttler;
    }());
    DirtyDiffModel.Throttler = Throttler;
})(DirtyDiffModel = exports.DirtyDiffModel || (exports.DirtyDiffModel = {}));
exports.DirtyDiffModel = DirtyDiffModel;
//# sourceMappingURL=dirty-diff-manager.js.map