"use strict";
/*
 * Copyright (C) 2018 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var browser_1 = require("@theia/editor/lib/browser");
var DirtyDiffDecorationType;
(function (DirtyDiffDecorationType) {
    DirtyDiffDecorationType["AddedLine"] = "dirty-diff-added-line";
    DirtyDiffDecorationType["RemovedLine"] = "dirty-diff-removed-line";
    DirtyDiffDecorationType["ModifiedLine"] = "dirty-diff-modified-line";
})(DirtyDiffDecorationType = exports.DirtyDiffDecorationType || (exports.DirtyDiffDecorationType = {}));
var AddedLineDecoration = {
    linesDecorationsClassName: 'dirty-diff-glyph dirty-diff-added-line',
    overviewRuler: {
        color: 'rgba(0, 255, 0, 0.8)',
        position: browser_1.OverviewRulerLane.Left,
    }
};
var RemovedLineDecoration = {
    linesDecorationsClassName: 'dirty-diff-glyph dirty-diff-removed-line',
    overviewRuler: {
        color: 'rgba(230, 0, 0, 0.8)',
        position: browser_1.OverviewRulerLane.Left,
    }
};
var ModifiedLineDecoration = {
    linesDecorationsClassName: 'dirty-diff-glyph dirty-diff-modified-line',
    overviewRuler: {
        color: 'rgba(0, 100, 150, 0.8)',
        position: browser_1.OverviewRulerLane.Left,
    }
};
var DirtyDiffDecorator = /** @class */ (function () {
    function DirtyDiffDecorator(editorManager, editorDecorationsService) {
        this.editorManager = editorManager;
        this.editorDecorationsService = editorDecorationsService;
        this.appliedDecorations = new Map();
    }
    DirtyDiffDecorator.prototype.applyDecorations = function (update) {
        var _this = this;
        var modifications = update.modified.map(function (range) { return _this.toDeltaDecoration(range, ModifiedLineDecoration); });
        var additions = update.added.map(function (range) { return _this.toDeltaDecoration(range, AddedLineDecoration); });
        var removals = update.removed.map(function (line) { return _this.toDeltaDecoration(line, RemovedLineDecoration); });
        var decorations = __spread(modifications, additions, removals);
        this.setDecorations(update.uri, decorations);
    };
    DirtyDiffDecorator.prototype.setDecorations = function (uri, newDecorations) {
        return __awaiter(this, void 0, void 0, function () {
            var oldDecorations, decorationIds;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        oldDecorations = this.appliedDecorations.get(uri) || [];
                        return [4 /*yield*/, this.editorDecorationsService.deltaDecorations({ uri: uri, oldDecorations: oldDecorations, newDecorations: newDecorations })];
                    case 1:
                        decorationIds = _a.sent();
                        this.appliedDecorations.set(uri, decorationIds || []);
                        return [2 /*return*/];
                }
            });
        });
    };
    DirtyDiffDecorator.prototype.toDeltaDecoration = function (from, options) {
        var _a = __read((typeof from === 'number') ? [from, from] : [from.start, from.end], 2), start = _a[0], end = _a[1];
        var range = browser_1.Range.create(browser_1.Position.create(start, 0), browser_1.Position.create(end, 0));
        return { range: range, options: options };
    };
    DirtyDiffDecorator = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(browser_1.EditorManager)),
        __param(1, inversify_1.inject(browser_1.EditorDecorationsService)),
        __metadata("design:paramtypes", [browser_1.EditorManager,
            browser_1.EditorDecorationsService])
    ], DirtyDiffDecorator);
    return DirtyDiffDecorator;
}());
exports.DirtyDiffDecorator = DirtyDiffDecorator;
//# sourceMappingURL=dirty-diff-decorator.js.map