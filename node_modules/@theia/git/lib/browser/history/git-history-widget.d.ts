import { h } from "@phosphor/virtualdom";
import { OpenerService, StatefulWidget, WidgetManager, ApplicationShell, Message } from "@theia/core/lib/browser";
import { Git, GitFileChange } from '../../common';
import { FileSystem } from "@theia/filesystem/lib/common";
import { GitDiffContribution } from "../diff/git-diff-contribution";
import { GitAvatarService } from "./git-avatar-service";
import { GitCommitDetailOpenHandler } from "./git-commit-detail-open-handler";
import { GitCommitDetails } from "./git-commit-detail-widget";
import { GitNavigableListWidget } from "../git-navigable-list-widget";
import { GitFileChangeNode } from "../git-widget";
export interface GitCommitNode extends GitCommitDetails {
    fileChanges?: GitFileChange[];
    expanded: boolean;
    selected: boolean;
}
export declare namespace GitCommitNode {
    function is(node: any): node is GitCommitNode;
}
export declare type GitHistoryListNode = (GitCommitNode | GitFileChangeNode);
export declare class GitHistoryWidget extends GitNavigableListWidget<GitHistoryListNode> implements StatefulWidget {
    protected readonly openerService: OpenerService;
    protected readonly detailOpenHandler: GitCommitDetailOpenHandler;
    protected readonly shell: ApplicationShell;
    protected readonly fileSystem: FileSystem;
    protected readonly git: Git;
    protected readonly avartarService: GitAvatarService;
    protected readonly widgetManager: WidgetManager;
    protected readonly diffContribution: GitDiffContribution;
    protected options: Git.Options.Log;
    protected commits: GitCommitNode[];
    protected ready: boolean;
    protected singleFileMode: boolean;
    constructor(openerService: OpenerService, detailOpenHandler: GitCommitDetailOpenHandler, shell: ApplicationShell, fileSystem: FileSystem, git: Git, avartarService: GitAvatarService, widgetManager: WidgetManager, diffContribution: GitDiffContribution);
    protected onAfterAttach(msg: Message): void;
    setContent(options?: Git.Options.Log): Promise<void>;
    protected addCommits(options?: Git.Options.Log): void;
    protected addFileChangeNodesToCommit(commit: GitCommitNode): Promise<void>;
    storeState(): object;
    restoreState(oldState: any): void;
    protected render(): h.Child;
    protected renderHistoryHeader(): h.Child;
    protected renderCommitList(): h.Child;
    protected renderCommit(commit: GitCommitNode): h.Child;
    protected openDetailWidget(commit: GitCommitNode): Promise<void>;
    protected renderFileChangeList(commit: GitCommitNode): h.Child;
    protected renderGitItem(change: GitFileChangeNode, commitSha: string): h.Child;
    protected navigateLeft(): void;
    protected navigateRight(): void;
    protected handleListEnter(): void;
    protected openFile(change: GitFileChange, commitSha: string): void;
}
