import { Git, Repository } from '../common';
import { WorkspaceService } from '@theia/workspace/lib/browser/workspace-service';
import { Event, Emitter } from '@theia/core';
export interface GitRefreshOptions {
    readonly maxCount: number;
}
export declare class GitRepositoryProvider {
    protected readonly git: Git;
    protected readonly workspaceService: WorkspaceService;
    protected _selectedRepository: Repository | undefined;
    protected _allRepositories: Repository[];
    protected readonly onDidChangeRepositoryEmitter: Emitter<Repository | undefined>;
    constructor(git: Git, workspaceService: WorkspaceService);
    protected initialize(): Promise<void>;
    /**
     * Returns with the previously selected repository, or if no repository has been selected yet,
     * it picks the first available repository from the backend and sets it as the selected one and returns with that.
     * If no repositories are available, returns `undefined`.
     */
    /**
     * Sets or un-sets the repository.
     */
    selectedRepository: Repository | undefined;
    readonly onDidChangeRepository: Event<Repository | undefined>;
    protected fireDidChangeRepository(): void;
    /**
     * Returns with all know repositories.
     */
    readonly allRepositories: Repository[];
    refresh(options?: GitRefreshOptions): Promise<void>;
    protected exists(repository: Repository): boolean;
}
