"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (C) 2018 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var inversify_1 = require("inversify");
var uri_1 = require("@theia/core/lib/common/uri");
var core_1 = require("@theia/core");
var browser_1 = require("@theia/core/lib/browser");
var browser_2 = require("@theia/editor/lib/browser");
var git_widget_1 = require("./git-widget");
var git_repository_tracker_1 = require("./git-repository-tracker");
var git_quick_open_service_1 = require("./git-quick-open-service");
exports.GIT_WIDGET_FACTORY_ID = 'git';
var GIT_SELECTED_REPOSITORY = 'git-selected-repository';
var GIT_REPOSITORY_STATUS = 'git-repository-status';
var GIT_AHEAD_BEHIND = 'git-ahead-behind';
var GIT_COMMANDS;
(function (GIT_COMMANDS) {
    GIT_COMMANDS.FETCH = {
        id: 'git.fetch',
        label: 'Git: Fetch'
    };
    GIT_COMMANDS.PULL = {
        id: 'git.pull',
        label: 'Git: Pull'
    };
    GIT_COMMANDS.PUSH = {
        id: 'git.push',
        label: 'Git: Push'
    };
    GIT_COMMANDS.MERGE = {
        id: 'git.merge',
        label: 'Git: Merge'
    };
    GIT_COMMANDS.CHECKOUT = {
        id: 'git.checkout',
        label: 'Git: Checkout'
    };
    GIT_COMMANDS.CHANGE_REPOSITORY = {
        id: 'git.change.repository',
        label: 'Git: Change Repository'
    };
    GIT_COMMANDS.OPEN_FILE = {
        id: 'git.open.file',
        label: 'Git: Open File'
    };
    GIT_COMMANDS.OPEN_CHANGES = {
        id: 'git.open.changes',
        label: 'Git: Open Changes'
    };
})(GIT_COMMANDS = exports.GIT_COMMANDS || (exports.GIT_COMMANDS = {}));
var GitViewContribution = /** @class */ (function (_super) {
    __extends(GitViewContribution, _super);
    function GitViewContribution() {
        var _this = _super.call(this, {
            widgetId: exports.GIT_WIDGET_FACTORY_ID,
            widgetName: 'Git',
            defaultWidgetOptions: {
                area: 'left',
                rank: 200
            },
            toggleCommandId: 'gitView:toggle',
            toggleKeybinding: 'ctrlcmd+shift+g'
        }) || this;
        _this.toDispose = new core_1.DisposableCollection();
        return _this;
    }
    GitViewContribution.prototype.onStart = function () {
        var _this = this;
        this.repositoryTracker.onDidChangeRepository(function (repository) {
            if (repository) {
                var path = new uri_1.default(repository.localUri).path;
                _this.statusBar.setElement(GIT_SELECTED_REPOSITORY, {
                    text: "$(database) " + path.base,
                    alignment: browser_1.StatusBarAlignment.LEFT,
                    priority: 102,
                    command: GIT_COMMANDS.CHANGE_REPOSITORY.id,
                    tooltip: path.toString()
                });
            }
            else {
                _this.statusBar.removeElement(GIT_SELECTED_REPOSITORY);
            }
        });
        this.repositoryTracker.onGitEvent(function (event) {
            var status = event.status;
            var branch = status.branch ? status.branch : 'NO-HEAD';
            var dirty = status.changes.length > 0 ? '*' : '';
            _this.statusBar.setElement(GIT_REPOSITORY_STATUS, {
                text: "$(code-fork) " + branch + dirty,
                alignment: browser_1.StatusBarAlignment.LEFT,
                priority: 101,
                command: GIT_COMMANDS.CHECKOUT.id
            });
            if (status.aheadBehind === undefined) {
                _this.statusBar.removeElement(GIT_AHEAD_BEHIND);
            }
            else {
                var _a = status.aheadBehind, ahead = _a.ahead, behind = _a.behind;
                if (ahead > 0 || behind > 0) {
                    _this.statusBar.setElement(GIT_AHEAD_BEHIND, {
                        text: behind + "\u2193 " + ahead + "\u2191",
                        alignment: browser_1.StatusBarAlignment.LEFT,
                        priority: 100
                    });
                }
                else {
                    _this.statusBar.removeElement(GIT_AHEAD_BEHIND);
                }
            }
        });
    };
    GitViewContribution.prototype.registerMenus = function (menus) {
        _super.prototype.registerMenus.call(this, menus);
        var commands = [GIT_COMMANDS.FETCH, GIT_COMMANDS.PULL, GIT_COMMANDS.PUSH, GIT_COMMANDS.MERGE];
        commands.forEach(function (command) {
            return menus.registerMenuAction(git_widget_1.GIT_WIDGET_CONTEXT_MENU, {
                commandId: command.id,
                label: command.label.slice('Git: '.length) + '...'
            });
        });
        menus.registerMenuAction(browser_2.EditorContextMenu.NAVIGATION, {
            commandId: GIT_COMMANDS.OPEN_FILE.id
        });
        menus.registerMenuAction(browser_2.EditorContextMenu.NAVIGATION, {
            commandId: GIT_COMMANDS.OPEN_CHANGES.id
        });
    };
    GitViewContribution.prototype.registerCommands = function (registry) {
        var _this = this;
        _super.prototype.registerCommands.call(this, registry);
        registry.registerCommand(GIT_COMMANDS.FETCH, {
            execute: function () { return _this.quickOpenService.fetch(); },
            isEnabled: function () { return !!_this.repositoryTracker.selectedRepository; }
        });
        registry.registerCommand(GIT_COMMANDS.PULL, {
            execute: function () { return _this.quickOpenService.pull(); },
            isEnabled: function () { return !!_this.repositoryTracker.selectedRepository; }
        });
        registry.registerCommand(GIT_COMMANDS.PUSH, {
            execute: function () { return _this.quickOpenService.push(); },
            isEnabled: function () { return !!_this.repositoryTracker.selectedRepository; }
        });
        registry.registerCommand(GIT_COMMANDS.MERGE, {
            execute: function () { return _this.quickOpenService.merge(); },
            isEnabled: function () { return !!_this.repositoryTracker.selectedRepository; }
        });
        registry.registerCommand(GIT_COMMANDS.CHECKOUT, {
            execute: function () { return _this.quickOpenService.checkout(); },
            isEnabled: function () { return !!_this.repositoryTracker.selectedRepository; }
        });
        registry.registerCommand(GIT_COMMANDS.CHANGE_REPOSITORY, {
            execute: function () { return _this.quickOpenService.changeRepository(); },
            isEnabled: function () { return _this.repositoryTracker.allRepositories.length > 1; }
        });
        registry.registerCommand(GIT_COMMANDS.OPEN_FILE, {
            execute: function () { return _this.openFile(); },
            isEnabled: function () { return !!_this.openFileOptions; },
            isVisible: function () { return !!_this.openFileOptions; }
        });
        registry.registerCommand(GIT_COMMANDS.OPEN_CHANGES, {
            execute: function () { return _this.openChanges(); },
            isEnabled: function () { return !!_this.openChangesOptions; },
            isVisible: function () { return !!_this.openChangesOptions; }
        });
    };
    GitViewContribution.prototype.openFile = function () {
        return __awaiter(this, void 0, void 0, function () {
            var options;
            return __generator(this, function (_a) {
                options = this.openFileOptions;
                return [2 /*return*/, options && this.editorManager.open(options.uri, options.options)];
            });
        });
    };
    Object.defineProperty(GitViewContribution.prototype, "openFileOptions", {
        get: function () {
            var widget = this.editorManager.currentEditor;
            if (widget && browser_2.DiffUris.isDiffUri(widget.editor.uri)) {
                var _a = __read(browser_2.DiffUris.decode(widget.editor.uri), 2), right = _a[1];
                var uri = right.withScheme('file');
                var selection = widget.editor.selection;
                return { uri: uri, options: { selection: selection } };
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    GitViewContribution.prototype.openChanges = function () {
        return __awaiter(this, void 0, void 0, function () {
            var options, view;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = this.openChangesOptions;
                        if (!options) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.widget];
                    case 1:
                        view = _a.sent();
                        return [2 /*return*/, view.openChange(options.change, options.options)];
                    case 2: return [2 /*return*/, undefined];
                }
            });
        });
    };
    Object.defineProperty(GitViewContribution.prototype, "openChangesOptions", {
        get: function () {
            var view = this.tryGetWidget();
            if (!view) {
                return undefined;
            }
            var widget = this.editorManager.currentEditor;
            if (widget && !browser_2.DiffUris.isDiffUri(widget.editor.uri)) {
                var uri = widget.editor.uri;
                var change = view.findChange(uri);
                if (change) {
                    var selection = widget.editor.selection;
                    return { change: change, options: { selection: selection } };
                }
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        inversify_1.inject(browser_1.StatusBar),
        __metadata("design:type", Object)
    ], GitViewContribution.prototype, "statusBar", void 0);
    __decorate([
        inversify_1.inject(browser_2.EditorManager),
        __metadata("design:type", browser_2.EditorManager)
    ], GitViewContribution.prototype, "editorManager", void 0);
    __decorate([
        inversify_1.inject(git_quick_open_service_1.GitQuickOpenService),
        __metadata("design:type", git_quick_open_service_1.GitQuickOpenService)
    ], GitViewContribution.prototype, "quickOpenService", void 0);
    __decorate([
        inversify_1.inject(git_repository_tracker_1.GitRepositoryTracker),
        __metadata("design:type", git_repository_tracker_1.GitRepositoryTracker)
    ], GitViewContribution.prototype, "repositoryTracker", void 0);
    GitViewContribution = __decorate([
        inversify_1.injectable(),
        __metadata("design:paramtypes", [])
    ], GitViewContribution);
    return GitViewContribution;
}(browser_1.AbstractViewContribution));
exports.GitViewContribution = GitViewContribution;
//# sourceMappingURL=git-view-contribution.js.map