import { Git, Repository, WorkingDirectoryStatus } from '../common';
import { Event, Emitter, DisposableCollection } from "@theia/core";
import { GitRepositoryProvider } from './git-repository-provider';
import { GitWatcher, GitStatusChangeEvent } from "../common/git-watcher";
/**
 * The repository tracker watches the selected repository for status changes. It provides a convenient way to listen on status updates.
 */
export declare class GitRepositoryTracker {
    protected readonly git: Git;
    protected readonly repositoryProvider: GitRepositoryProvider;
    protected readonly gitWatcher: GitWatcher;
    protected toDispose: DisposableCollection;
    protected workingDirectoryStatus: WorkingDirectoryStatus | undefined;
    protected readonly onGitEventEmitter: Emitter<GitStatusChangeEvent>;
    constructor(git: Git, repositoryProvider: GitRepositoryProvider, gitWatcher: GitWatcher);
    protected init(): Promise<void>;
    /**
     * Returns the selected repository, or `undefined` if no repositories are available.
     */
    readonly selectedRepository: Repository | undefined;
    /**
     * Returns all known repositories.
     */
    readonly allRepositories: Repository[];
    /**
     * Returns the last known status of the selected respository, or `undefined` if no repositories are available.
     */
    readonly selectedRepositoryStatus: WorkingDirectoryStatus | undefined;
    /**
     * Emits when the selected repository has changed.
     */
    readonly onDidChangeRepository: Event<Repository | undefined>;
    /**
     * Emits when status has changed in the selected repository.
     */
    readonly onGitEvent: Event<GitStatusChangeEvent>;
}
