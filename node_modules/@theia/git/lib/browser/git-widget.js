"use strict";
/*
 * Copyright (C) 2017 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var virtualdom_1 = require("@phosphor/virtualdom");
var uri_1 = require("@theia/core/lib/common/uri");
var core_1 = require("@theia/core");
var browser_1 = require("@theia/core/lib/browser");
var browser_2 = require("@theia/editor/lib/browser");
var browser_3 = require("@theia/workspace/lib/browser");
var common_1 = require("../common");
var git_watcher_1 = require("../common/git-watcher");
var git_resource_1 = require("./git-resource");
var git_repository_provider_1 = require("./git-repository-provider");
exports.GIT_WIDGET_CONTEXT_MENU = ['git-widget-context-menu'];
var GitFileChangeNode;
(function (GitFileChangeNode) {
    function is(node) {
        return !!node && 'uri' in node && 'status' in node && 'description' in node && 'label' in node && 'icon' in node;
    }
    GitFileChangeNode.is = is;
})(GitFileChangeNode = exports.GitFileChangeNode || (exports.GitFileChangeNode = {}));
var GitWidget = /** @class */ (function (_super) {
    __extends(GitWidget, _super);
    function GitWidget(git, gitWatcher, contextMenuRenderer, resourceProvider, messageService, commandService, repositoryProvider, labelProvider, workspaceService) {
        var _this = _super.call(this) || this;
        _this.git = git;
        _this.gitWatcher = gitWatcher;
        _this.contextMenuRenderer = contextMenuRenderer;
        _this.resourceProvider = resourceProvider;
        _this.messageService = messageService;
        _this.commandService = commandService;
        _this.repositoryProvider = repositoryProvider;
        _this.labelProvider = labelProvider;
        _this.workspaceService = workspaceService;
        _this.stagedChanges = [];
        _this.unstagedChanges = [];
        _this.mergeChanges = [];
        _this.message = '';
        _this.messageInputHighlighted = false;
        _this.additionalMessage = '';
        _this.toDispose = new core_1.DisposableCollection();
        _this.id = 'theia-gitContainer';
        _this.title.label = 'Git';
        _this.scrollContainer = 'changesOuterContainer';
        _this.addClass('theia-git');
        return _this;
    }
    GitWidget.prototype.init = function () {
        var _this = this;
        this.repositoryProvider.onDidChangeRepository(function (repository) {
            _this.initialize(repository);
        });
        this.initialize(this.repositoryProvider.selectedRepository);
        this.update();
    };
    GitWidget.prototype.onActivateRequest = function (msg) {
        _super.prototype.onActivateRequest.call(this, msg);
        var messageInput = document.getElementById('git-messageInput');
        if (messageInput) {
            messageInput.focus();
        }
        else {
            this.node.focus();
        }
    };
    GitWidget.prototype.initialize = function (repository) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!repository) return [3 /*break*/, 2];
                        this.toDispose.dispose();
                        _b = (_a = this.toDispose).push;
                        return [4 /*yield*/, this.gitWatcher.watchGitChanges(repository)];
                    case 1:
                        _b.apply(_a, [_c.sent()]);
                        this.toDispose.push(this.gitWatcher.onGitEvent(function (gitEvent) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                if (git_watcher_1.GitStatusChangeEvent.is(gitEvent)) {
                                    this.status = gitEvent.status;
                                    this.updateView(gitEvent.status);
                                }
                                return [2 /*return*/];
                            });
                        }); }));
                        _c.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    GitWidget.prototype.updateView = function (status) {
        return __awaiter(this, void 0, void 0, function () {
            var stagedChanges, unstagedChanges, mergeChanges, _a, _b, change, uri, repository, _c, icon, label, description, e_1_1, sort, e_1, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        stagedChanges = [];
                        unstagedChanges = [];
                        mergeChanges = [];
                        if (!status) return [3 /*break*/, 8];
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 6, 7, 8]);
                        _a = __values(status.changes), _b = _a.next();
                        _e.label = 2;
                    case 2:
                        if (!!_b.done) return [3 /*break*/, 5];
                        change = _b.value;
                        uri = new uri_1.default(change.uri);
                        repository = this.repositoryProvider.selectedRepository;
                        return [4 /*yield*/, Promise.all([
                                this.labelProvider.getIcon(uri),
                                this.labelProvider.getName(uri),
                                repository ? common_1.Repository.relativePath(repository, uri.parent).toString() : this.labelProvider.getLongName(uri.parent)
                            ])];
                    case 3:
                        _c = __read.apply(void 0, [_e.sent(), 3]), icon = _c[0], label = _c[1], description = _c[2];
                        if (common_1.GitFileStatus[common_1.GitFileStatus.Conflicted.valueOf()] !== common_1.GitFileStatus[change.status]) {
                            if (change.staged) {
                                stagedChanges.push(__assign({ icon: icon, label: label, description: description }, change));
                            }
                            else {
                                unstagedChanges.push(__assign({ icon: icon, label: label, description: description }, change));
                            }
                        }
                        else {
                            if (!change.staged) {
                                mergeChanges.push(__assign({ icon: icon, label: label, description: description }, change));
                            }
                        }
                        _e.label = 4;
                    case 4:
                        _b = _a.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _e.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8:
                        sort = function (l, r) { return l.label.localeCompare(r.label); };
                        this.stagedChanges = stagedChanges.sort(sort);
                        this.unstagedChanges = unstagedChanges.sort(sort);
                        this.mergeChanges = mergeChanges.sort(sort);
                        this.update();
                        return [2 /*return*/];
                }
            });
        });
    };
    GitWidget.prototype.render = function () {
        var repository = this.repositoryProvider.selectedRepository;
        var messageInput = this.renderMessageInput();
        var messageTextarea = this.renderMessageTextarea();
        var commandBar = this.renderCommandBar(repository);
        var headerContainer = virtualdom_1.h.div({ className: 'headerContainer' }, messageInput, messageTextarea, commandBar);
        var mergeChanges = this.renderMergeChanges(repository) || '';
        var stagedChanges = this.renderStagedChanges(repository) || '';
        var unstagedChanges = this.renderUnstagedChanges(repository) || '';
        var changesContainer = virtualdom_1.h.div({ className: "changesOuterContainer", id: this.scrollContainer }, mergeChanges, stagedChanges, unstagedChanges);
        return [headerContainer, changesContainer];
    };
    GitWidget.prototype.renderCommandBar = function (repository) {
        var _this = this;
        var commit = function () { return __awaiter(_this, void 0, void 0, function () {
            var messageInput, extendedMessageInput, status_1, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        messageInput = document.getElementById('git-messageInput');
                        if (!(this.message !== '')) return [3 /*break*/, 6];
                        extendedMessageInput = document.getElementById('git-extendedMessageInput');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        // We can make sure, repository exists, otherwise we would not have this button.
                        return [4 /*yield*/, this.git.commit(repository, this.message + "\n\n" + this.additionalMessage)];
                    case 2:
                        // We can make sure, repository exists, otherwise we would not have this button.
                        _a.sent();
                        messageInput.value = '';
                        extendedMessageInput.value = '';
                        return [4 /*yield*/, this.git.status(repository)];
                    case 3:
                        status_1 = _a.sent();
                        this.updateView(status_1);
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _a.sent();
                        this.logError(error_1);
                        return [3 /*break*/, 5];
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        if (messageInput) {
                            this.messageInputHighlighted = true;
                            this.update();
                            messageInput.focus();
                        }
                        this.messageService.error('Please provide a commit message!');
                        _a.label = 7;
                    case 7: return [2 /*return*/];
                }
            });
        }); };
        var refresh = virtualdom_1.h.a({
            className: 'toolbar-button',
            title: 'Refresh',
            onclick: function (e) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.repositoryProvider.refresh()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); }
        }, virtualdom_1.h.i({ className: 'fa fa-refresh' }));
        var more = repository ? virtualdom_1.h.a({
            className: 'toolbar-button',
            title: 'More...',
            onclick: function (event) {
                var el = event.target.parentElement;
                if (el) {
                    _this.contextMenuRenderer.render(exports.GIT_WIDGET_CONTEXT_MENU, {
                        x: el.getBoundingClientRect().left,
                        y: el.getBoundingClientRect().top + el.offsetHeight
                    });
                }
            }
        }, virtualdom_1.h.i({ className: 'fa fa-ellipsis-h' })) : '';
        var commandsContainer = virtualdom_1.h.div({ className: 'buttons' }, refresh, more);
        var commitButton = virtualdom_1.h.button({
            className: 'theia-button',
            title: 'Commit all the staged changes',
            onclick: function () { return commit(); }
        }, 'Commit');
        var commitContainer = virtualdom_1.h.div({ className: 'buttons' }, commitButton);
        var placeholder = virtualdom_1.h.div({ className: 'placeholder' });
        return virtualdom_1.h.div({ id: 'commandBar', className: 'flexcontainer' }, commandsContainer, placeholder, commitContainer);
    };
    GitWidget.prototype.renderMessageInput = function () {
        var _this = this;
        var input = virtualdom_1.h.input({
            id: 'git-messageInput',
            oninput: function (event) {
                var inputElement = event.target;
                if (inputElement.value !== '') {
                    _this.messageInputHighlighted = false;
                }
                _this.message = event.target.value;
            },
            className: this.messageInputHighlighted ? 'warn' : '',
            placeholder: 'Commit message',
            value: this.message
        });
        return virtualdom_1.h.div({ id: 'messageInputContainer', className: 'flexcontainer row' }, input);
    };
    GitWidget.prototype.renderMessageTextarea = function () {
        var _this = this;
        var textarea = virtualdom_1.h.textarea({
            id: 'git-extendedMessageInput',
            placeholder: 'Extended commit text',
            oninput: function (event) {
                _this.additionalMessage = event.target.value;
            },
            value: this.additionalMessage
        });
        return virtualdom_1.h.div({ id: 'messageTextareaContainer', className: 'flexcontainer row' }, textarea);
    };
    GitWidget.prototype.renderGitItemButtons = function (repository, change) {
        var _this = this;
        var buttons = [];
        if (change.staged) {
            buttons.push(virtualdom_1.h.a({
                className: 'toolbar-button',
                title: 'Unstage Changes',
                onclick: function (event) { return __awaiter(_this, void 0, void 0, function () {
                    var error_2;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.git.unstage(repository, change.uri)];
                            case 1:
                                _a.sent();
                                return [3 /*break*/, 3];
                            case 2:
                                error_2 = _a.sent();
                                this.logError(error_2);
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); }
            }, virtualdom_1.h.i({ className: 'fa fa-minus' })));
        }
        else {
            buttons.push(virtualdom_1.h.a({
                className: 'toolbar-button',
                title: 'Discard Changes',
                onclick: function (event) { return __awaiter(_this, void 0, void 0, function () {
                    var options, error_3;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                options = { paths: change.uri };
                                if (!(change.status === common_1.GitFileStatus.New)) return [3 /*break*/, 1];
                                this.commandService.executeCommand(browser_3.WorkspaceCommands.FILE_DELETE.id, new uri_1.default(change.uri));
                                return [3 /*break*/, 4];
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, this.git.checkout(repository, options)];
                            case 2:
                                _a.sent();
                                return [3 /*break*/, 4];
                            case 3:
                                error_3 = _a.sent();
                                this.logError(error_3);
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                }); }
            }, virtualdom_1.h.i({ className: 'fa fa-undo' })));
            buttons.push(virtualdom_1.h.a({
                className: 'toolbar-button',
                title: 'Stage Changes',
                onclick: function (event) { return __awaiter(_this, void 0, void 0, function () {
                    var error_4;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.git.add(repository, change.uri)];
                            case 1:
                                _a.sent();
                                return [3 /*break*/, 3];
                            case 2:
                                error_4 = _a.sent();
                                this.logError(error_4);
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); }
            }, virtualdom_1.h.i({ className: 'fa fa-plus' })));
        }
        return virtualdom_1.h.div({ className: 'buttons' }, browser_1.VirtualRenderer.flatten(buttons));
    };
    GitWidget.prototype.renderGitItem = function (repository, change) {
        var _this = this;
        if (!repository) {
            return '';
        }
        var iconSpan = virtualdom_1.h.span({ className: change.icon + ' file-icon' });
        var nameSpan = virtualdom_1.h.span({ className: 'name' }, change.label + ' ');
        var pathSpan = virtualdom_1.h.span({ className: 'path' }, change.description);
        var nameAndPathDiv = virtualdom_1.h.div({
            className: 'noWrapInfo',
            onclick: function () { return _this.openChange(change); }
        }, iconSpan, nameSpan, pathSpan);
        var buttonsDiv = this.renderGitItemButtons(repository, change);
        var staged = change.staged ? 'staged ' : '';
        var statusDiv = virtualdom_1.h.div({
            title: this.getStatusCaption(change.status, change.staged),
            className: 'status ' + staged + common_1.GitFileStatus[change.status].toLowerCase()
        }, this.getAbbreviatedStatusCaption(change.status, change.staged));
        var itemButtonsAndStatusDiv = virtualdom_1.h.div({ className: 'itemButtonsContainer' }, buttonsDiv, statusDiv);
        return virtualdom_1.h.div({ className: 'gitItem noselect' }, nameAndPathDiv, itemButtonsAndStatusDiv);
    };
    GitWidget.prototype.renderChangesHeader = function (title) {
        var stagedChangesHeaderDiv = virtualdom_1.h.div({ className: 'header' }, title);
        return stagedChangesHeaderDiv;
    };
    GitWidget.prototype.renderMergeChanges = function (repository) {
        var _this = this;
        var mergeChangeDivs = [];
        if (this.mergeChanges.length > 0) {
            this.mergeChanges.forEach(function (change) {
                mergeChangeDivs.push(_this.renderGitItem(repository, change));
            });
            return virtualdom_1.h.div({
                id: 'mergeChanges',
                className: 'changesContainer'
            }, virtualdom_1.h.div({ className: 'theia-header' }, 'Merge Changes'), browser_1.VirtualRenderer.flatten(mergeChangeDivs));
        }
        else {
            return undefined;
        }
    };
    GitWidget.prototype.renderStagedChanges = function (repository) {
        var _this = this;
        var stagedChangeDivs = [];
        if (this.stagedChanges.length > 0) {
            this.stagedChanges.forEach(function (change) {
                stagedChangeDivs.push(_this.renderGitItem(repository, change));
            });
            return virtualdom_1.h.div({
                id: 'stagedChanges',
                className: 'changesContainer'
            }, virtualdom_1.h.div({ className: 'theia-header' }, 'Staged Changes'), browser_1.VirtualRenderer.flatten(stagedChangeDivs));
        }
        else {
            return undefined;
        }
    };
    GitWidget.prototype.renderUnstagedChanges = function (repository) {
        var _this = this;
        var unstagedChangeDivs = [];
        if (this.unstagedChanges.length > 0) {
            this.unstagedChanges.forEach(function (change) {
                unstagedChangeDivs.push(_this.renderGitItem(repository, change));
            });
            return virtualdom_1.h.div({
                id: 'unstagedChanges',
                className: 'changesContainer'
            }, virtualdom_1.h.div({ className: 'theia-header' }, 'Changed'), browser_1.VirtualRenderer.flatten(unstagedChangeDivs));
        }
        return undefined;
    };
    // tslint:disable-next-line:no-any
    GitWidget.prototype.logError = function (error) {
        var message = error instanceof Error ? error.message : error;
        this.messageService.error(message);
    };
    GitWidget.prototype.getStatusCaption = function (status, staged) {
        return common_1.GitFileStatus.toString(status, staged);
    };
    GitWidget.prototype.getAbbreviatedStatusCaption = function (status, staged) {
        return common_1.GitFileStatus.toAbbreviation(status, staged);
    };
    GitWidget.prototype.findChange = function (uri) {
        var stringUri = uri.toString();
        var merge = this.mergeChanges.find(function (c) { return c.uri.toString() === stringUri; });
        if (merge) {
            return merge;
        }
        var unstaged = this.unstagedChanges.find(function (c) { return c.uri.toString() === stringUri; });
        if (unstaged) {
            return unstaged;
        }
        return this.stagedChanges.find(function (c) { return c.uri.toString() === stringUri; });
    };
    GitWidget.prototype.openChange = function (change, options) {
        return __awaiter(this, void 0, void 0, function () {
            var changeUri;
            return __generator(this, function (_a) {
                changeUri = this.createChangeUri(change);
                return [2 /*return*/, this.editorManager.open(changeUri, options)];
            });
        });
    };
    GitWidget.prototype.createChangeUri = function (change) {
        var changeUri = new uri_1.default(change.uri);
        if (change.status !== common_1.GitFileStatus.New) {
            if (change.staged) {
                return browser_2.DiffUris.encode(changeUri.withScheme(git_resource_1.GIT_RESOURCE_SCHEME).withQuery('HEAD'), changeUri.withScheme(git_resource_1.GIT_RESOURCE_SCHEME), changeUri.displayName + ' (Index)');
            }
            if (this.stagedChanges.find(function (c) { return c.uri === change.uri; })) {
                return browser_2.DiffUris.encode(changeUri.withScheme(git_resource_1.GIT_RESOURCE_SCHEME), changeUri, changeUri.displayName + ' (Working tree)');
            }
            if (this.mergeChanges.find(function (c) { return c.uri === change.uri; })) {
                return changeUri;
            }
            return browser_2.DiffUris.encode(changeUri.withScheme(git_resource_1.GIT_RESOURCE_SCHEME).withQuery('HEAD'), changeUri, changeUri.displayName + ' (Working tree)');
        }
        if (change.staged) {
            return changeUri.withScheme(git_resource_1.GIT_RESOURCE_SCHEME);
        }
        if (this.stagedChanges.find(function (c) { return c.uri === change.uri; })) {
            return browser_2.DiffUris.encode(changeUri.withScheme(git_resource_1.GIT_RESOURCE_SCHEME), changeUri, changeUri.displayName + ' (Working tree)');
        }
        return changeUri;
    };
    __decorate([
        inversify_1.inject(browser_2.EditorManager),
        __metadata("design:type", browser_2.EditorManager)
    ], GitWidget.prototype, "editorManager", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], GitWidget.prototype, "init", null);
    GitWidget = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(common_1.Git)),
        __param(1, inversify_1.inject(git_watcher_1.GitWatcher)),
        __param(2, inversify_1.inject(browser_1.ContextMenuRenderer)),
        __param(3, inversify_1.inject(core_1.ResourceProvider)),
        __param(4, inversify_1.inject(core_1.MessageService)),
        __param(5, inversify_1.inject(core_1.CommandService)),
        __param(6, inversify_1.inject(git_repository_provider_1.GitRepositoryProvider)),
        __param(7, inversify_1.inject(browser_1.LabelProvider)),
        __param(8, inversify_1.inject(browser_3.WorkspaceService)),
        __metadata("design:paramtypes", [Object, git_watcher_1.GitWatcher, Object, Function, core_1.MessageService, Object, git_repository_provider_1.GitRepositoryProvider,
            browser_1.LabelProvider,
            browser_3.WorkspaceService])
    ], GitWidget);
    return GitWidget;
}(browser_1.VirtualWidget));
exports.GitWidget = GitWidget;
//# sourceMappingURL=git-widget.js.map