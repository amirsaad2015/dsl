"use strict";
/*
 * Copyright (C) 2018 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var uri_1 = require("@theia/core/lib/common/uri");
var logger_1 = require("@theia/core/lib/common/logger");
var event_1 = require("@theia/core/lib/common/event");
var tree_iterator_1 = require("@theia/core/lib/browser/tree/tree-iterator");
var disposable_1 = require("@theia/core/lib/common/disposable");
var git_1 = require("../common/git");
var git_watcher_1 = require("../common/git-watcher");
var git_repository_provider_1 = require("./git-repository-provider");
var git_model_1 = require("../common/git-model");
var git_preferences_1 = require("./git-preferences");
var GitDecorator = /** @class */ (function () {
    function GitDecorator(git, repositoryProvider, watcher, preferences, logger) {
        var _this = this;
        this.git = git;
        this.repositoryProvider = repositoryProvider;
        this.watcher = watcher;
        this.preferences = preferences;
        this.logger = logger;
        this.id = 'theia-git-decorator';
        this.emitter = new event_1.Emitter();
        this.toDispose = new disposable_1.DisposableCollection();
        repositoryProvider.onDidChangeRepository(function (repository) { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            var _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        this.toDispose.dispose();
                        if (!repository) return [3 /*break*/, 2];
                        _b = (_a = this.toDispose).pushAll;
                        return [4 /*yield*/, this.watcher.watchGitChanges(repository)];
                    case 1:
                        _b.apply(_a, [[
                                _c.sent(),
                                this.watcher.onGitEvent(function (event) { return _this.fireDidChangeDecorations(function (tree) { return _this.collectDecorators(tree, event.status); }); })
                            ]]);
                        _c.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        }); });
        this.preferences.onPreferenceChanged(function (event) { return _this.handlePreferenceChange(event); });
        this.enabled = this.preferences['git.decorations.enabled'];
        this.showColors = this.preferences['git.decorations.colors'];
    }
    Object.defineProperty(GitDecorator.prototype, "onDidChangeDecorations", {
        get: function () {
            return this.emitter.event;
        },
        enumerable: true,
        configurable: true
    });
    GitDecorator.prototype.fireDidChangeDecorations = function (event) {
        this.emitter.fire(event);
    };
    GitDecorator.prototype.collectDecorators = function (tree, status) {
        var _this = this;
        var result = new Map();
        if (tree.root === undefined || !this.enabled) {
            return result;
        }
        var processNode = function (treeNode) {
            if (treeNode) {
                var id = treeNode.id;
                var marker = markers.get(id);
                if (marker) {
                    result.set(id, marker);
                }
            }
        };
        var markers = this.appendContainerChanges(tree, status.changes);
        processNode(tree.root);
        var itr = new tree_iterator_1.TreeNodeIterator(tree.root);
        var node = itr.next();
        while (!node.done) {
            processNode(node.value);
            node = itr.next();
        }
        return new Map(Array.from(result.values()).map(function (m) { return [m.uri, _this.toDecorator(m)]; }));
    };
    GitDecorator.prototype.appendContainerChanges = function (tree, changes) {
        var result = new Map();
        try {
            // We traverse up and assign the highest Git file change status the container directory.
            // Note, instead of stopping at the WS root, we traverse up the driver root.
            // We will filter them later based on the expansion state of the tree.
            for (var _a = __values(new Map(changes.map(function (m) { return [new uri_1.default(m.uri), m]; })).entries()), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = __read(_b.value, 2), uri = _c[0], change = _c[1];
                var uriString = uri.toString();
                result.set(uriString, change);
                var parentUri = uri.parent;
                while (parentUri && !parentUri.path.isRoot) {
                    var parentUriString = parentUri.toString();
                    var existing = result.get(parentUriString);
                    if (existing === undefined || this.compare(existing, change) < 0) {
                        result.set(parentUriString, {
                            uri: parentUriString,
                            status: change.status,
                            staged: !!change.staged
                        });
                        parentUri = parentUri.parent;
                    }
                    else {
                        parentUri = undefined;
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return result;
        var e_1, _d;
    };
    GitDecorator.prototype.toDecorator = function (change) {
        var data = git_model_1.GitFileStatus.toAbbreviation(change.status, change.staged);
        var color = this.getDecorationColor(change.status, change.staged);
        var tooltip = git_model_1.GitFileStatus.toString(change.status, change.staged);
        var decorationData = {
            tailDecorations: [
                {
                    data: data,
                    fontData: {
                        color: color
                    },
                    tooltip: tooltip
                }
            ]
        };
        if (this.showColors) {
            decorationData = __assign({}, decorationData, { fontData: {
                    color: color
                } });
        }
        return decorationData;
    };
    GitDecorator.prototype.compare = function (left, right) {
        return git_model_1.GitFileStatus.statusCompare(left.status, right.status);
    };
    GitDecorator.prototype.getDecorationColor = function (status, staged) {
        switch (status) {
            case git_model_1.GitFileStatus.New: return !!staged ? 'var(--theia-success-color0)' : 'var(--theia-disabled-color0)';
            case git_model_1.GitFileStatus.Renamed: // Fall through.
            case git_model_1.GitFileStatus.Copied: return ' var(--theia-disabled-color0)';
            case git_model_1.GitFileStatus.Modified: return 'var(--theia-brand-color0)';
            case git_model_1.GitFileStatus.Deleted: return 'var(--theia-warn-color0)';
            case git_model_1.GitFileStatus.Conflicted: return 'var(--theia-error-color0)';
        }
    };
    GitDecorator.prototype.handlePreferenceChange = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var refresh, preferenceName, newValue, enabled, showColors, repository, status_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        refresh = false;
                        preferenceName = event.preferenceName, newValue = event.newValue;
                        if (preferenceName === 'git.decorations.enabled') {
                            enabled = !!newValue;
                            if (this.enabled !== enabled) {
                                this.enabled = enabled;
                                refresh = true;
                            }
                        }
                        if (preferenceName === 'git.decorations.colors') {
                            showColors = !!newValue;
                            if (this.showColors !== showColors) {
                                this.showColors = showColors;
                                refresh = true;
                            }
                        }
                        repository = this.repositoryProvider.selectedRepository;
                        if (!(refresh && repository)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.git.status(repository)];
                    case 1:
                        status_1 = _a.sent();
                        this.fireDidChangeDecorations(function (tree) { return _this.collectDecorators(tree, status_1); });
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    GitDecorator = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(git_1.Git)),
        __param(1, inversify_1.inject(git_repository_provider_1.GitRepositoryProvider)),
        __param(2, inversify_1.inject(git_watcher_1.GitWatcher)),
        __param(3, inversify_1.inject(git_preferences_1.GitPreferences)),
        __param(4, inversify_1.inject(logger_1.ILogger)),
        __metadata("design:paramtypes", [Object, git_repository_provider_1.GitRepositoryProvider,
            git_watcher_1.GitWatcher, Object, Object])
    ], GitDecorator);
    return GitDecorator;
}());
exports.GitDecorator = GitDecorator;
//# sourceMappingURL=git-decorator.js.map