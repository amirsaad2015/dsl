import { ILogger } from '@theia/core';
import { Git, Repository, WorkingDirectoryStatus, GitFileChange, Branch, GitResult, CommitWithChanges } from '../common';
import { GitRepositoryManager } from './git-repository-manager';
import { GitLocator } from './git-locator/git-locator-protocol';
/**
 * Parsing and converting raw Git output into Git model instances.
 */
export declare abstract class OutputParser<T> {
    /** This is the `NUL` delimiter. Equals wih `%x00`. */
    static readonly LINE_DELIMITER: string;
    abstract parse(repositoryUri: string, raw: string, delimiter?: string): T[];
    abstract parse(repositoryUri: string, items: string[]): T[];
    abstract parse(repositoryUri: string, input: string | string[], delimiter?: string): T[];
    protected toUri(repositoryUri: string, pathSegment: string): string;
    protected split(input: string | string[], delimiter: string): string[];
}
/**
 * Status parser for converting raw Git `--name-status` output into file change objects.
 */
export declare class NameStatusParser extends OutputParser<GitFileChange> {
    parse(repositoryUri: string, input: string | string[], delimiter?: string): GitFileChange[];
}
/**
 * Built-in Git placeholders for tuning the `--format` option for `git diff` or `git log`.
 */
export declare enum CommitPlaceholders {
    HASH = "%H",
    SHORT_HASH = "%h",
    AUTHOR_EMAIL = "%aE",
    AUTHOR_NAME = "%aN",
    AUTHOR_DATE = "%ad",
    AUTHOR_RELATIVE_DATE = "%ar",
    SUBJECT = "%s",
    BODY = "%b",
}
/**
 * Parser for converting raw, Git commit details into `CommitWithChanges` instances.
 */
export declare class CommitDetailsParser extends OutputParser<CommitWithChanges> {
    static readonly ENTRY_DELIMITER: string;
    static readonly COMMIT_CHUNK_DELIMITER: string;
    static readonly DEFAULT_PLACEHOLDERS: CommitPlaceholders[];
    protected readonly nameStatusParser: NameStatusParser;
    parse(repositoryUri: string, input: string | string[], delimiter?: string): CommitWithChanges[];
    getFormat(...placeholders: CommitPlaceholders[]): string;
    protected toDate(epochSeconds: string | undefined): Date;
}
/**
 * `dugite-extra` based Git implementation.
 */
export declare class DugiteGit implements Git {
    protected readonly logger: ILogger;
    protected readonly locator: GitLocator;
    protected readonly manager: GitRepositoryManager;
    protected readonly nameStatusParser: NameStatusParser;
    protected readonly commitDetailsParser: CommitDetailsParser;
    dispose(): void;
    clone(remoteUrl: string, options: Git.Options.Clone): Promise<Repository>;
    repositories(workspaceRootUri: string, options: Git.Options.Repositories): Promise<Repository[]>;
    status(repository: Repository): Promise<WorkingDirectoryStatus>;
    add(repository: Repository, uri: string | string[]): Promise<void>;
    unstage(repository: Repository, uri: string | string[]): Promise<void>;
    branch(repository: Repository, options: {
        type: 'current';
    }): Promise<Branch | undefined>;
    branch(repository: Repository, options: {
        type: 'local' | 'remote' | 'all';
    }): Promise<Branch[]>;
    branch(repository: Repository, options: Git.Options.Branch.Create | Git.Options.Branch.Rename | Git.Options.Branch.Delete): Promise<void>;
    checkout(repository: Repository, options: Git.Options.Checkout.Branch | Git.Options.Checkout.WorkingTreeFile): Promise<void>;
    commit(repository: Repository, message?: string): Promise<void>;
    fetch(repository: Repository, options?: Git.Options.Fetch): Promise<void>;
    push(repository: Repository, options?: Git.Options.Push): Promise<void>;
    pull(repository: Repository, options?: Git.Options.Pull): Promise<void>;
    reset(repository: Repository, options: Git.Options.Reset): Promise<void>;
    merge(repository: Repository, options: Git.Options.Merge): Promise<void>;
    show(repository: Repository, uri: string, options?: Git.Options.Show): Promise<string>;
    remote(repository: Repository): Promise<string[]>;
    exec(repository: Repository, args: string[], options?: Git.Options.Execution): Promise<GitResult>;
    diff(repository: Repository, options?: Git.Options.Diff): Promise<GitFileChange[]>;
    log(repository: Repository, options?: Git.Options.Log): Promise<CommitWithChanges[]>;
    private getCommitish(options?);
    private resolveContainingPath(repositoryPath);
    private getRemotes(repositoryPath);
    private getDefaultRemote(repositoryPath, remote?);
    private getCurrentBranch(repositoryPath, localBranch?);
    private getResetMode(mode);
    private mapBranch(toMap);
    private mapTip(toMap);
    private mapCommitIdentity(toMap);
    private mapStatus(toMap, repository);
    private mapAheadBehind(toMap);
    private mapFileChanges(toMap, repositoryPath);
    private mapFileChange(toMap, repositoryPath);
    private mapFileStatus(toMap);
    private mapRange(toMap);
    private getFsPath(repository);
    private getUri(path);
    private fail(repository, message?);
}
