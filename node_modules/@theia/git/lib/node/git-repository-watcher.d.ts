/// <reference types="node" />
import { Disposable, Event, Emitter, ILogger, DisposableCollection } from "@theia/core";
import { Git, Repository, WorkingDirectoryStatus } from '../common';
import { GitStatusChangeEvent } from "../common/git-watcher";
export declare const GitRepositoryWatcherFactory: unique symbol;
export declare type GitRepositoryWatcherFactory = (options: GitRepositoryWatcherOptions) => GitRepositoryWatcher;
export declare class GitRepositoryWatcherOptions {
    readonly repository: Repository;
}
export declare class GitRepositoryWatcher implements Disposable {
    protected readonly onStatusChangedEmitter: Emitter<GitStatusChangeEvent>;
    readonly onStatusChanged: Event<GitStatusChangeEvent>;
    protected readonly git: Git;
    protected readonly logger: ILogger;
    protected readonly options: GitRepositoryWatcherOptions;
    protected readonly toDispose: DisposableCollection;
    watch(): void;
    sync(): void;
    dispose(): void;
    protected initial: boolean;
    protected watchTimer: NodeJS.Timer | undefined;
    protected schedule(initial?: boolean, delay?: number): void;
    protected clear(): void;
    protected status: WorkingDirectoryStatus | undefined;
    protected syncStatus(initial?: boolean): Promise<boolean>;
}
