"use strict";
/*
 * Copyright (C) 2017 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var Path = require("path");
var inversify_1 = require("inversify");
var git_1 = require("dugite-extra/lib/core/git");
var push_1 = require("dugite-extra/lib/command/push");
var pull_1 = require("dugite-extra/lib/command/pull");
var clone_1 = require("dugite-extra/lib/command/clone");
var fetch_1 = require("dugite-extra/lib/command/fetch");
var merge_1 = require("dugite-extra/lib/command/merge");
var file_uri_1 = require("@theia/core/lib/node/file-uri");
var status_1 = require("dugite-extra/lib/command/status");
var commit_1 = require("dugite-extra/lib/command/commit");
var stage_1 = require("dugite-extra/lib/command/stage");
var reset_1 = require("dugite-extra/lib/command/reset");
var show_1 = require("dugite-extra/lib/command/show");
var checkout_1 = require("dugite-extra/lib/command/checkout");
var branch_1 = require("dugite-extra/lib/command/branch");
var status_2 = require("dugite-extra/lib/model/status");
var core_1 = require("@theia/core");
var common_1 = require("../common");
var git_repository_manager_1 = require("./git-repository-manager");
var git_locator_protocol_1 = require("./git-locator/git-locator-protocol");
/**
 * Parsing and converting raw Git output into Git model instances.
 */
var OutputParser = /** @class */ (function () {
    function OutputParser() {
    }
    OutputParser.prototype.toUri = function (repositoryUri, pathSegment) {
        return file_uri_1.FileUri.create(Path.join(file_uri_1.FileUri.fsPath(repositoryUri), pathSegment)).toString();
    };
    OutputParser.prototype.split = function (input, delimiter) {
        return (Array.isArray(input) ? input : input.split(delimiter)).filter(function (item) { return item && item.length > 0; });
    };
    /** This is the `NUL` delimiter. Equals wih `%x00`. */
    OutputParser.LINE_DELIMITER = '\0';
    OutputParser = __decorate([
        inversify_1.injectable()
    ], OutputParser);
    return OutputParser;
}());
exports.OutputParser = OutputParser;
/**
 * Status parser for converting raw Git `--name-status` output into file change objects.
 */
var NameStatusParser = /** @class */ (function (_super) {
    __extends(NameStatusParser, _super);
    function NameStatusParser() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NameStatusParser.prototype.parse = function (repositoryUri, input, delimiter) {
        if (delimiter === void 0) { delimiter = OutputParser.LINE_DELIMITER; }
        var items = this.split(input, delimiter);
        var changes = [];
        var index = 0;
        while (index < items.length) {
            var rawStatus = items[index];
            var status_3 = common_1.GitUtils.mapStatus(rawStatus);
            if (common_1.GitUtils.isSimilarityStatus(rawStatus)) {
                var uri = this.toUri(repositoryUri, items[index + 2]);
                var oldUri = this.toUri(repositoryUri, items[index + 1]);
                changes.push({
                    status: status_3,
                    uri: uri,
                    oldUri: oldUri
                });
                index = index + 3;
            }
            else {
                var uri = this.toUri(repositoryUri, items[index + 1]);
                changes.push({
                    status: status_3,
                    uri: uri
                });
                index = index + 2;
            }
        }
        return changes;
    };
    NameStatusParser = __decorate([
        inversify_1.injectable()
    ], NameStatusParser);
    return NameStatusParser;
}(OutputParser));
exports.NameStatusParser = NameStatusParser;
/**
 * Built-in Git placeholders for tuning the `--format` option for `git diff` or `git log`.
 */
var CommitPlaceholders;
(function (CommitPlaceholders) {
    CommitPlaceholders["HASH"] = "%H";
    CommitPlaceholders["SHORT_HASH"] = "%h";
    CommitPlaceholders["AUTHOR_EMAIL"] = "%aE";
    CommitPlaceholders["AUTHOR_NAME"] = "%aN";
    CommitPlaceholders["AUTHOR_DATE"] = "%ad";
    CommitPlaceholders["AUTHOR_RELATIVE_DATE"] = "%ar";
    CommitPlaceholders["SUBJECT"] = "%s";
    CommitPlaceholders["BODY"] = "%b";
})(CommitPlaceholders = exports.CommitPlaceholders || (exports.CommitPlaceholders = {}));
/**
 * Parser for converting raw, Git commit details into `CommitWithChanges` instances.
 */
var CommitDetailsParser = /** @class */ (function (_super) {
    __extends(CommitDetailsParser, _super);
    function CommitDetailsParser() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CommitDetailsParser_1 = CommitDetailsParser;
    CommitDetailsParser.prototype.parse = function (repositoryUri, input, delimiter) {
        if (delimiter === void 0) { delimiter = CommitDetailsParser_1.COMMIT_CHUNK_DELIMITER; }
        var chunks = this.split(input, delimiter);
        var changes = [];
        try {
            for (var chunks_1 = __values(chunks), chunks_1_1 = chunks_1.next(); !chunks_1_1.done; chunks_1_1 = chunks_1.next()) {
                var chunk = chunks_1_1.value;
                var _a = __read(chunk.trim().split(CommitDetailsParser_1.ENTRY_DELIMITER), 8), sha = _a[0], email = _a[1], name_1 = _a[2], timestamp = _a[3], authorDateRelative = _a[4], summary = _a[5], body = _a[6], rawChanges = _a[7];
                var date = this.toDate(timestamp);
                var fileChanges = this.nameStatusParser.parse(repositoryUri, (rawChanges || '').trim());
                changes.push({
                    sha: sha,
                    author: {
                        date: date, email: email, name: name_1
                    },
                    authorDateRelative: authorDateRelative,
                    summary: summary,
                    body: body,
                    fileChanges: fileChanges
                });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (chunks_1_1 && !chunks_1_1.done && (_b = chunks_1.return)) _b.call(chunks_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return changes;
        var e_1, _b;
    };
    CommitDetailsParser.prototype.getFormat = function () {
        var placeholders = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            placeholders[_i] = arguments[_i];
        }
        return '%x02' + placeholders.join('%x01') + '%x01';
    };
    CommitDetailsParser.prototype.toDate = function (epochSeconds) {
        var date = new Date(0);
        if (epochSeconds) {
            date.setUTCSeconds(Number.parseInt(epochSeconds));
        }
        return date;
    };
    CommitDetailsParser.ENTRY_DELIMITER = '\x01';
    CommitDetailsParser.COMMIT_CHUNK_DELIMITER = '\x02';
    CommitDetailsParser.DEFAULT_PLACEHOLDERS = [
        CommitPlaceholders.HASH,
        CommitPlaceholders.AUTHOR_EMAIL,
        CommitPlaceholders.AUTHOR_NAME,
        CommitPlaceholders.AUTHOR_DATE,
        CommitPlaceholders.AUTHOR_RELATIVE_DATE,
        CommitPlaceholders.SUBJECT,
        CommitPlaceholders.BODY
    ];
    __decorate([
        inversify_1.inject(NameStatusParser),
        __metadata("design:type", NameStatusParser)
    ], CommitDetailsParser.prototype, "nameStatusParser", void 0);
    CommitDetailsParser = CommitDetailsParser_1 = __decorate([
        inversify_1.injectable()
    ], CommitDetailsParser);
    return CommitDetailsParser;
    var CommitDetailsParser_1;
}(OutputParser));
exports.CommitDetailsParser = CommitDetailsParser;
/**
 * `dugite-extra` based Git implementation.
 */
var DugiteGit = /** @class */ (function () {
    function DugiteGit() {
    }
    DugiteGit.prototype.dispose = function () {
        this.locator.dispose();
    };
    DugiteGit.prototype.clone = function (remoteUrl, options) {
        return __awaiter(this, void 0, void 0, function () {
            var localUri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        localUri = options.localUri;
                        return [4 /*yield*/, clone_1.clone(remoteUrl, this.getFsPath(localUri))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, { localUri: localUri }];
                }
            });
        });
    };
    DugiteGit.prototype.repositories = function (workspaceRootUri, options) {
        return __awaiter(this, void 0, void 0, function () {
            var workspaceRootPath, repositories, containingPath, maxCount, _a, _b, repositoryPath, e_2_1, e_2, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        workspaceRootPath = this.getFsPath(workspaceRootUri);
                        repositories = [];
                        return [4 /*yield*/, this.resolveContainingPath(workspaceRootPath)];
                    case 1:
                        containingPath = _d.sent();
                        if (containingPath) {
                            repositories.push({
                                localUri: this.getUri(containingPath)
                            });
                        }
                        maxCount = typeof options.maxCount === 'number' ? options.maxCount - repositories.length : undefined;
                        if (typeof maxCount === 'number' && maxCount <= 0) {
                            return [2 /*return*/, repositories];
                        }
                        _d.label = 2;
                    case 2:
                        _d.trys.push([2, 7, 8, 9]);
                        return [4 /*yield*/, this.locator.locate(workspaceRootPath, {
                                maxCount: maxCount
                            })];
                    case 3:
                        _a = __values.apply(void 0, [_d.sent()]), _b = _a.next();
                        _d.label = 4;
                    case 4:
                        if (!!_b.done) return [3 /*break*/, 6];
                        repositoryPath = _b.value;
                        if (containingPath !== repositoryPath) {
                            repositories.push({
                                localUri: this.getUri(repositoryPath)
                            });
                        }
                        _d.label = 5;
                    case 5:
                        _b = _a.next();
                        return [3 /*break*/, 4];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_2_1 = _d.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 9: return [2 /*return*/, repositories];
                }
            });
        });
    };
    DugiteGit.prototype.status = function (repository) {
        return __awaiter(this, void 0, void 0, function () {
            var repositoryPath, dugiteStatus;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        repositoryPath = this.getFsPath(repository);
                        return [4 /*yield*/, status_1.getStatus(repositoryPath)];
                    case 1:
                        dugiteStatus = _a.sent();
                        return [2 /*return*/, this.mapStatus(dugiteStatus, repository)];
                }
            });
        });
    };
    DugiteGit.prototype.add = function (repository, uri) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var paths;
            return __generator(this, function (_a) {
                paths = (Array.isArray(uri) ? uri : [uri]).map(file_uri_1.FileUri.fsPath);
                return [2 /*return*/, this.manager.run(repository, function () {
                        return stage_1.stage(_this.getFsPath(repository), paths);
                    })];
            });
        });
    };
    DugiteGit.prototype.unstage = function (repository, uri) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var paths;
            return __generator(this, function (_a) {
                paths = (Array.isArray(uri) ? uri : [uri]).map(file_uri_1.FileUri.fsPath);
                return [2 /*return*/, this.manager.run(repository, function () {
                        return stage_1.unstage(_this.getFsPath(repository), paths);
                    })];
            });
        });
    };
    // tslint:disable-next-line:no-any
    DugiteGit.prototype.branch = function (repository, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var repositoryPath, currentBranch, branches;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        repositoryPath = this.getFsPath(repository);
                        if (!common_1.GitUtils.isBranchList(options)) return [3 /*break*/, 4];
                        if (!(options.type === 'current')) return [3 /*break*/, 2];
                        return [4 /*yield*/, branch_1.listBranch(repositoryPath, options.type)];
                    case 1:
                        currentBranch = _a.sent();
                        return [2 /*return*/, currentBranch ? this.mapBranch(currentBranch) : undefined];
                    case 2: return [4 /*yield*/, branch_1.listBranch(repositoryPath, options.type)];
                    case 3:
                        branches = _a.sent();
                        return [2 /*return*/, Promise.all(branches.map(function (branch) { return _this.mapBranch(branch); }))];
                    case 4: return [2 /*return*/, this.manager.run(repository, function () {
                            if (common_1.GitUtils.isBranchCreate(options)) {
                                return branch_1.createBranch(repositoryPath, options.toCreate, { startPoint: options.startPoint });
                            }
                            if (common_1.GitUtils.isBranchRename(options)) {
                                return branch_1.renameBranch(repositoryPath, options.newName, options.newName, { force: !!options.force });
                            }
                            if (common_1.GitUtils.isBranchDelete(options)) {
                                return branch_1.deleteBranch(repositoryPath, options.toDelete, { force: !!options.force, remote: !!options.remote });
                            }
                            return _this.fail(repository, "Unexpected git branch options: " + options + ".");
                        })];
                }
            });
        });
    };
    DugiteGit.prototype.checkout = function (repository, options) {
        var _this = this;
        return this.manager.run(repository, function () {
            var repositoryPath = _this.getFsPath(repository);
            if (common_1.GitUtils.isBranchCheckout(options)) {
                return checkout_1.checkoutBranch(repositoryPath, options.branch);
            }
            if (common_1.GitUtils.isWorkingTreeFileCheckout(options)) {
                var paths = (Array.isArray(options.paths) ? options.paths : [options.paths]).map(file_uri_1.FileUri.fsPath);
                return checkout_1.checkoutPaths(repositoryPath, paths);
            }
            return _this.fail(repository, "Unexpected git checkout options: " + options + ".");
        });
    };
    DugiteGit.prototype.commit = function (repository, message) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.manager.run(repository, function () {
                        return commit_1.createCommit(_this.getFsPath(repository), message || '');
                    })];
            });
        });
    };
    DugiteGit.prototype.fetch = function (repository, options) {
        return __awaiter(this, void 0, void 0, function () {
            var repositoryPath, r;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        repositoryPath = this.getFsPath(repository);
                        return [4 /*yield*/, this.getDefaultRemote(repositoryPath, options ? options.remote : undefined)];
                    case 1:
                        r = _a.sent();
                        if (r === undefined) {
                            this.fail(repository, "No remote repository specified. Please, specify either a URL or a remote name from which new revisions should be fetched.");
                        }
                        return [2 /*return*/, this.manager.run(repository, function () {
                                return fetch_1.fetch(repositoryPath, r);
                            })];
                }
            });
        });
    };
    DugiteGit.prototype.push = function (repository, options) {
        return __awaiter(this, void 0, void 0, function () {
            var repositoryPath, r, localBranch, localBranchName, remoteBranch;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        repositoryPath = this.getFsPath(repository);
                        return [4 /*yield*/, this.getDefaultRemote(repositoryPath, options ? options.remote : undefined)];
                    case 1:
                        r = _a.sent();
                        if (r === undefined) {
                            this.fail(repository, "No configured push destination.");
                        }
                        return [4 /*yield*/, this.getCurrentBranch(repositoryPath, options ? options.localBranch : undefined)];
                    case 2:
                        localBranch = _a.sent();
                        localBranchName = typeof localBranch === 'string' ? localBranch : localBranch.name;
                        remoteBranch = options ? options.remoteBranch : undefined;
                        return [2 /*return*/, this.manager.run(repository, function () {
                                return push_1.push(repositoryPath, r, localBranchName, remoteBranch);
                            })];
                }
            });
        });
    };
    DugiteGit.prototype.pull = function (repository, options) {
        return __awaiter(this, void 0, void 0, function () {
            var repositoryPath, r;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        repositoryPath = this.getFsPath(repository);
                        return [4 /*yield*/, this.getDefaultRemote(repositoryPath, options ? options.remote : undefined)];
                    case 1:
                        r = _a.sent();
                        if (r === undefined) {
                            this.fail(repository, "No remote repository specified. Please, specify either a URL or a remote name from which new revisions should be fetched.");
                        }
                        return [2 /*return*/, this.manager.run(repository, function () {
                                if (options && options.branch) {
                                    return pull_1.pull(repositoryPath, r, options.branch);
                                }
                                return pull_1.pull(repositoryPath, r);
                            })];
                }
            });
        });
    };
    DugiteGit.prototype.reset = function (repository, options) {
        var repositoryPath = this.getFsPath(repository);
        var mode = this.getResetMode(options.mode);
        return this.manager.run(repository, function () {
            return reset_1.reset(repositoryPath, mode, options.mode ? options.mode : 'HEAD');
        });
    };
    DugiteGit.prototype.merge = function (repository, options) {
        var repositoryPath = this.getFsPath(repository);
        return this.manager.run(repository, function () {
            return merge_1.merge(repositoryPath, options.branch);
        });
    };
    DugiteGit.prototype.show = function (repository, uri, options) {
        return __awaiter(this, void 0, void 0, function () {
            var encoding, commitish, repositoryPath, path;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        encoding = options ? options.encoding || 'utf8' : 'utf8';
                        commitish = this.getCommitish(options);
                        repositoryPath = this.getFsPath(repository);
                        path = this.getFsPath(uri);
                        if (!(encoding === 'binary')) return [3 /*break*/, 2];
                        return [4 /*yield*/, show_1.getBlobContents(repositoryPath, commitish, path)];
                    case 1: return [2 /*return*/, (_a.sent()).toString()];
                    case 2: return [4 /*yield*/, show_1.getTextContents(repositoryPath, commitish, path)];
                    case 3: return [2 /*return*/, (_a.sent()).toString()];
                }
            });
        });
    };
    DugiteGit.prototype.remote = function (repository) {
        return __awaiter(this, void 0, void 0, function () {
            var repositoryPath;
            return __generator(this, function (_a) {
                repositoryPath = this.getFsPath(repository);
                return [2 /*return*/, this.getRemotes(repositoryPath)];
            });
        });
    };
    DugiteGit.prototype.exec = function (repository, args, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var repositoryPath;
            return __generator(this, function (_a) {
                repositoryPath = this.getFsPath(repository);
                return [2 /*return*/, this.manager.run(repository, function () { return __awaiter(_this, void 0, void 0, function () {
                        var name;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    name = options && options.name ? options.name : '';
                                    return [4 /*yield*/, git_1.git(args, repositoryPath, name, options)];
                                case 1: return [2 /*return*/, (_a.sent())];
                            }
                        });
                    }); })];
            });
        });
    };
    DugiteGit.prototype.diff = function (repository, options) {
        return __awaiter(this, void 0, void 0, function () {
            var args, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = ['diff', '--name-status', '-C', '-M', '-z'];
                        args.push(this.mapRange((options || {}).range));
                        if (options && options.uri) {
                            args.push.apply(args, __spread(['--', Path.relative(this.getFsPath(repository), this.getFsPath(options.uri))]));
                        }
                        return [4 /*yield*/, this.exec(repository, args)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, this.nameStatusParser.parse(repository.localUri, result.stdout.trim())];
                }
            });
        });
    };
    DugiteGit.prototype.log = function (repository, options) {
        return __awaiter(this, void 0, void 0, function () {
            var args, range, maxCount, placeholders, file, result, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        args = ['log'];
                        if (options && options.branch) {
                            args.push(options.branch);
                        }
                        range = this.mapRange((options || {}).range);
                        args.push.apply(args, __spread([range, '-C', '-M', '-m']));
                        maxCount = options && options.maxCount ? options.maxCount : 0;
                        if (Number.isInteger(maxCount) && maxCount > 0) {
                            args.push.apply(args, __spread(['-n', "" + maxCount]));
                        }
                        placeholders = options && options.shortSha ? __spread([CommitPlaceholders.SHORT_HASH], CommitDetailsParser.DEFAULT_PLACEHOLDERS.slice(1)) : CommitDetailsParser.DEFAULT_PLACEHOLDERS;
                        args.push.apply(args, __spread(['--name-status', '--date=unix', "--format=" + (_a = this.commitDetailsParser).getFormat.apply(_a, __spread(placeholders)), '-z', '--']));
                        if (options && options.uri) {
                            file = Path.relative(this.getFsPath(repository), this.getFsPath(options.uri));
                            args.push.apply(args, __spread([file]));
                        }
                        return [4 /*yield*/, this.exec(repository, args)];
                    case 1:
                        result = _b.sent();
                        return [2 /*return*/, this.commitDetailsParser.parse(repository.localUri, result.stdout.trim()
                                .split(CommitDetailsParser.COMMIT_CHUNK_DELIMITER)
                                .filter(function (item) { return item && item.length > 0; }))];
                }
            });
        });
    };
    DugiteGit.prototype.getCommitish = function (options) {
        if (options && options.commitish) {
            return 'index' === options.commitish ? '' : options.commitish;
        }
        return '';
    };
    // TODO: akitta what about symlinks? What if the workspace root is a symlink?
    // Maybe, we should use `--show-cdup` here instead of `--show-toplevel` because `show-toplevel` dereferences symlinks.
    DugiteGit.prototype.resolveContainingPath = function (repositoryPath) {
        return __awaiter(this, void 0, void 0, function () {
            var options, result, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = { successExitCodes: new Set([0, 128]) };
                        return [4 /*yield*/, git_1.git(['rev-parse', '--show-toplevel'], repositoryPath, 'rev-parse', options)];
                    case 1:
                        result = _a.sent();
                        out = result.stdout;
                        if (out && out.length !== 0) {
                            try {
                                return [2 /*return*/, fs.realpathSync(out.trim())];
                            }
                            catch (e) {
                                this.logger.error(e);
                                return [2 /*return*/, undefined];
                            }
                        }
                        return [2 /*return*/, undefined];
                }
            });
        });
    };
    DugiteGit.prototype.getRemotes = function (repositoryPath) {
        return __awaiter(this, void 0, void 0, function () {
            var result, out;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, git_1.git(['remote'], repositoryPath, 'remote')];
                    case 1:
                        result = _a.sent();
                        out = result.stdout || '';
                        return [2 /*return*/, out.trim().match(/\S+/g) || []];
                }
            });
        });
    };
    DugiteGit.prototype.getDefaultRemote = function (repositoryPath, remote) {
        return __awaiter(this, void 0, void 0, function () {
            var remotes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(remote === undefined)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getRemotes(repositoryPath)];
                    case 1:
                        remotes = _a.sent();
                        return [2 /*return*/, remotes.shift()];
                    case 2: return [2 /*return*/, remote];
                }
            });
        });
    };
    DugiteGit.prototype.getCurrentBranch = function (repositoryPath, localBranch) {
        return __awaiter(this, void 0, void 0, function () {
            var branch;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (localBranch !== undefined) {
                            return [2 /*return*/, localBranch];
                        }
                        return [4 /*yield*/, branch_1.listBranch(repositoryPath, 'current')];
                    case 1:
                        branch = _a.sent();
                        if (branch === undefined) {
                            return [2 /*return*/, this.fail(repositoryPath, "No current branch.")];
                        }
                        if (Array.isArray(branch)) {
                            return [2 /*return*/, this.fail(repositoryPath, "Implementation error. Listing branch with the 'current' flag must return with single value. Was: " + branch)];
                        }
                        return [2 /*return*/, this.mapBranch(branch)];
                }
            });
        });
    };
    DugiteGit.prototype.getResetMode = function (mode) {
        switch (mode) {
            case 'hard': return 0 /* Hard */;
            case 'soft': return 1 /* Soft */;
            case 'mixed': return 2 /* Mixed */;
            default: throw new Error("Unexpected Git reset mode: " + mode + ".");
        }
    };
    DugiteGit.prototype.mapBranch = function (toMap) {
        return __awaiter(this, void 0, void 0, function () {
            var tip;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.mapTip(toMap.tip)];
                    case 1:
                        tip = _a.sent();
                        return [2 /*return*/, {
                                name: toMap.name,
                                nameWithoutRemote: toMap.nameWithoutRemote,
                                remote: toMap.remote,
                                type: toMap.type,
                                upstream: toMap.upstream,
                                upstreamWithoutRemote: toMap.upstreamWithoutRemote,
                                tip: tip
                            }];
                }
            });
        });
    };
    DugiteGit.prototype.mapTip = function (toMap) {
        return __awaiter(this, void 0, void 0, function () {
            var author;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.mapCommitIdentity(toMap.author)];
                    case 1:
                        author = _a.sent();
                        return [2 /*return*/, {
                                author: author,
                                body: toMap.body,
                                parentSHAs: __spread(toMap.parentSHAs),
                                sha: toMap.sha,
                                summary: toMap.summary
                            }];
                }
            });
        });
    };
    DugiteGit.prototype.mapCommitIdentity = function (toMap) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, {
                        date: toMap.date,
                        email: toMap.email,
                        name: toMap.name,
                        tzOffset: toMap.tzOffset
                    }];
            });
        });
    };
    DugiteGit.prototype.mapStatus = function (toMap, repository) {
        return __awaiter(this, void 0, void 0, function () {
            var repositoryPath, aheadBehindPromise, changesPromise, aheadBehind, changes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        repositoryPath = this.getFsPath(repository);
                        aheadBehindPromise = this.mapAheadBehind(toMap.branchAheadBehind);
                        changesPromise = this.mapFileChanges(toMap.workingDirectory, repositoryPath);
                        return [4 /*yield*/, aheadBehindPromise];
                    case 1:
                        aheadBehind = _a.sent();
                        return [4 /*yield*/, changesPromise];
                    case 2:
                        changes = _a.sent();
                        return [2 /*return*/, {
                                exists: toMap.exists,
                                branch: toMap.currentBranch,
                                upstreamBranch: toMap.currentUpstreamBranch,
                                aheadBehind: aheadBehind,
                                changes: changes,
                                currentHead: toMap.currentTip
                            }];
                }
            });
        });
    };
    DugiteGit.prototype.mapAheadBehind = function (toMap) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, toMap ? __assign({}, toMap) : undefined];
            });
        });
    };
    DugiteGit.prototype.mapFileChanges = function (toMap, repositoryPath) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.all(toMap.files.map(function (file) { return _this.mapFileChange(file, repositoryPath); }))];
            });
        });
    };
    DugiteGit.prototype.mapFileChange = function (toMap, repositoryPath) {
        return __awaiter(this, void 0, void 0, function () {
            var uriPromise, statusPromise, oldUriPromise, uri, status, oldUri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        uriPromise = this.getUri(Path.join(repositoryPath, toMap.path));
                        statusPromise = this.mapFileStatus(toMap.status);
                        oldUriPromise = toMap.oldPath ? this.getUri(Path.join(repositoryPath, toMap.oldPath)) : undefined;
                        return [4 /*yield*/, uriPromise];
                    case 1:
                        uri = _a.sent();
                        return [4 /*yield*/, statusPromise];
                    case 2:
                        status = _a.sent();
                        return [4 /*yield*/, oldUriPromise];
                    case 3:
                        oldUri = _a.sent();
                        return [2 /*return*/, {
                                uri: uri,
                                status: status,
                                oldUri: oldUri,
                                staged: toMap.staged
                            }];
                }
            });
        });
    };
    DugiteGit.prototype.mapFileStatus = function (toMap) {
        switch (toMap) {
            case status_2.AppFileStatus.Conflicted: return common_1.GitFileStatus.Conflicted;
            case status_2.AppFileStatus.Copied: return common_1.GitFileStatus.Copied;
            case status_2.AppFileStatus.Deleted: return common_1.GitFileStatus.Deleted;
            case status_2.AppFileStatus.Modified: return common_1.GitFileStatus.Modified;
            case status_2.AppFileStatus.New: return common_1.GitFileStatus.New;
            case status_2.AppFileStatus.Renamed: return common_1.GitFileStatus.Renamed;
            default: throw new Error("Unexpected application file status: " + toMap);
        }
    };
    DugiteGit.prototype.mapRange = function (toMap) {
        var range = 'HEAD';
        if (toMap) {
            if (typeof toMap.fromRevision === 'number') {
                var toRevision = toMap.toRevision || 'HEAD';
                range = toRevision + "~" + toMap.fromRevision + ".." + toRevision;
            }
            else if (typeof toMap.fromRevision === 'string') {
                range = "" + toMap.fromRevision + (toMap.toRevision ? '..' + toMap.toRevision : '');
            }
            else if (toMap.toRevision) {
                range = toMap.toRevision;
            }
        }
        return range;
    };
    DugiteGit.prototype.getFsPath = function (repository) {
        var uri = typeof repository === 'string' ? repository : repository.localUri;
        return file_uri_1.FileUri.fsPath(uri);
    };
    DugiteGit.prototype.getUri = function (path) {
        return file_uri_1.FileUri.create(path).toString();
    };
    DugiteGit.prototype.fail = function (repository, message) {
        var p = typeof repository === 'string' ? repository : repository.localUri;
        var m = message ? message + " " : '';
        throw new Error(m + "[" + p + "]");
    };
    __decorate([
        inversify_1.inject(core_1.ILogger),
        __metadata("design:type", Object)
    ], DugiteGit.prototype, "logger", void 0);
    __decorate([
        inversify_1.inject(git_locator_protocol_1.GitLocator),
        __metadata("design:type", Object)
    ], DugiteGit.prototype, "locator", void 0);
    __decorate([
        inversify_1.inject(git_repository_manager_1.GitRepositoryManager),
        __metadata("design:type", git_repository_manager_1.GitRepositoryManager)
    ], DugiteGit.prototype, "manager", void 0);
    __decorate([
        inversify_1.inject(NameStatusParser),
        __metadata("design:type", NameStatusParser)
    ], DugiteGit.prototype, "nameStatusParser", void 0);
    __decorate([
        inversify_1.inject(CommitDetailsParser),
        __metadata("design:type", CommitDetailsParser)
    ], DugiteGit.prototype, "commitDetailsParser", void 0);
    DugiteGit = __decorate([
        inversify_1.injectable()
    ], DugiteGit);
    return DugiteGit;
}());
exports.DugiteGit = DugiteGit;
//# sourceMappingURL=dugite-git.js.map