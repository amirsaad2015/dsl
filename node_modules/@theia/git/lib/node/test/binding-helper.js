"use strict";
/*
 * Copyright (C) 2018 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var dugite_git_1 = require("../dugite-git");
var git_backend_module_1 = require("../git-backend-module");
var logger_backend_module_1 = require("@theia/core/lib/node/logger-backend-module");
var logger_protocol_1 = require("@theia/core/lib/common/logger-protocol");
var console_logger_server_1 = require("@theia/core/lib/common/console-logger-server");
var no_sync_repository_manager_1 = require(".././test/no-sync-repository-manager");
// tslint:disable-next-line:no-any
function initializeBindings() {
    var container = new inversify_1.Container();
    var bind = container.bind.bind(container);
    logger_backend_module_1.bindLogger(bind);
    container.rebind(logger_protocol_1.ILoggerServer).to(console_logger_server_1.ConsoleLoggerServer).inSingletonScope();
    return { container: container, bind: bind };
}
exports.initializeBindings = initializeBindings;
function createGit(bindingOptions) {
    if (bindingOptions === void 0) { bindingOptions = git_backend_module_1.GitBindingOptions.Default; }
    return __awaiter(this, void 0, void 0, function () {
        var _a, container, bind;
        return __generator(this, function (_b) {
            _a = initializeBindings(), container = _a.container, bind = _a.bind;
            git_backend_module_1.bindGit(bind, {
                bindManager: function (binding) {
                    return binding.to(no_sync_repository_manager_1.NoSyncRepositoryManager).inSingletonScope();
                }
            });
            return [2 /*return*/, container.get(dugite_git_1.DugiteGit)];
        });
    });
}
exports.createGit = createGit;
//# sourceMappingURL=binding-helper.js.map