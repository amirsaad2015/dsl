"use strict";
/*
 * Copyright (C) 2018 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Test if `otherRange` is in `range`. If the ranges are equal, will return true.
 */
function containsRange(range, otherRange) {
    if (otherRange.start.line < range.start.line || otherRange.end.line < range.start.line) {
        return false;
    }
    if (otherRange.start.line > range.end.line || otherRange.end.line > range.end.line) {
        return false;
    }
    if (otherRange.start.line === range.start.line && otherRange.start.character < range.start.character) {
        return false;
    }
    if (otherRange.end.line === range.end.line && otherRange.end.character > range.end.character) {
        return false;
    }
    return true;
}
exports.containsRange = containsRange;
function sameStart(a, b) {
    var pos1 = a.start;
    var pos2 = b.start;
    return pos1.line === pos2.line
        && pos1.character === pos2.character;
}
function filterSame(locations, definition) {
    return locations.filter(function (candidate) { return candidate.uri !== definition.uri
        || !sameStart(candidate.range, definition.range); });
}
exports.filterSame = filterSame;
function filterUnique(locations) {
    var result = [];
    var set = new Set();
    try {
        for (var locations_1 = __values(locations), locations_1_1 = locations_1.next(); !locations_1_1.done; locations_1_1 = locations_1.next()) {
            var location_1 = locations_1_1.value;
            var json = JSON.stringify(location_1);
            if (!set.has(json)) {
                set.add(json);
                result.push(location_1);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (locations_1_1 && !locations_1_1.done && (_a = locations_1.return)) _a.call(locations_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return result;
    var e_1, _a;
}
exports.filterUnique = filterUnique;
function startsAfter(a, b) {
    if (a.start.line > b.start.line) {
        return true;
    }
    if (a.start.line === b.start.line) {
        if (a.start.character > b.start.character) {
            return true;
        }
        if (a.start.character === b.start.character) {
            if (a.end.line > b.end.line) {
                return true;
            }
        }
    }
    return false;
}
exports.startsAfter = startsAfter;
function isSame(a, b) {
    return a.uri === b.uri
        && a.range.start.line === b.range.start.line
        && a.range.end.line === b.range.end.line
        && a.range.start.character === b.range.start.character
        && a.range.end.character === b.range.end.character;
}
exports.isSame = isSame;
//# sourceMappingURL=utils.js.map