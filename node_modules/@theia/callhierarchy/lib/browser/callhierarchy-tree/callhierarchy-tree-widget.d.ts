import { Message } from "@phosphor/messaging";
import { ContextMenuRenderer, TreeWidget, NodeProps, TreeProps, ITreeNode, ITreeModel } from "@theia/core/lib/browser";
import { ElementAttrs, h } from "@phosphor/virtualdom";
import { LabelProvider } from "@theia/core/lib/browser/label-provider";
import { CallHierarchyTreeModel } from "./callhierarchy-tree-model";
import { Definition, Caller } from "../callhierarchy";
import { Location } from 'vscode-languageserver-types';
import { EditorManager } from "@theia/editor/lib/browser";
export declare const HIERARCHY_TREE_CLASS = "theia-CallHierarchyTree";
export declare const DEFINITION_NODE_CLASS = "theia-CallHierarchyTreeNode";
export declare const DEFINITION_ICON_CLASS = "theia-CallHierarchyTreeNodeIcon";
export declare class CallHierarchyTreeWidget extends TreeWidget {
    readonly props: TreeProps;
    readonly model: CallHierarchyTreeModel;
    protected readonly labelProvider: LabelProvider;
    readonly editorManager: EditorManager;
    constructor(props: TreeProps, model: CallHierarchyTreeModel, contextMenuRenderer: ContextMenuRenderer, labelProvider: LabelProvider, editorManager: EditorManager);
    initializeModel(selection: Location | undefined, languageId: string | undefined): void;
    protected createNodeClassNames(node: ITreeNode, props: NodeProps): string[];
    protected onUpdateRequest(msg: Message): void;
    protected createNodeAttributes(node: ITreeNode, props: NodeProps): ElementAttrs;
    protected renderTree(model: ITreeModel): h.Child;
    protected renderCaption(node: ITreeNode, props: NodeProps): h.Child;
    protected decorateDefinitionCaption(definition: Definition): h.Child;
    protected decorateCallerCaption(caller: Caller): h.Child;
    protected toIconClass(symbolKind: number): "method" | "file" | "module" | "namespace" | "package" | "class" | "property" | "field" | "constructor" | "enum" | "interface" | "function" | "variable" | "constant" | "string" | "number" | "boolean" | "array" | "unknown";
    private openEditor(node, keepFocus);
    storeState(): object;
    restoreState(oldState: object): void;
}
