import { ITreeNode, ICompositeTreeNode, ISelectableTreeNode, IExpandableTreeNode, Tree } from "@theia/core/lib/browser";
import { Definition, Caller } from '../callhierarchy';
import { CallHierarchyService } from '../callhierarchy-service';
export declare class CallHierarchyTree extends Tree {
    protected _callHierarchyService: CallHierarchyService | undefined;
    callHierarchyService: CallHierarchyService | undefined;
    resolveChildren(parent: ICompositeTreeNode): Promise<ITreeNode[]>;
    protected toNodes(callers: Caller[], parent: ICompositeTreeNode): ITreeNode[];
    protected toNode(caller: Caller, parent: ICompositeTreeNode | undefined): ITreeNode;
}
export interface DefinitionNode extends ISelectableTreeNode, IExpandableTreeNode {
    definition: Definition;
}
export declare namespace DefinitionNode {
    function is(node: ITreeNode | undefined): node is DefinitionNode;
    function create(definition: Definition, parent: ITreeNode | undefined): DefinitionNode;
}
export interface CallerNode extends ISelectableTreeNode, IExpandableTreeNode {
    caller: Caller;
}
export declare namespace CallerNode {
    function is(node: ITreeNode | undefined): node is CallerNode;
    function create(caller: Caller, parent: ITreeNode | undefined): CallerNode;
}
