"use strict";
/*
 * Copyright (C) 2018 Ericsson and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-unused-expression
var jsdom_1 = require("@theia/core/lib/browser/test/jsdom");
var disableJSDOM = jsdom_1.enableJSDOM();
var inversify_1 = require("inversify");
var chai = require("chai");
var common_1 = require("@theia/core/lib/common");
var preferences_1 = require("@theia/core/lib/browser/preferences");
var _1 = require("@theia/filesystem/lib/common/");
var filesystem_watcher_1 = require("@theia/filesystem/lib/browser/filesystem-watcher");
var filesystem_watcher_protocol_1 = require("@theia/filesystem/lib/common/filesystem-watcher-protocol");
var filesystem_preferences_1 = require("@theia/filesystem/lib/browser/filesystem-preferences");
var logger_1 = require("@theia/core/lib/common/logger");
var user_preference_provider_1 = require("./user-preference-provider");
var workspace_preference_provider_1 = require("./workspace-preference-provider");
var resource_1 = require("@theia/core/lib/common/resource");
var _2 = require("@theia/workspace/lib/common/");
var window_service_1 = require("@theia/core/lib/browser/window/window-service");
var test_1 = require("@theia/filesystem/lib/common/test");
var mock_logger_1 = require("@theia/core/lib/common/test/mock-logger");
var mock_resource_provider_1 = require("@theia/core/lib/common/test/mock-resource-provider");
var mock_workspace_server_1 = require("@theia/workspace/lib/common/test/mock-workspace-server");
var mock_window_service_1 = require("@theia/core/lib/browser/window/test/mock-window-service");
var workspace_service_1 = require("@theia/workspace/lib/browser/workspace-service");
var sinon = require("sinon");
disableJSDOM();
var expect = chai.expect;
var testContainer;
var prefService;
var mockUserPreferenceEmitter = new common_1.Emitter();
var mockWorkspacePreferenceEmitter = new common_1.Emitter();
before(function () { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        testContainer = new inversify_1.Container();
        testContainer.bind(user_preference_provider_1.UserPreferenceProvider).toSelf().inSingletonScope();
        testContainer.bind(workspace_preference_provider_1.WorkspacePreferenceProvider).toSelf().inSingletonScope();
        testContainer.bind(preferences_1.PreferenceProviders).toFactory(function (ctx) { return function () {
            var userProvider = ctx.container.get(user_preference_provider_1.UserPreferenceProvider);
            var workspaceProvider = ctx.container.get(workspace_preference_provider_1.WorkspacePreferenceProvider);
            sinon.stub(userProvider, 'onDidPreferencesChanged').get(function () {
                return mockUserPreferenceEmitter.event;
            });
            sinon.stub(workspaceProvider, 'onDidPreferencesChanged').get(function () {
                return mockWorkspacePreferenceEmitter.event;
            });
            return [userProvider, workspaceProvider];
        }; });
        testContainer.bind(preferences_1.PreferenceServiceImpl).toSelf().inSingletonScope();
        testContainer.bind(preferences_1.PreferenceService).toDynamicValue(function (ctx) {
            return ctx.container.get(preferences_1.PreferenceServiceImpl);
        }).inSingletonScope();
        testContainer.bind(filesystem_preferences_1.FileSystemPreferences).toDynamicValue(function (ctx) {
            var preferences = ctx.container.get(preferences_1.PreferenceService);
            return filesystem_preferences_1.createFileSystemPreferences(preferences);
        }).inSingletonScope();
        /* Workspace mocks and bindings */
        testContainer.bind(_2.WorkspaceServer).to(mock_workspace_server_1.MockWorkspaceServer);
        testContainer.bind(workspace_service_1.WorkspaceService).toSelf();
        /* Window mocks and bindings*/
        testContainer.bind(window_service_1.WindowService).to(mock_window_service_1.MockWindowService);
        /* Resource mocks and bindings */
        testContainer.bind(mock_resource_provider_1.MockResourceProvider).toSelf().inSingletonScope();
        testContainer.bind(resource_1.ResourceProvider).toProvider(function (context) {
            return function (uri) { return context.container.get(mock_resource_provider_1.MockResourceProvider).get(uri); };
        });
        /* FS mocks and bindings */
        testContainer.bind(filesystem_watcher_protocol_1.FileSystemWatcherServer).to(test_1.MockFilesystemWatcherServer);
        testContainer.bind(filesystem_watcher_1.FileSystemWatcher).toSelf().onActivation(function (_, watcher) {
            return watcher;
        });
        testContainer.bind(_1.FileSystem).to(test_1.MockFilesystem);
        /* Logger mock */
        testContainer.bind(logger_1.ILogger).to(mock_logger_1.MockLogger);
        return [2 /*return*/];
    });
}); });
describe('Preference Service', function () {
    before(function () {
        disableJSDOM = jsdom_1.enableJSDOM();
    });
    after(function () {
        disableJSDOM();
    });
    beforeEach(function () {
        prefService = testContainer.get(preferences_1.PreferenceService);
        var impl = testContainer.get(preferences_1.PreferenceServiceImpl);
        impl.onStart();
    });
    afterEach(function () {
        prefService.dispose();
    });
    it('Should get notified if a provider gets a change', function (done) {
        var prefValue = true;
        prefService.onPreferenceChanged(function (pref) {
            try {
                expect(pref.preferenceName).eq('testPref');
            }
            catch (e) {
                stubGet.restore();
                done(e);
                return;
            }
            expect(pref.newValue).eq(prefValue);
            stubGet.restore();
            done();
        });
        var userProvider = testContainer.get(user_preference_provider_1.UserPreferenceProvider);
        var stubGet = sinon.stub(userProvider, 'getPreferences').returns({
            'testPref': prefValue
        });
        mockUserPreferenceEmitter.fire(undefined);
    }).timeout(2000);
    it('Should return the preference from the more specific scope (user > workspace)', function () {
        var userProvider = testContainer.get(user_preference_provider_1.UserPreferenceProvider);
        var workspaceProvider = testContainer.get(workspace_preference_provider_1.WorkspacePreferenceProvider);
        var stubUser = sinon.stub(userProvider, 'getPreferences').returns({
            'test.boolean': true,
            'test.number': 1
        });
        var stubWorkspace = sinon.stub(workspaceProvider, 'getPreferences').returns({
            'test.boolean': false,
            'test.number': 0
        });
        mockUserPreferenceEmitter.fire(undefined);
        var value = prefService.get('test.boolean');
        expect(value).to.be.false;
        value = prefService.get('test.number');
        expect(value).equals(0);
        [stubUser, stubWorkspace].forEach(function (stub) {
            stub.restore();
        });
    });
    it('Should return the preference from the less specific scope if the value is removed from the more specific one', function () {
        var userProvider = testContainer.get(user_preference_provider_1.UserPreferenceProvider);
        var workspaceProvider = testContainer.get(workspace_preference_provider_1.WorkspacePreferenceProvider);
        var stubUser = sinon.stub(userProvider, 'getPreferences').returns({
            'test.boolean': true,
            'test.number': 1
        });
        var stubWorkspace = sinon.stub(workspaceProvider, 'getPreferences').returns({
            'test.boolean': false,
            'test.number': 0
        });
        mockUserPreferenceEmitter.fire(undefined);
        var value = prefService.get('test.boolean');
        expect(value).to.be.false;
        stubWorkspace.restore();
        mockUserPreferenceEmitter.fire(undefined);
        value = prefService.get('test.boolean');
        expect(value).to.be.true;
        stubUser.restore();
    });
    it('Should throw a TypeError if the preference (reference object) is modified', function () {
        var userProvider = testContainer.get(user_preference_provider_1.UserPreferenceProvider);
        var stubUser = sinon.stub(userProvider, 'getPreferences').returns({
            'test.immutable': [
                'test', 'test', 'test'
            ]
        });
        mockUserPreferenceEmitter.fire(undefined);
        var immutablePref = prefService.get('test.immutable');
        expect(immutablePref).to.not.be.undefined;
        if (immutablePref !== undefined) {
            expect(function () {
                immutablePref.push('fails');
            }).to.throw(TypeError);
        }
        stubUser.restore();
    });
    it('Should still report the more specific preference even though the less specific one changed', function () {
        var userProvider = testContainer.get(user_preference_provider_1.UserPreferenceProvider);
        var workspaceProvider = testContainer.get(workspace_preference_provider_1.WorkspacePreferenceProvider);
        var stubUser = sinon.stub(userProvider, 'getPreferences').returns({
            'test.boolean': true,
            'test.number': 1
        });
        var stubWorkspace = sinon.stub(workspaceProvider, 'getPreferences').returns({
            'test.boolean': false,
            'test.number': 0
        });
        mockUserPreferenceEmitter.fire(undefined);
        var value = prefService.get('test.number');
        expect(value).equals(0);
        stubUser.restore();
        stubUser = sinon.stub(userProvider, 'getPreferences').returns({
            'test.boolean': true,
            'test.number': 4
        });
        mockUserPreferenceEmitter.fire(undefined);
        value = prefService.get('test.number');
        expect(value).equals(0);
        [stubUser, stubWorkspace].forEach(function (stub) {
            stub.restore();
        });
    });
});
//# sourceMappingURL=preference-service.spec.js.map