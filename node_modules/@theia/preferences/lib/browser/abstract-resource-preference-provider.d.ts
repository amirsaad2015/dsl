import URI from '@theia/core/lib/common/uri';
import { ILogger, DisposableCollection, Resource, Event, Emitter, ResourceProvider, MaybePromise } from "@theia/core/lib/common";
import { PreferenceProvider } from '@theia/core/lib/browser/preferences';
export declare abstract class AbstractResourcePreferenceProvider implements PreferenceProvider {
    protected preferences: {
        [key: string]: any;
    };
    protected readonly onDidPreferencesChangedEmitter: Emitter<void>;
    readonly onDidPreferencesChanged: Event<void>;
    protected readonly toDispose: DisposableCollection;
    protected readonly logger: ILogger;
    protected readonly resourceProvider: ResourceProvider;
    protected resource: Promise<Resource>;
    protected init(): Promise<void>;
    protected abstract getUri(): MaybePromise<URI>;
    dispose(): void;
    getPreferences(): {
        [key: string]: any;
    };
    protected readPreferences(): Promise<void>;
    protected readContents(): Promise<string>;
}
