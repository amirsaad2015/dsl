"use strict";
/*
 * Copyright (C) 2018 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License'); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var browser_1 = require("@theia/editor/lib/browser");
var MergeConflictsDecorations = /** @class */ (function () {
    function MergeConflictsDecorations(decorationsService) {
        this.decorationsService = decorationsService;
    }
    MergeConflictsDecorations_1 = MergeConflictsDecorations;
    MergeConflictsDecorations.prototype.onMergeConflictUpdate = function (params) {
        var uri = params.uri;
        var mergeConflicts = params.mergeConflicts;
        this.setDecorations(uri, MergeConflictsDecorations_1.Kind.CurrentMarker, mergeConflicts.map(function (c) { return c.current.marker; }));
        this.setDecorations(uri, MergeConflictsDecorations_1.Kind.CurrentContent, mergeConflicts.map(function (c) { return c.current.content; }));
        this.setDecorations(uri, MergeConflictsDecorations_1.Kind.IncomingMarker, mergeConflicts.map(function (c) { return c.incoming.marker; }));
        this.setDecorations(uri, MergeConflictsDecorations_1.Kind.IncomingContent, mergeConflicts.map(function (c) { return c.incoming.content; }));
        var baseMarkerRanges = [];
        var baseContentRanges = [];
        mergeConflicts.forEach(function (c) { return c.bases.forEach(function (b) {
            if (b.marker) {
                baseMarkerRanges.push(b.marker);
            }
            if (b.content) {
                baseContentRanges.push(b.content);
            }
        }); });
        this.setDecorations(uri, MergeConflictsDecorations_1.Kind.BaseMarker, baseMarkerRanges);
        this.setDecorations(uri, MergeConflictsDecorations_1.Kind.BaseContent, baseContentRanges);
    };
    MergeConflictsDecorations.prototype.setDecorations = function (uri, kind, ranges) {
        var options = MergeConflictsDecorations_1.Options[kind];
        var newDecorations = ranges.map(function (range) { return ({ range: range, options: options }); });
        this.decorationsService.setDecorations({ uri: uri, kind: kind, newDecorations: newDecorations });
    };
    MergeConflictsDecorations = MergeConflictsDecorations_1 = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(browser_1.EditorDecorationsService)),
        __metadata("design:paramtypes", [browser_1.EditorDecorationsService])
    ], MergeConflictsDecorations);
    return MergeConflictsDecorations;
    var MergeConflictsDecorations_1;
}());
exports.MergeConflictsDecorations = MergeConflictsDecorations;
(function (MergeConflictsDecorations) {
    var Kind;
    (function (Kind) {
        Kind["CurrentMarker"] = "merge-conflict-current-marker";
        Kind["CurrentContent"] = "merge-conflict-current-content";
        Kind["BaseMarker"] = "merge-conflict-base-marker";
        Kind["BaseContent"] = "merge-conflict-base-content";
        Kind["IncomingMarker"] = "merge-conflict-incoming-marker";
        Kind["IncomingContent"] = "merge-conflict-incoming-content";
    })(Kind = MergeConflictsDecorations.Kind || (MergeConflictsDecorations.Kind = {}));
    MergeConflictsDecorations.Options = (_a = {},
        _a[Kind.CurrentMarker] = {
            isWholeLine: true,
            className: Kind.CurrentMarker.toString()
        },
        _a[Kind.CurrentContent] = {
            isWholeLine: true,
            className: Kind.CurrentContent.toString(),
            overviewRuler: {
                position: browser_1.OverviewRulerLane.Full,
                color: 'rgba(0, 255, 0, 0.3)',
            }
        },
        _a[Kind.BaseMarker] = {
            isWholeLine: true,
            className: Kind.BaseMarker.toString()
        },
        _a[Kind.BaseContent] = {
            isWholeLine: true,
            className: Kind.BaseContent.toString(),
            overviewRuler: {
                position: browser_1.OverviewRulerLane.Full,
                color: 'rgba(125, 125, 125, 0.3)',
            }
        },
        _a[Kind.IncomingMarker] = {
            isWholeLine: true,
            className: Kind.IncomingMarker.toString()
        },
        _a[Kind.IncomingContent] = {
            isWholeLine: true,
            className: Kind.IncomingContent.toString(),
            overviewRuler: {
                position: browser_1.OverviewRulerLane.Full,
                color: 'rgba(0, 0, 255, 0.3)',
            }
        },
        _a);
    var _a;
})(MergeConflictsDecorations = exports.MergeConflictsDecorations || (exports.MergeConflictsDecorations = {}));
exports.MergeConflictsDecorations = MergeConflictsDecorations;
//# sourceMappingURL=merge-conflicts-decorations.js.map