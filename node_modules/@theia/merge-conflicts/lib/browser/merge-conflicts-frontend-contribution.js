"use strict";
/*
 * Copyright (C) 2018 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License'); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var common_1 = require("@theia/languages/lib/common");
var merge_conflicts_code_lense_provider_1 = require("./merge-conflicts-code-lense-provider");
var merge_conflict_resolver_1 = require("./merge-conflict-resolver");
var merge_conflict_1 = require("./merge-conflict");
var merge_conflicts_service_1 = require("./merge-conflicts-service");
var merge_conflicts_decorations_1 = require("./merge-conflicts-decorations");
var MergeConflictsFrontendContribution = /** @class */ (function () {
    function MergeConflictsFrontendContribution(languages, mergeConflictsCodeLensProvider, mergeConflictResolver, mergeConflictsDecorations, mergeConflictsService, workspace) {
        this.languages = languages;
        this.mergeConflictsCodeLensProvider = mergeConflictsCodeLensProvider;
        this.mergeConflictResolver = mergeConflictResolver;
        this.mergeConflictsDecorations = mergeConflictsDecorations;
        this.mergeConflictsService = mergeConflictsService;
        this.workspace = workspace;
    }
    MergeConflictsFrontendContribution.prototype.onStart = function (app) {
        var _this = this;
        if (this.languages.registerCodeLensProvider) {
            this.languages.registerCodeLensProvider([{ pattern: '**/*' }], this.mergeConflictsCodeLensProvider);
        }
        this.workspace.onDidOpenTextDocument(function (document) {
            window.setTimeout(function () {
                _this.updateEditorDecorations(document.uri);
            }, 1);
        });
        this.workspace.onDidChangeTextDocument(function (params) { return _this.updateEditorDecorations(params.textDocument.uri); });
        this.mergeConflictsService.onMergeConflictUpdate(function (params) { return _this.mergeConflictsDecorations.onMergeConflictUpdate(params); });
    };
    MergeConflictsFrontendContribution.prototype.updateEditorDecorations = function (uri) {
        this.mergeConflictsService.get(uri);
    };
    MergeConflictsFrontendContribution.prototype.registerCommands = function (registry) {
        registry.registerCommand(merge_conflict_1.MergeConflictsCommands.AcceptCurrent, this.mergeConflictResolver.acceptCurrent);
        registry.registerCommand(merge_conflict_1.MergeConflictsCommands.AcceptIncoming, this.mergeConflictResolver.acceptIncoming);
        registry.registerCommand(merge_conflict_1.MergeConflictsCommands.AcceptBoth, this.mergeConflictResolver.acceptBoth);
    };
    MergeConflictsFrontendContribution = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(common_1.Languages)),
        __param(1, inversify_1.inject(merge_conflicts_code_lense_provider_1.MergeConflictsCodeLensProvider)),
        __param(2, inversify_1.inject(merge_conflict_resolver_1.MergeConflictResolver)),
        __param(3, inversify_1.inject(merge_conflicts_decorations_1.MergeConflictsDecorations)),
        __param(4, inversify_1.inject(merge_conflicts_service_1.MergeConflictsService)),
        __param(5, inversify_1.inject(common_1.Workspace)),
        __metadata("design:paramtypes", [Object, merge_conflicts_code_lense_provider_1.MergeConflictsCodeLensProvider,
            merge_conflict_resolver_1.MergeConflictResolver,
            merge_conflicts_decorations_1.MergeConflictsDecorations,
            merge_conflicts_service_1.MergeConflictsService, Object])
    ], MergeConflictsFrontendContribution);
    return MergeConflictsFrontendContribution;
}());
exports.MergeConflictsFrontendContribution = MergeConflictsFrontendContribution;
//# sourceMappingURL=merge-conflicts-frontend-contribution.js.map