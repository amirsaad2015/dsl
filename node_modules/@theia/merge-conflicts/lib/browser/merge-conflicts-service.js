"use strict";
/*
 * Copyright (C) 2018 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License'); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var browser_1 = require("@theia/languages/lib/browser");
var merge_conflicts_parser_1 = require("./merge-conflicts-parser");
var event_1 = require("@theia/core/lib/common/event");
var MergeConflictsService = /** @class */ (function () {
    function MergeConflictsService(workspace, mergeConflictParser) {
        this.workspace = workspace;
        this.mergeConflictParser = mergeConflictParser;
        this.onMergeConflictUpdateEmitter = new event_1.Emitter();
    }
    MergeConflictsService.prototype.get = function (uri) {
        var mergeConflicts = this.getMergeConflicts(uri);
        this.onMergeConflictUpdateEmitter.fire({ uri: uri, mergeConflicts: mergeConflicts });
        return mergeConflicts;
    };
    MergeConflictsService.prototype.getMergeConflicts = function (uri) {
        var document = this.workspace.textDocuments.find(function (d) { return d.uri === uri; });
        if (!document) {
            return [];
        }
        var mergeConflicts = this.mergeConflictParser.parse(document.getText());
        return mergeConflicts;
    };
    Object.defineProperty(MergeConflictsService.prototype, "onMergeConflictUpdate", {
        get: function () {
            return this.onMergeConflictUpdateEmitter.event;
        },
        enumerable: true,
        configurable: true
    });
    MergeConflictsService = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(browser_1.Workspace)),
        __param(1, inversify_1.inject(merge_conflicts_parser_1.MergeConflictsParser)),
        __metadata("design:paramtypes", [Object, merge_conflicts_parser_1.MergeConflictsParser])
    ], MergeConflictsService);
    return MergeConflictsService;
}());
exports.MergeConflictsService = MergeConflictsService;
//# sourceMappingURL=merge-conflicts-service.js.map