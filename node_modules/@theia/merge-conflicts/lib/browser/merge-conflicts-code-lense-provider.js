"use strict";
/*
 * Copyright (C) 2018 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License'); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var merge_conflict_1 = require("./merge-conflict");
var merge_conflicts_service_1 = require("./merge-conflicts-service");
var MergeConflictsCodeLensProvider = /** @class */ (function () {
    function MergeConflictsCodeLensProvider(mergeConflictsService) {
        this.mergeConflictsService = mergeConflictsService;
    }
    MergeConflictsCodeLensProvider.prototype.provideCodeLenses = function (params, token) {
        var _this = this;
        var uri = params.textDocument.uri;
        var mergeConflicts = this.mergeConflictsService.get(uri);
        var result = [];
        mergeConflicts.forEach(function (mergeConflict) { return result.push.apply(result, __spread(_this.toCodeLense(uri, mergeConflict))); });
        return Promise.resolve(result);
    };
    MergeConflictsCodeLensProvider.prototype.toCodeLense = function (uri, conflict) {
        var result = [];
        try {
            for (var _a = __values([merge_conflict_1.MergeConflictsCommands.AcceptCurrent, merge_conflict_1.MergeConflictsCommands.AcceptIncoming, merge_conflict_1.MergeConflictsCommands.AcceptBoth]), _b = _a.next(); !_b.done; _b = _a.next()) {
                var cmd = _b.value;
                result.push({
                    command: {
                        command: cmd.id,
                        title: cmd.label || '',
                        arguments: [{ uri: uri, conflict: conflict }]
                    },
                    range: conflict.current.marker
                });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return result;
        var e_1, _c;
    };
    MergeConflictsCodeLensProvider = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(merge_conflicts_service_1.MergeConflictsService)),
        __metadata("design:paramtypes", [merge_conflicts_service_1.MergeConflictsService])
    ], MergeConflictsCodeLensProvider);
    return MergeConflictsCodeLensProvider;
}());
exports.MergeConflictsCodeLensProvider = MergeConflictsCodeLensProvider;
//# sourceMappingURL=merge-conflicts-code-lense-provider.js.map