"use strict";
/*
 * Copyright (C) 2017 Ericsson and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var browser_1 = require("@theia/core/lib/browser");
var common_1 = require("@theia/core/lib/common");
var _1 = require("@theia/userstorage/lib/browser/");
var uri_1 = require("@theia/core/lib/common/uri");
var ajv = require("ajv");
var jsoncparser = require("jsonc-parser");
exports.keymapsSchema = {
    "type": "array",
    "properties": {
        "keybinding": {
            "type": "string"
        },
        "command": {
            "type": "string"
        },
        "context": {
            "type": "string"
        },
    },
    "required": ["command", "keybinding"],
    "optional": [
        "context"
    ],
    "additionalProperties": false
};
exports.keymapsUri = new uri_1.default('keymaps.json').withScheme(_1.UserStorageUri.SCHEME);
var KeymapsService = /** @class */ (function () {
    function KeymapsService(resourceProvider, commandRegistry, keyBindingRegistry, logger) {
        var _this = this;
        this.resourceProvider = resourceProvider;
        this.commandRegistry = commandRegistry;
        this.keyBindingRegistry = keyBindingRegistry;
        this.logger = logger;
        this.toDispose = new common_1.DisposableCollection();
        this.ajv = new ajv();
        this.ready = false;
        this.resourceProvider(exports.keymapsUri).then(function (resource) {
            _this.keymapsResource = resource;
            _this.toDispose.push(_this.keymapsResource);
            if (_this.keymapsResource.onDidChangeContents) {
                _this.keymapsResource.onDidChangeContents(function () {
                    _this.onDidChangeKeymap();
                });
            }
            _this.keymapsResource.readContents().then(function (content) {
                _this.parseKeybindings(content);
            });
        });
    }
    KeymapsService.prototype.dispose = function () {
        this.toDispose.dispose();
    };
    KeymapsService.prototype.onStart = function (app) {
        this.ready = true;
    };
    KeymapsService.prototype.onDidChangeKeymap = function () {
        var _this = this;
        this.keymapsResource.readContents().then(function (content) {
            _this.parseKeybindings(content);
        });
    };
    KeymapsService.prototype.parseKeybindings = function (content) {
        var strippedContent = jsoncparser.stripComments(content);
        var errors = [];
        var keybindings = jsoncparser.parse(strippedContent, errors);
        if (errors.length) {
            try {
                for (var errors_1 = __values(errors), errors_1_1 = errors_1.next(); !errors_1_1.done; errors_1_1 = errors_1.next()) {
                    var error = errors_1_1.value;
                    this.logger.error("JSON parsing error", error);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (errors_1_1 && !errors_1_1.done && (_a = errors_1.return)) _a.call(errors_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.keyBindingRegistry.resetKeybindingsForScope(browser_1.KeybindingScope.USER);
        }
        if (keybindings) {
            this.setKeymap(keybindings);
        }
        var e_1, _a;
    };
    KeymapsService.prototype.setKeymap = function (keybindings) {
        var bindings = [];
        try {
            for (var keybindings_1 = __values(keybindings), keybindings_1_1 = keybindings_1.next(); !keybindings_1_1.done; keybindings_1_1 = keybindings_1.next()) {
                var keybinding = keybindings_1_1.value;
                bindings.push({
                    command: keybinding.command,
                    keybinding: keybinding.keybinding,
                    context: keybinding.context
                });
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (keybindings_1_1 && !keybindings_1_1.done && (_a = keybindings_1.return)) _a.call(keybindings_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (this.ajv.validate(exports.keymapsSchema, bindings)) {
            this.keyBindingRegistry.setKeymap(browser_1.KeybindingScope.USER, bindings);
        }
        var e_2, _a;
    };
    KeymapsService = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(common_1.ResourceProvider)),
        __param(1, inversify_1.inject(common_1.CommandRegistry)),
        __param(2, inversify_1.inject(browser_1.KeybindingRegistry)),
        __param(3, inversify_1.inject(common_1.ILogger)),
        __metadata("design:paramtypes", [Function, common_1.CommandRegistry,
            browser_1.KeybindingRegistry, Object])
    ], KeymapsService);
    return KeymapsService;
}());
exports.KeymapsService = KeymapsService;
//# sourceMappingURL=keymaps-service.js.map