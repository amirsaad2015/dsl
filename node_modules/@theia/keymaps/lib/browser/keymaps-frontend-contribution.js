"use strict";
/*
 * Copyright (C) 2017 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var browser_1 = require("@theia/core/lib/browser");
var browser_2 = require("@theia/core/lib/browser");
var common_frontend_contribution_1 = require("@theia/core/lib/browser/common-frontend-contribution");
var widget_manager_1 = require("@theia/core/lib/browser/widget-manager");
var keymaps_service_1 = require("./keymaps-service");
var KeymapsCommands;
(function (KeymapsCommands) {
    KeymapsCommands.OPEN_KEYMAPS = {
        id: 'keymaps:open',
        label: 'Open Keyboard Shortcuts'
    };
})(KeymapsCommands = exports.KeymapsCommands || (exports.KeymapsCommands = {}));
var KeymapsFrontendContribution = /** @class */ (function () {
    function KeymapsFrontendContribution(app, widgetManager, openerService) {
        this.app = app;
        this.widgetManager = widgetManager;
        this.openerService = openerService;
    }
    KeymapsFrontendContribution.prototype.registerCommands = function (commands) {
        var _this = this;
        commands.registerCommand(KeymapsCommands.OPEN_KEYMAPS, {
            isEnabled: function () { return true; },
            execute: function () { return _this.openKeymapsFile(); }
        });
    };
    KeymapsFrontendContribution.prototype.registerMenus = function (menus) {
        menus.registerMenuAction(common_frontend_contribution_1.CommonMenus.FILE_OPEN, {
            commandId: KeymapsCommands.OPEN_KEYMAPS.id
        });
    };
    KeymapsFrontendContribution.prototype.openKeymapsFile = function () {
        browser_1.open(this.openerService, keymaps_service_1.keymapsUri);
    };
    KeymapsFrontendContribution = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(browser_2.FrontendApplication)),
        __param(1, inversify_1.inject(widget_manager_1.WidgetManager)),
        __param(2, inversify_1.inject(browser_1.OpenerService)),
        __metadata("design:paramtypes", [browser_2.FrontendApplication,
            widget_manager_1.WidgetManager, Object])
    ], KeymapsFrontendContribution);
    return KeymapsFrontendContribution;
}());
exports.KeymapsFrontendContribution = KeymapsFrontendContribution;
//# sourceMappingURL=keymaps-frontend-contribution.js.map