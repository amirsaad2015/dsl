import { SearchInWorkspaceServer, SearchInWorkspaceClient, SearchInWorkspaceResult, SearchInWorkspaceOptions } from "../common/search-in-workspace-interface";
import { WorkspaceService } from "@theia/workspace/lib/browser";
import { ILogger } from "@theia/core";
/**
 * Class that will receive the search results from the server.  This is separate
 * from the SearchInWorkspaceService class only to avoid a cycle in the
 * dependency injection.
 */
export declare class SearchInWorkspaceClientImpl implements SearchInWorkspaceClient {
    private service;
    onResult(searchId: number, result: SearchInWorkspaceResult): void;
    onDone(searchId: number, error?: string): void;
    setService(service: SearchInWorkspaceClient): void;
}
export declare type SearchInWorkspaceCallbacks = SearchInWorkspaceClient;
/**
 * Service to search text in the workspace files.
 */
export declare class SearchInWorkspaceService implements SearchInWorkspaceClient {
    protected readonly searchServer: SearchInWorkspaceServer;
    protected readonly client: SearchInWorkspaceClientImpl;
    protected readonly workspaceService: WorkspaceService;
    protected readonly logger: ILogger;
    private pendingSearches;
    private pendingOnDones;
    private lastKnownSearchId;
    constructor(searchServer: SearchInWorkspaceServer, client: SearchInWorkspaceClientImpl, workspaceService: WorkspaceService, logger: ILogger);
    isEnabled(): boolean;
    onResult(searchId: number, result: SearchInWorkspaceResult): void;
    onDone(searchId: number, error?: string): void;
    search(what: string, callbacks: SearchInWorkspaceCallbacks, opts?: SearchInWorkspaceOptions): Promise<number>;
    cancel(searchId: number): void;
}
