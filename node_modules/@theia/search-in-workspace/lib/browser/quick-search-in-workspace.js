"use strict";
/*
 * Copyright (C) 2017-2018 Ericsson and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
var uri_1 = require("@theia/core/lib/common/uri");
var _1 = require("@theia/core/lib/browser/quick-open/");
var inversify_1 = require("inversify");
var core_1 = require("@theia/core");
var browser_1 = require("@theia/core/lib/browser");
var search_in_workspace_service_1 = require("./search-in-workspace-service");
var search_in_workspace_interface_1 = require("../common/search-in-workspace-interface");
var browser_2 = require("@theia/editor/lib/browser");
var label_provider_1 = require("@theia/core/lib/browser/label-provider");
var QuickSearchInWorkspace = /** @class */ (function () {
    function QuickSearchInWorkspace(quickOpenService, searchInWorkspaceService, openerService, labelProvider, logger) {
        this.quickOpenService = quickOpenService;
        this.searchInWorkspaceService = searchInWorkspaceService;
        this.openerService = openerService;
        this.labelProvider = labelProvider;
        this.logger = logger;
        this.currentSearchId = -1;
        this.MAX_RESULTS = 100;
    }
    QuickSearchInWorkspace.prototype.isEnabled = function () {
        return this.searchInWorkspaceService.isEnabled();
    };
    QuickSearchInWorkspace.prototype.onType = function (lookFor, acceptor) {
        var _this = this;
        // If we have a search pending, it's not relevant anymore, cancel it.
        this.cancelCurrentSeach();
        if (lookFor.length === 0) {
            // The user has emptied the search box, call acceptor to
            // remove any previously shown results.
            acceptor([]);
            return;
        }
        // Options passed to the search service.
        var opts = {
            maxResults: this.MAX_RESULTS,
        };
        // The array in which we'll keep accumulating search results.
        var items = [];
        this.searchInWorkspaceService.search(lookFor, {
            onResult: function (searchId, result) {
                // Is this result from a previous search?
                if (searchId !== _this.currentSearchId) {
                    return;
                }
                items.push(new QuickSearchInWorkspaceResultItem(result, _this.openerService, _this.labelProvider));
            },
            onDone: function (searchId, error) {
                if (searchId !== _this.currentSearchId) {
                    _this.logger.debug('Search ' + _this.currentSearchId + ' has completed, but it\'s not the current search.');
                    return;
                }
                _this.logger.debug('Search ' + _this.currentSearchId + ' has completed and is the current search.');
                _this.currentSearchId = -1;
                if (error) {
                    _this.showFakeResult(error, acceptor);
                }
                else if (items.length !== 0) {
                    items.sort(function (a, b) { return search_in_workspace_interface_1.SearchInWorkspaceResult.compare(a.getResult(), b.getResult()); });
                    acceptor(items);
                }
                else {
                    _this.showFakeResult('No matches :(', acceptor);
                }
            },
        }, opts).then(function (searchId) {
            _this.currentSearchId = searchId;
        });
    };
    QuickSearchInWorkspace.prototype.showFakeResult = function (label, acceptor) {
        acceptor([
            new _1.QuickOpenItem({
                label: label,
            }),
        ]);
    };
    // If we have an ongoing search, cancel it.
    QuickSearchInWorkspace.prototype.cancelCurrentSeach = function () {
        if (this.currentSearchId >= 0) {
            this.logger.debug('Cancelling search ' + this.currentSearchId);
            this.searchInWorkspaceService.cancel(this.currentSearchId);
            this.currentSearchId = -1;
        }
    };
    // Open the quick search in workspace popup.
    QuickSearchInWorkspace.prototype.open = function () {
        var _this = this;
        var opts = {
            onClose: function (cancelled) { return _this.cancelCurrentSeach(); },
            placeholder: 'Search in workspace by regular expression...',
        };
        this.quickOpenService.open(this, opts);
    };
    QuickSearchInWorkspace = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(_1.QuickOpenService)),
        __param(1, inversify_1.inject(search_in_workspace_service_1.SearchInWorkspaceService)),
        __param(2, inversify_1.inject(browser_1.OpenerService)),
        __param(3, inversify_1.inject(label_provider_1.LabelProvider)),
        __param(4, inversify_1.inject(core_1.ILogger)),
        __metadata("design:paramtypes", [_1.QuickOpenService,
            search_in_workspace_service_1.SearchInWorkspaceService, Object, label_provider_1.LabelProvider, Object])
    ], QuickSearchInWorkspace);
    return QuickSearchInWorkspace;
}());
exports.QuickSearchInWorkspace = QuickSearchInWorkspace;
var QuickSearchInWorkspaceResultItem = /** @class */ (function (_super) {
    __extends(QuickSearchInWorkspaceResultItem, _super);
    function QuickSearchInWorkspaceResultItem(result, openerService, labelProvider) {
        var _this = this;
        var resultHl = {
            start: result.character - 1,
            end: result.character + result.length - 1,
        };
        // Show the path relative to the workspace.
        var uri = new uri_1.default('file://' + result.file);
        var file = labelProvider.getName(uri);
        var dir = labelProvider.getLongName(uri.parent) + '/';
        var filenameHl = {
            start: 0,
            end: file.length,
        };
        var opts = {
            detail: result.lineText,
            detailHighlights: [resultHl],
            label: file + ":" + result.line + " - " + dir,
            labelHighlights: [filenameHl],
        };
        _this = _super.call(this, opts) || this;
        _this.result = result;
        _this.openerService = openerService;
        return _this;
    }
    QuickSearchInWorkspaceResultItem.prototype.run = function (mode) {
        if (mode !== browser_1.QuickOpenMode.OPEN) {
            return false;
        }
        // Search results are 1-based, positions in editors are 0-based.
        var line = this.result.line - 1;
        var character = this.result.character - 1;
        var uri = new uri_1.default('file://' + this.result.file);
        var r = browser_2.Range.create(line, character, line, character + this.result.length);
        browser_1.open(this.openerService, uri, { selection: r });
        return true;
    };
    QuickSearchInWorkspaceResultItem.prototype.getResult = function () {
        return this.result;
    };
    return QuickSearchInWorkspaceResultItem;
}(_1.QuickOpenItem));
var OpenQuickSearchInWorkspaceCommand = {
    id: 'QuickSearchInWorkspace.open',
    label: "Search in Workspace..."
};
var SearchInWorkspaceContributions = /** @class */ (function () {
    function SearchInWorkspaceContributions(quickSeachInWorkspace) {
        this.quickSeachInWorkspace = quickSeachInWorkspace;
    }
    SearchInWorkspaceContributions.prototype.registerCommands = function (registry) {
        var _this = this;
        registry.registerCommand(OpenQuickSearchInWorkspaceCommand, {
            execute: function (what) { return _this.quickSeachInWorkspace.open(); },
            isEnabled: function () { return _this.quickSeachInWorkspace.isEnabled(); },
        });
    };
    SearchInWorkspaceContributions.prototype.registerMenus = function (menus) {
        menus.registerMenuAction(browser_1.CommonMenus.EDIT_FIND, {
            commandId: OpenQuickSearchInWorkspaceCommand.id,
            label: OpenQuickSearchInWorkspaceCommand.label,
        });
    };
    SearchInWorkspaceContributions.prototype.registerKeybindings = function (keybindings) {
        keybindings.registerKeybinding({
            command: OpenQuickSearchInWorkspaceCommand.id,
            keybinding: 'ctrlcmd+shift+f',
        });
    };
    SearchInWorkspaceContributions = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(QuickSearchInWorkspace)),
        __metadata("design:paramtypes", [QuickSearchInWorkspace])
    ], SearchInWorkspaceContributions);
    return SearchInWorkspaceContributions;
}());
exports.SearchInWorkspaceContributions = SearchInWorkspaceContributions;
//# sourceMappingURL=quick-search-in-workspace.js.map