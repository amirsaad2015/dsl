import { JsonRpcServer } from "@theia/core";
export interface SearchInWorkspaceOptions {
    /**
     * Maximum number of results to return.  Defaults to unlimited.
     */
    maxResults?: number;
}
export interface SearchInWorkspaceResult {
    /**
     * The path to the file containing the result.
     */
    file: string;
    /**
     * The (1-based) line number of the result.
     */
    line: number;
    /**
     * The (1-based) character number in the result line.  For UTF-8 files,
     * one multi-byte character counts as one character.
     */
    character: number;
    /**
     * The length of the match, in characters.  For UTF-8 files, one
     * multi-byte character counts as one character.
     */
    length: number;
    /**
     * The text of the line containing the result.
     */
    lineText: string;
}
export declare namespace SearchInWorkspaceResult {
    /**
     * Sort search in workspace results according to file, line, character position
     * and then length.
     */
    function compare(a: SearchInWorkspaceResult, b: SearchInWorkspaceResult): number;
}
export declare const SearchInWorkspaceClient: unique symbol;
export interface SearchInWorkspaceClient {
    /**
     * Called by the server for every search match.
     */
    onResult(searchId: number, result: SearchInWorkspaceResult): void;
    /**
     * Called when no more search matches will come.
     */
    onDone(searchId: number, error?: string): void;
}
export declare const SearchInWorkspaceServer: unique symbol;
export interface SearchInWorkspaceServer extends JsonRpcServer<SearchInWorkspaceClient> {
    /**
     * Start a search for WHAT in directory ROOT.  Return a unique search id.
     */
    search(what: string, root: string, opts?: SearchInWorkspaceOptions): Promise<number>;
    /**
     * Cancel an ongoing search.
     */
    cancel(searchId: number): Promise<void>;
    dispose(): void;
}
