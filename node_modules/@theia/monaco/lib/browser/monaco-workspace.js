"use strict";
/*
 * Copyright (C) 2017 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var monaco_languageclient_1 = require("monaco-languageclient");
var common_1 = require("@theia/core/lib/common");
var common_2 = require("@theia/filesystem/lib/common");
var browser_1 = require("@theia/filesystem/lib/browser");
var browser_2 = require("@theia/workspace/lib/browser");
var browser_3 = require("@theia/editor/lib/browser");
var lang = require("@theia/languages/lib/common");
var common_3 = require("@theia/languages/lib/common");
var monaco_text_model_service_1 = require("./monaco-text-model-service");
var uri_1 = require("@theia/core/lib/common/uri");
var monaco_editor_1 = require("./monaco-editor");
inversify_1.decorate(inversify_1.injectable(), monaco_languageclient_1.MonacoWorkspace);
inversify_1.decorate(inversify_1.inject(monaco_languageclient_1.MonacoToProtocolConverter), monaco_languageclient_1.MonacoWorkspace, 0);
var MonacoWorkspace = /** @class */ (function (_super) {
    __extends(MonacoWorkspace, _super);
    function MonacoWorkspace(fileSystem, workspaceService, fileSystemWatcher, textModelService, m2p, p2m, editorManager) {
        var _this = _super.call(this, p2m, m2p) || this;
        _this.fileSystem = fileSystem;
        _this.workspaceService = workspaceService;
        _this.fileSystemWatcher = fileSystemWatcher;
        _this.textModelService = textModelService;
        _this.m2p = m2p;
        _this.p2m = p2m;
        _this.editorManager = editorManager;
        _this.capabilities = {
            applyEdit: true,
            workspaceEdit: {
                documentChanges: true
            }
        };
        _this.synchronization = {
            didSave: true,
            willSave: true,
            willSaveWaitUntil: true
        };
        _this.ready = new Promise(function (resolve) {
            _this.resolveReady = resolve;
        });
        _this.onWillSaveTextDocumentEmitter = new common_3.Emitter();
        _this.onDidSaveTextDocumentEmitter = new common_3.Emitter();
        workspaceService.root.then(function (rootStat) {
            if (rootStat) {
                _this._rootUri = rootStat.uri;
                _this.resolveReady();
            }
        });
        monaco.editor.onDidCreateModel(function (model) {
            _this.textModelService.createModelReference(model.uri).then(function (reference) {
                reference.object.onDirtyChanged(function () {
                    if (reference.object.dirty && monaco_editor_1.MonacoEditor.findByDocument(_this.editorManager, reference.object).length === 0) {
                        // create a new reference to make sure the model is not disposed before it is
                        // acquired by the editor, thus losing the changes that made it dirty.
                        _this.textModelService.createModelReference(model.uri).then(function (ref) {
                            _this.editorManager.open(new uri_1.default(model.uri.toString()), {
                                mode: 'open',
                            }).then(function (editor) { return ref.dispose(); });
                        });
                    }
                });
                reference.object.onDidSaveModel(function (model) {
                    return _this.onDidSaveModel(model);
                });
                reference.object.onWillSaveModel(function (event) {
                    return _this.onWillSaveModel(event);
                });
                reference.dispose();
            });
        });
        return _this;
    }
    Object.defineProperty(MonacoWorkspace.prototype, "rootPath", {
        get: function () {
            return this._rootUri && new uri_1.default(this._rootUri).path.toString();
        },
        enumerable: true,
        configurable: true
    });
    MonacoWorkspace.prototype.getTextDocument = function (uri) {
        return this.documents.get(uri);
    };
    Object.defineProperty(MonacoWorkspace.prototype, "onWillSaveTextDocument", {
        get: function () {
            return this.onWillSaveTextDocumentEmitter.event;
        },
        enumerable: true,
        configurable: true
    });
    MonacoWorkspace.prototype.onWillSaveModel = function (event) {
        var _this = this;
        var model = event.model, reason = event.reason;
        var textDocument = this.getTextDocument(model.uri.toString());
        if (textDocument) {
            var timeout = new Promise(function (resolve) {
                return setTimeout(function () { return resolve([]); }, 1000);
            });
            var resolveEdits = new Promise(function (resolve) {
                return _this.onWillSaveTextDocumentEmitter.fire({
                    textDocument: textDocument,
                    reason: reason,
                    waitUntil: function (thenable) { return thenable.then(resolve); }
                });
            });
            event.waitUntil(Promise.race([resolveEdits, timeout]).then(function (edits) {
                return _this.p2m.asTextEdits(edits).map(function (edit) { return edit; });
            }));
        }
    };
    Object.defineProperty(MonacoWorkspace.prototype, "onDidSaveTextDocument", {
        get: function () {
            return this.onDidSaveTextDocumentEmitter.event;
        },
        enumerable: true,
        configurable: true
    });
    MonacoWorkspace.prototype.onDidSaveModel = function (model) {
        var document = this.getTextDocument(model.uri.toString());
        if (document) {
            this.onDidSaveTextDocumentEmitter.fire(document);
        }
    };
    MonacoWorkspace.prototype.createFileSystemWatcher = function (globPattern, ignoreCreateEvents, ignoreChangeEvents, ignoreDeleteEvents) {
        var disposables = new common_1.DisposableCollection();
        var onFileEventEmitter = new lang.Emitter();
        disposables.push(onFileEventEmitter);
        disposables.push(this.fileSystemWatcher.onFilesChanged(function (changes) {
            try {
                for (var changes_1 = __values(changes), changes_1_1 = changes_1.next(); !changes_1_1.done; changes_1_1 = changes_1.next()) {
                    var change = changes_1_1.value;
                    var result = change.type === browser_1.FileChangeType.ADDED ? [lang.FileChangeType.Created, ignoreCreateEvents] :
                        change.type === browser_1.FileChangeType.UPDATED ? [lang.FileChangeType.Changed, ignoreChangeEvents] :
                            [lang.FileChangeType.Deleted, ignoreDeleteEvents];
                    var type = result[0];
                    var ignoreEvents = result[1];
                    var uri = change.uri.toString();
                    if (ignoreEvents === undefined && ignoreEvents === false && monaco_languageclient_1.testGlob(globPattern, uri)) {
                        onFileEventEmitter.fire({ uri: uri, type: type });
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (changes_1_1 && !changes_1_1.done && (_a = changes_1.return)) _a.call(changes_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            var e_1, _a;
        }));
        var onFileEvent = onFileEventEmitter.event;
        return {
            onFileEvent: onFileEvent,
            dispose: function () { return disposables.dispose(); }
        };
    };
    MonacoWorkspace.prototype.applyEdit = function (changes) {
        return __awaiter(this, void 0, void 0, function () {
            var workspaceEdit, uri2Edits, _loop_1, this_1, _a, _b, uri, e_2_1, e_2, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        workspaceEdit = this.p2m.asWorkspaceEdit(changes);
                        uri2Edits = this.groupEdits(workspaceEdit);
                        _loop_1 = function (uri) {
                            var editorWidget, editor, model, currentSelections_1, edits, editOperations;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this_1.editorManager.open(new uri_1.default(uri))];
                                    case 1:
                                        editorWidget = _a.sent();
                                        editor = monaco_editor_1.MonacoEditor.get(editorWidget);
                                        if (editor) {
                                            model = editor.document.textEditorModel;
                                            currentSelections_1 = editor.getControl().getSelections();
                                            edits = uri2Edits.get(uri);
                                            editOperations = edits.map(function (edit) { return ({
                                                identifier: undefined,
                                                forceMoveMarkers: false,
                                                range: new monaco.Range(edit.range.startLineNumber, edit.range.startColumn, edit.range.endLineNumber, edit.range.endColumn),
                                                text: edit.newText
                                            }); });
                                            // start a fresh operation
                                            model.pushStackElement();
                                            model.pushEditOperations(currentSelections_1, editOperations, function (undoEdits) { return currentSelections_1; });
                                            // push again to make this change an undoable operation
                                            model.pushStackElement();
                                        }
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 6, 7, 8]);
                        _a = __values(uri2Edits.keys()), _b = _a.next();
                        _d.label = 2;
                    case 2:
                        if (!!_b.done) return [3 /*break*/, 5];
                        uri = _b.value;
                        return [5 /*yield**/, _loop_1(uri)];
                    case 3:
                        _d.sent();
                        _d.label = 4;
                    case 4:
                        _b = _a.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_2_1 = _d.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/, true];
                }
            });
        });
    };
    MonacoWorkspace.prototype.groupEdits = function (workspaceEdit) {
        var result = new Map();
        try {
            for (var _a = __values(workspaceEdit.edits), _b = _a.next(); !_b.done; _b = _a.next()) {
                var edit = _b.value;
                var uri = edit.resource.toString();
                var edits = result.get(uri) || [];
                edits.push(edit);
                result.set(uri, edits);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return result;
        var e_3, _c;
    };
    MonacoWorkspace = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(common_2.FileSystem)),
        __param(1, inversify_1.inject(browser_2.WorkspaceService)),
        __param(2, inversify_1.inject(browser_1.FileSystemWatcher)),
        __param(3, inversify_1.inject(monaco_text_model_service_1.MonacoTextModelService)),
        __param(4, inversify_1.inject(monaco_languageclient_1.MonacoToProtocolConverter)),
        __param(5, inversify_1.inject(monaco_languageclient_1.ProtocolToMonacoConverter)),
        __param(6, inversify_1.inject(browser_3.EditorManager)),
        __metadata("design:paramtypes", [Object, browser_2.WorkspaceService,
            browser_1.FileSystemWatcher,
            monaco_text_model_service_1.MonacoTextModelService,
            monaco_languageclient_1.MonacoToProtocolConverter,
            monaco_languageclient_1.ProtocolToMonacoConverter,
            browser_3.EditorManager])
    ], MonacoWorkspace);
    return MonacoWorkspace;
}(monaco_languageclient_1.MonacoWorkspace));
exports.MonacoWorkspace = MonacoWorkspace;
//# sourceMappingURL=monaco-workspace.js.map