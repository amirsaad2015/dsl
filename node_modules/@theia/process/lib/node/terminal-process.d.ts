import { ILogger } from '@theia/core/lib/common';
import { Process, ProcessOptions } from './process';
import { ProcessManager } from './process-manager';
import { ITerminal } from 'node-pty/lib/interfaces';
import { MultiRingBuffer, MultiRingBufferReadableStream } from './multi-ring-buffer';
export declare const TerminalProcessOptions: unique symbol;
export interface TerminalProcessOptions extends ProcessOptions {
}
export declare const TerminalProcessFactory: unique symbol;
export interface TerminalProcessFactory {
    (options: TerminalProcessOptions): TerminalProcess;
}
export declare class TerminalProcess extends Process {
    protected readonly ringBuffer: MultiRingBuffer;
    protected readonly terminal: ITerminal;
    constructor(options: TerminalProcessOptions, processManager: ProcessManager, ringBuffer: MultiRingBuffer, logger: ILogger);
    createOutputStream(): MultiRingBufferReadableStream;
    readonly pid: number;
    kill(signal?: string): void;
    resize(cols: number, rows: number): void;
    write(data: string): void;
}
