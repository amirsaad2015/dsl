"use strict";
/*
 * Copyright (C) 2017 TypeFox and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var uri_1 = require("@theia/core/lib/common/uri");
var label_provider_1 = require("@theia/core/lib/browser/label-provider");
var inversify_1 = require("inversify");
var DiffUris;
(function (DiffUris) {
    function encode(left, right, name) {
        var diffUris = [
            left.toString(),
            right.toString()
        ];
        var diffUriStr = JSON.stringify(diffUris);
        return new uri_1.default(name || left.displayName).withScheme('diff').withQuery(diffUriStr);
    }
    DiffUris.encode = encode;
    function decode(uri) {
        if (uri.scheme !== 'diff') {
            throw ('URI must have scheme "diff".');
        }
        var diffUris = JSON.parse(uri.query);
        return diffUris.map(function (s) { return new uri_1.default(s); });
    }
    DiffUris.decode = decode;
    function isDiffUri(uri) {
        return uri.scheme === 'diff';
    }
    DiffUris.isDiffUri = isDiffUri;
})(DiffUris = exports.DiffUris || (exports.DiffUris = {}));
var DiffUriLabelProviderContribution = /** @class */ (function () {
    function DiffUriLabelProviderContribution(labelProvider) {
        this.labelProvider = labelProvider;
    }
    DiffUriLabelProviderContribution.prototype.canHandle = function (element) {
        if (element instanceof uri_1.default && DiffUris.isDiffUri(element)) {
            return 20;
        }
        return 0;
    };
    DiffUriLabelProviderContribution.prototype.getLongName = function (uri) {
        var _a = __read(DiffUris.decode(uri), 2), left = _a[0], right = _a[1];
        var leftLongName = this.labelProvider.getLongName(left);
        var rightLongName = this.labelProvider.getLongName(right);
        if (leftLongName === rightLongName) {
            return leftLongName;
        }
        return leftLongName + " <-> " + rightLongName;
    };
    DiffUriLabelProviderContribution.prototype.getName = function (uri) {
        var _a = __read(DiffUris.decode(uri), 2), left = _a[0], right = _a[1];
        if (left.path.toString() === right.path.toString() && left.query && right.query) {
            return left.displayName + ": " + left.query + " <-> " + right.query;
        }
        else {
            var leftLongName = this.labelProvider.getName(left);
            var rightLongName = this.labelProvider.getName(right);
            if (leftLongName === rightLongName) {
                return leftLongName;
            }
            return leftLongName + " <-> " + rightLongName;
        }
    };
    DiffUriLabelProviderContribution.prototype.getIcon = function (uri) {
        return "fa fa-columns";
    };
    DiffUriLabelProviderContribution = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(label_provider_1.LabelProvider)),
        __metadata("design:paramtypes", [label_provider_1.LabelProvider])
    ], DiffUriLabelProviderContribution);
    return DiffUriLabelProviderContribution;
}());
exports.DiffUriLabelProviderContribution = DiffUriLabelProviderContribution;
//# sourceMappingURL=diff-uris.js.map