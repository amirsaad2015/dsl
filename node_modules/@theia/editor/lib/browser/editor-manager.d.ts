import URI from "@theia/core/lib/common/uri";
import { RecursivePartial, Emitter, Event } from '@theia/core/lib/common';
import { WidgetOpenHandler, WidgetOpenerOptions } from "@theia/core/lib/browser";
import { EditorWidget } from "./editor-widget";
import { Range, Position } from "./editor";
export interface EditorOpenerOptions extends WidgetOpenerOptions {
    selection?: RecursivePartial<Range>;
}
export declare class EditorManager extends WidgetOpenHandler<EditorWidget> {
    readonly id: string;
    readonly label: string;
    protected readonly onActiveEditorChangedEmitter: Emitter<EditorWidget | undefined>;
    /**
     * Emit when the active editor is changed.
     */
    readonly onActiveEditorChanged: Event<EditorWidget | undefined>;
    protected readonly onCurrentEditorChangedEmitter: Emitter<EditorWidget | undefined>;
    /**
     * Emit when the current editor is changed.
     */
    readonly onCurrentEditorChanged: Event<EditorWidget | undefined>;
    protected init(): void;
    protected _activeEditor: EditorWidget | undefined;
    /**
     * The active editor.
     */
    readonly activeEditor: EditorWidget | undefined;
    protected setActiveEditor(active: EditorWidget | undefined): void;
    protected updateActiveEditor(): void;
    protected _currentEditor: EditorWidget | undefined;
    /**
     * The most recently activated editor.
     */
    readonly currentEditor: EditorWidget | undefined;
    protected setCurrentEditor(current: EditorWidget | undefined): void;
    protected updateCurrentEditor(): void;
    canHandle(uri: URI, options?: WidgetOpenerOptions): number | Promise<number>;
    open(uri: URI, options?: EditorOpenerOptions): Promise<EditorWidget>;
    protected revealSelection(widget: EditorWidget, input?: EditorOpenerOptions): void;
    protected getSelection(selection: RecursivePartial<Range>): Range | Position | undefined;
}
