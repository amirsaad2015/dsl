import URI from '@theia/core/lib/common/uri';
import { FileSystem, FileStat } from '@theia/filesystem/lib/common';
import { FileSystemWatcher } from '@theia/filesystem/lib/browser';
import { WorkspaceServer } from '../common';
import { WindowService } from '@theia/core/lib/browser/window/window-service';
import { FrontendApplication, FrontendApplicationContribution } from '@theia/core/lib/browser';
/**
 * The workspace service.
 */
export declare class WorkspaceService implements FrontendApplicationContribution {
    private _root;
    private readonly deferredRoot;
    readonly root: Promise<FileStat | undefined>;
    protected readonly fileSystem: FileSystem;
    protected readonly watcher: FileSystemWatcher;
    protected readonly server: WorkspaceServer;
    protected readonly windowService: WindowService;
    protected init(): Promise<void>;
    protected updateTitle(uri: URI): void;
    /**
     * on unload, we set our workspace root as the last recently used on the backend.
     * @param app
     */
    onStop(app: FrontendApplication): void;
    /**
     * Returns `true` if current workspace root is set.
     * @returns {boolean}
     */
    readonly opened: boolean;
    /**
     * Opens the given URI as the current workspace root.
     */
    open(uri: URI, options?: WorkspaceInput): void;
    protected doOpen(uri: URI, options?: WorkspaceInput): Promise<void>;
    /**
     * Clears current workspace root and reloads window.
     */
    close(): void;
    protected doClose(): Promise<void>;
    /**
     * returns a FileStat if the argument URI points to an existing directory. Otherwise, `undefined`.
     */
    protected toValidRoot(uri: string | undefined): Promise<FileStat | undefined>;
    protected openWindow(uri: URI, options?: WorkspaceInput): void;
    protected reloadWindow(): void;
    protected openNewWindow(): void;
    protected shouldPreserveWindow(options?: WorkspaceInput): boolean;
}
export interface WorkspaceInput {
    /**
     * Tests whether the same window should be used or a new one has to be opened after setting the workspace root. By default it is `false`.
     */
    preserveWindow?: boolean;
}
