/*
 * generated by Xtext 2.14.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleExtent
entryRuleExtent
:
{ before(grammarAccess.getExtentRule()); }
	 ruleExtent
{ after(grammarAccess.getExtentRule()); } 
	 EOF 
;

// Rule Extent
ruleExtent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExtentAccess().getModulesAssignment()); }
		(rule__Extent__ModulesAssignment)*
		{ after(grammarAccess.getExtentAccess().getModulesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModule
entryRuleModule
:
{ before(grammarAccess.getModuleRule()); }
	 ruleModule
{ after(grammarAccess.getModuleRule()); } 
	 EOF 
;

// Rule Module
ruleModule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModuleAccess().getTerminologyGraphParserRuleCall()); }
		ruleTerminologyGraph
		{ after(grammarAccess.getModuleAccess().getTerminologyGraphParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerminologyGraph
entryRuleTerminologyGraph
:
{ before(grammarAccess.getTerminologyGraphRule()); }
	 ruleTerminologyGraph
{ after(grammarAccess.getTerminologyGraphRule()); } 
	 EOF 
;

// Rule TerminologyGraph
ruleTerminologyGraph 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerminologyGraphAccess().getGroup()); }
		(rule__TerminologyGraph__Group__0)
		{ after(grammarAccess.getTerminologyGraphAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTerminologyBoxStatement
entryRuleTerminologyBoxStatement
:
{ before(grammarAccess.getTerminologyBoxStatementRule()); }
	 ruleTerminologyBoxStatement
{ after(grammarAccess.getTerminologyBoxStatementRule()); } 
	 EOF 
;

// Rule TerminologyBoxStatement
ruleTerminologyBoxStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTerminologyBoxStatementAccess().getAlternatives()); }
		(rule__TerminologyBoxStatement__Alternatives)
		{ after(grammarAccess.getTerminologyBoxStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEntity
entryRuleEntity
:
{ before(grammarAccess.getEntityRule()); }
	 ruleEntity
{ after(grammarAccess.getEntityRule()); } 
	 EOF 
;

// Rule Entity
ruleEntity 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEntityAccess().getAlternatives()); }
		(rule__Entity__Alternatives)
		{ after(grammarAccess.getEntityAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAspect
entryRuleAspect
:
{ before(grammarAccess.getAspectRule()); }
	 ruleAspect
{ after(grammarAccess.getAspectRule()); } 
	 EOF 
;

// Rule Aspect
ruleAspect 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAspectAccess().getGroup()); }
		(rule__Aspect__Group__0)
		{ after(grammarAccess.getAspectAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConcept
entryRuleConcept
:
{ before(grammarAccess.getConceptRule()); }
	 ruleConcept
{ after(grammarAccess.getConceptRule()); } 
	 EOF 
;

// Rule Concept
ruleConcept 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConceptAccess().getGroup()); }
		(rule__Concept__Group__0)
		{ after(grammarAccess.getConceptAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelation
entryRuleRelation
:
{ before(grammarAccess.getRelationRule()); }
	 ruleRelation
{ after(grammarAccess.getRelationRule()); } 
	 EOF 
;

// Rule Relation
ruleRelation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationAccess().getGroup()); }
		(rule__Relation__Group__0)
		{ after(grammarAccess.getRelationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminologyBoxStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminologyBoxStatementAccess().getEntityParserRuleCall_0()); }
		ruleEntity
		{ after(grammarAccess.getTerminologyBoxStatementAccess().getEntityParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTerminologyBoxStatementAccess().getRelationParserRuleCall_1()); }
		ruleRelation
		{ after(grammarAccess.getTerminologyBoxStatementAccess().getRelationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Entity__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEntityAccess().getAspectParserRuleCall_0()); }
		ruleAspect
		{ after(grammarAccess.getEntityAccess().getAspectParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEntityAccess().getConceptParserRuleCall_1()); }
		ruleConcept
		{ after(grammarAccess.getEntityAccess().getConceptParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminologyGraph__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminologyGraph__Group__0__Impl
	rule__TerminologyGraph__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminologyGraph__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminologyGraphAccess().getTerminologyKeyword_0()); }
	'terminology'
	{ after(grammarAccess.getTerminologyGraphAccess().getTerminologyKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminologyGraph__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminologyGraph__Group__1__Impl
	rule__TerminologyGraph__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminologyGraph__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminologyGraphAccess().getIriAssignment_1()); }
	(rule__TerminologyGraph__IriAssignment_1)
	{ after(grammarAccess.getTerminologyGraphAccess().getIriAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminologyGraph__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminologyGraph__Group__2__Impl
	rule__TerminologyGraph__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminologyGraph__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminologyGraphAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getTerminologyGraphAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminologyGraph__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminologyGraph__Group__3__Impl
	rule__TerminologyGraph__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminologyGraph__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminologyGraphAccess().getBoxStatementsAssignment_3()); }
	(rule__TerminologyGraph__BoxStatementsAssignment_3)*
	{ after(grammarAccess.getTerminologyGraphAccess().getBoxStatementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminologyGraph__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TerminologyGraph__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminologyGraph__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTerminologyGraphAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getTerminologyGraphAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Aspect__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Aspect__Group__0__Impl
	rule__Aspect__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Aspect__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAspectAccess().getAspectKeyword_0()); }
	'aspect'
	{ after(grammarAccess.getAspectAccess().getAspectKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Aspect__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Aspect__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Aspect__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAspectAccess().getNameAssignment_1()); }
	(rule__Aspect__NameAssignment_1)
	{ after(grammarAccess.getAspectAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Concept__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Concept__Group__0__Impl
	rule__Concept__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Concept__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptAccess().getConceptKeyword_0()); }
	'concept'
	{ after(grammarAccess.getConceptAccess().getConceptKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concept__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Concept__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Concept__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConceptAccess().getNameAssignment_1()); }
	(rule__Concept__NameAssignment_1)
	{ after(grammarAccess.getConceptAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Relation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group__0__Impl
	rule__Relation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getRelationKeyword_0()); }
	'relation'
	{ after(grammarAccess.getRelationAccess().getRelationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group__1__Impl
	rule__Relation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getNameAssignment_1()); }
	(rule__Relation__NameAssignment_1)
	{ after(grammarAccess.getRelationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group__2__Impl
	rule__Relation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getRelationAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group__3__Impl
	rule__Relation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getSourceKeyword_3()); }
	'source'
	{ after(grammarAccess.getRelationAccess().getSourceKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group__4__Impl
	rule__Relation__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getEqualsSignKeyword_4()); }
	'='
	{ after(grammarAccess.getRelationAccess().getEqualsSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group__5__Impl
	rule__Relation__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getSourceAssignment_5()); }
	(rule__Relation__SourceAssignment_5)
	{ after(grammarAccess.getRelationAccess().getSourceAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group__6__Impl
	rule__Relation__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getTargetKeyword_6()); }
	'target'
	{ after(grammarAccess.getRelationAccess().getTargetKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group__7__Impl
	rule__Relation__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getEqualsSignKeyword_7()); }
	'='
	{ after(grammarAccess.getRelationAccess().getEqualsSignKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group__8__Impl
	rule__Relation__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getTargetAssignment_8()); }
	(rule__Relation__TargetAssignment_8)
	{ after(grammarAccess.getRelationAccess().getTargetAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getRightCurlyBracketKeyword_9()); }
	'}'
	{ after(grammarAccess.getRelationAccess().getRightCurlyBracketKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Extent__ModulesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExtentAccess().getModulesModuleParserRuleCall_0()); }
		ruleModule
		{ after(grammarAccess.getExtentAccess().getModulesModuleParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminologyGraph__IriAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminologyGraphAccess().getIriIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getTerminologyGraphAccess().getIriIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminologyGraph__BoxStatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTerminologyGraphAccess().getBoxStatementsTerminologyBoxStatementParserRuleCall_3_0()); }
		ruleTerminologyBoxStatement
		{ after(grammarAccess.getTerminologyGraphAccess().getBoxStatementsTerminologyBoxStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Aspect__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAspectAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getAspectAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Concept__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConceptAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getConceptAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getRelationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__SourceAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationAccess().getSourceEntityCrossReference_5_0()); }
		(
			{ before(grammarAccess.getRelationAccess().getSourceEntityIDTerminalRuleCall_5_0_1()); }
			RULE_ID
			{ after(grammarAccess.getRelationAccess().getSourceEntityIDTerminalRuleCall_5_0_1()); }
		)
		{ after(grammarAccess.getRelationAccess().getSourceEntityCrossReference_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__TargetAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationAccess().getTargetEntityCrossReference_8_0()); }
		(
			{ before(grammarAccess.getRelationAccess().getTargetEntityIDTerminalRuleCall_8_0_1()); }
			RULE_ID
			{ after(grammarAccess.getRelationAccess().getTargetEntityIDTerminalRuleCall_8_0_1()); }
		)
		{ after(grammarAccess.getRelationAccess().getTargetEntityCrossReference_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
