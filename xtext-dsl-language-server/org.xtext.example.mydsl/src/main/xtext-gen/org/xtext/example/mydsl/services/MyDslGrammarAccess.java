/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ExtentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Extent");
		private final Assignment cModulesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cModulesModuleParserRuleCall_0 = (RuleCall)cModulesAssignment.eContents().get(0);
		
		//Extent:
		//	modules+=Module*;
		@Override public ParserRule getRule() { return rule; }
		
		//modules+=Module*
		public Assignment getModulesAssignment() { return cModulesAssignment; }
		
		//Module
		public RuleCall getModulesModuleParserRuleCall_0() { return cModulesModuleParserRuleCall_0; }
	}
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Module");
		private final RuleCall cTerminologyGraphParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Module:
		//	TerminologyGraph;
		@Override public ParserRule getRule() { return rule; }
		
		//TerminologyGraph
		public RuleCall getTerminologyGraphParserRuleCall() { return cTerminologyGraphParserRuleCall; }
	}
	public class TerminologyGraphElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TerminologyGraph");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTerminologyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIriAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIriIDTerminalRuleCall_1_0 = (RuleCall)cIriAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBoxStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBoxStatementsTerminologyBoxStatementParserRuleCall_3_0 = (RuleCall)cBoxStatementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TerminologyGraph:
		//	'terminology' iri=ID
		//	'{'
		//	boxStatements+=TerminologyBoxStatement*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'terminology' iri=ID '{' boxStatements+=TerminologyBoxStatement* '}'
		public Group getGroup() { return cGroup; }
		
		//'terminology'
		public Keyword getTerminologyKeyword_0() { return cTerminologyKeyword_0; }
		
		//iri=ID
		public Assignment getIriAssignment_1() { return cIriAssignment_1; }
		
		//ID
		public RuleCall getIriIDTerminalRuleCall_1_0() { return cIriIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//boxStatements+=TerminologyBoxStatement*
		public Assignment getBoxStatementsAssignment_3() { return cBoxStatementsAssignment_3; }
		
		//TerminologyBoxStatement
		public RuleCall getBoxStatementsTerminologyBoxStatementParserRuleCall_3_0() { return cBoxStatementsTerminologyBoxStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TerminologyBoxStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.TerminologyBoxStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRelationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TerminologyBoxStatement:
		//	Entity | Relation;
		@Override public ParserRule getRule() { return rule; }
		
		//Entity | Relation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Entity
		public RuleCall getEntityParserRuleCall_0() { return cEntityParserRuleCall_0; }
		
		//Relation
		public RuleCall getRelationParserRuleCall_1() { return cRelationParserRuleCall_1; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAspectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConceptParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Entity:
		//	Aspect | Concept;
		@Override public ParserRule getRule() { return rule; }
		
		//Aspect | Concept
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Aspect
		public RuleCall getAspectParserRuleCall_0() { return cAspectParserRuleCall_0; }
		
		//Concept
		public RuleCall getConceptParserRuleCall_1() { return cConceptParserRuleCall_1; }
	}
	public class AspectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Aspect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAspectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Aspect:
		//	'aspect' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'aspect' name=ID
		public Group getGroup() { return cGroup; }
		
		//'aspect'
		public Keyword getAspectKeyword_0() { return cAspectKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class ConceptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Concept");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConceptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Concept:
		//	'concept' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'concept' name=ID
		public Group getGroup() { return cGroup; }
		
		//'concept'
		public Keyword getConceptKeyword_0() { return cConceptKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSourceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSourceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSourceEntityCrossReference_5_0 = (CrossReference)cSourceAssignment_5.eContents().get(0);
		private final RuleCall cSourceEntityIDTerminalRuleCall_5_0_1 = (RuleCall)cSourceEntityCrossReference_5_0.eContents().get(1);
		private final Keyword cTargetKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTargetAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cTargetEntityCrossReference_8_0 = (CrossReference)cTargetAssignment_8.eContents().get(0);
		private final RuleCall cTargetEntityIDTerminalRuleCall_8_0_1 = (RuleCall)cTargetEntityCrossReference_8_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Relation:
		//	'relation' name=ID '{'
		//	'source' '=' source=[Entity]
		//	'target' '=' target=[Entity]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'relation' name=ID '{' 'source' '=' source=[Entity] 'target' '=' target=[Entity] '}'
		public Group getGroup() { return cGroup; }
		
		//'relation'
		public Keyword getRelationKeyword_0() { return cRelationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'source'
		public Keyword getSourceKeyword_3() { return cSourceKeyword_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//source=[Entity]
		public Assignment getSourceAssignment_5() { return cSourceAssignment_5; }
		
		//[Entity]
		public CrossReference getSourceEntityCrossReference_5_0() { return cSourceEntityCrossReference_5_0; }
		
		//ID
		public RuleCall getSourceEntityIDTerminalRuleCall_5_0_1() { return cSourceEntityIDTerminalRuleCall_5_0_1; }
		
		//'target'
		public Keyword getTargetKeyword_6() { return cTargetKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
		
		//target=[Entity]
		public Assignment getTargetAssignment_8() { return cTargetAssignment_8; }
		
		//[Entity]
		public CrossReference getTargetEntityCrossReference_8_0() { return cTargetEntityCrossReference_8_0; }
		
		//ID
		public RuleCall getTargetEntityIDTerminalRuleCall_8_0_1() { return cTargetEntityIDTerminalRuleCall_8_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	
	
	private final ExtentElements pExtent;
	private final ModuleElements pModule;
	private final TerminologyGraphElements pTerminologyGraph;
	private final TerminologyBoxStatementElements pTerminologyBoxStatement;
	private final EntityElements pEntity;
	private final AspectElements pAspect;
	private final ConceptElements pConcept;
	private final RelationElements pRelation;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pExtent = new ExtentElements();
		this.pModule = new ModuleElements();
		this.pTerminologyGraph = new TerminologyGraphElements();
		this.pTerminologyBoxStatement = new TerminologyBoxStatementElements();
		this.pEntity = new EntityElements();
		this.pAspect = new AspectElements();
		this.pConcept = new ConceptElements();
		this.pRelation = new RelationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Extent:
	//	modules+=Module*;
	public ExtentElements getExtentAccess() {
		return pExtent;
	}
	
	public ParserRule getExtentRule() {
		return getExtentAccess().getRule();
	}
	
	//Module:
	//	TerminologyGraph;
	public ModuleElements getModuleAccess() {
		return pModule;
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}
	
	//TerminologyGraph:
	//	'terminology' iri=ID
	//	'{'
	//	boxStatements+=TerminologyBoxStatement*
	//	'}';
	public TerminologyGraphElements getTerminologyGraphAccess() {
		return pTerminologyGraph;
	}
	
	public ParserRule getTerminologyGraphRule() {
		return getTerminologyGraphAccess().getRule();
	}
	
	//TerminologyBoxStatement:
	//	Entity | Relation;
	public TerminologyBoxStatementElements getTerminologyBoxStatementAccess() {
		return pTerminologyBoxStatement;
	}
	
	public ParserRule getTerminologyBoxStatementRule() {
		return getTerminologyBoxStatementAccess().getRule();
	}
	
	//Entity:
	//	Aspect | Concept;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Aspect:
	//	'aspect' name=ID;
	public AspectElements getAspectAccess() {
		return pAspect;
	}
	
	public ParserRule getAspectRule() {
		return getAspectAccess().getRule();
	}
	
	//Concept:
	//	'concept' name=ID;
	public ConceptElements getConceptAccess() {
		return pConcept;
	}
	
	public ParserRule getConceptRule() {
		return getConceptAccess().getRule();
	}
	
	//Relation:
	//	'relation' name=ID '{'
	//	'source' '=' source=[Entity]
	//	'target' '=' target=[Entity]
	//	'}';
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
