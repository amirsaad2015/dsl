/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.myDsl.Aspect;
import org.xtext.example.mydsl.myDsl.Concept;
import org.xtext.example.mydsl.myDsl.Extent;
import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.Relation;
import org.xtext.example.mydsl.myDsl.TerminologyGraph;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MyDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MyDslPackage.ASPECT:
				sequence_Aspect(context, (Aspect) semanticObject); 
				return; 
			case MyDslPackage.CONCEPT:
				sequence_Concept(context, (Concept) semanticObject); 
				return; 
			case MyDslPackage.EXTENT:
				sequence_Extent(context, (Extent) semanticObject); 
				return; 
			case MyDslPackage.RELATION:
				sequence_Relation(context, (Relation) semanticObject); 
				return; 
			case MyDslPackage.TERMINOLOGY_GRAPH:
				sequence_TerminologyGraph(context, (TerminologyGraph) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     TerminologyBoxStatement returns Aspect
	 *     Entity returns Aspect
	 *     Aspect returns Aspect
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Aspect(ISerializationContext context, Aspect semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TERMINOLOGY_BOX_STATEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TERMINOLOGY_BOX_STATEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAspectAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TerminologyBoxStatement returns Concept
	 *     Entity returns Concept
	 *     Concept returns Concept
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Concept(ISerializationContext context, Concept semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TERMINOLOGY_BOX_STATEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TERMINOLOGY_BOX_STATEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConceptAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Extent returns Extent
	 *
	 * Constraint:
	 *     modules+=Module+
	 */
	protected void sequence_Extent(ISerializationContext context, Extent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TerminologyBoxStatement returns Relation
	 *     Relation returns Relation
	 *
	 * Constraint:
	 *     (name=ID source=[Entity|ID] target=[Entity|ID])
	 */
	protected void sequence_Relation(ISerializationContext context, Relation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.TERMINOLOGY_BOX_STATEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.TERMINOLOGY_BOX_STATEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RELATION__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RELATION__SOURCE));
			if (transientValues.isValueTransient(semanticObject, MyDslPackage.Literals.RELATION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MyDslPackage.Literals.RELATION__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRelationAccess().getSourceEntityIDTerminalRuleCall_5_0_1(), semanticObject.eGet(MyDslPackage.Literals.RELATION__SOURCE, false));
		feeder.accept(grammarAccess.getRelationAccess().getTargetEntityIDTerminalRuleCall_8_0_1(), semanticObject.eGet(MyDslPackage.Literals.RELATION__TARGET, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Module returns TerminologyGraph
	 *     TerminologyGraph returns TerminologyGraph
	 *
	 * Constraint:
	 *     (iri=ID boxStatements+=TerminologyBoxStatement*)
	 */
	protected void sequence_TerminologyGraph(ISerializationContext context, TerminologyGraph semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
