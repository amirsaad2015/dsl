/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.myDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.mydsl.myDsl.MyDslPackage;
import org.xtext.example.mydsl.myDsl.TerminologyBoxStatement;
import org.xtext.example.mydsl.myDsl.TerminologyGraph;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Terminology Graph</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.TerminologyGraphImpl#getIri <em>Iri</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.myDsl.impl.TerminologyGraphImpl#getBoxStatements <em>Box Statements</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TerminologyGraphImpl extends ModuleImpl implements TerminologyGraph
{
  /**
   * The default value of the '{@link #getIri() <em>Iri</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIri()
   * @generated
   * @ordered
   */
  protected static final String IRI_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getIri() <em>Iri</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIri()
   * @generated
   * @ordered
   */
  protected String iri = IRI_EDEFAULT;

  /**
   * The cached value of the '{@link #getBoxStatements() <em>Box Statements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBoxStatements()
   * @generated
   * @ordered
   */
  protected EList<TerminologyBoxStatement> boxStatements;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TerminologyGraphImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.TERMINOLOGY_GRAPH;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getIri()
  {
    return iri;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIri(String newIri)
  {
    String oldIri = iri;
    iri = newIri;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.TERMINOLOGY_GRAPH__IRI, oldIri, iri));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TerminologyBoxStatement> getBoxStatements()
  {
    if (boxStatements == null)
    {
      boxStatements = new EObjectContainmentEList<TerminologyBoxStatement>(TerminologyBoxStatement.class, this, MyDslPackage.TERMINOLOGY_GRAPH__BOX_STATEMENTS);
    }
    return boxStatements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.TERMINOLOGY_GRAPH__BOX_STATEMENTS:
        return ((InternalEList<?>)getBoxStatements()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.TERMINOLOGY_GRAPH__IRI:
        return getIri();
      case MyDslPackage.TERMINOLOGY_GRAPH__BOX_STATEMENTS:
        return getBoxStatements();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.TERMINOLOGY_GRAPH__IRI:
        setIri((String)newValue);
        return;
      case MyDslPackage.TERMINOLOGY_GRAPH__BOX_STATEMENTS:
        getBoxStatements().clear();
        getBoxStatements().addAll((Collection<? extends TerminologyBoxStatement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.TERMINOLOGY_GRAPH__IRI:
        setIri(IRI_EDEFAULT);
        return;
      case MyDslPackage.TERMINOLOGY_GRAPH__BOX_STATEMENTS:
        getBoxStatements().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.TERMINOLOGY_GRAPH__IRI:
        return IRI_EDEFAULT == null ? iri != null : !IRI_EDEFAULT.equals(iri);
      case MyDslPackage.TERMINOLOGY_GRAPH__BOX_STATEMENTS:
        return boxStatements != null && !boxStatements.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (iri: ");
    result.append(iri);
    result.append(')');
    return result.toString();
  }

} //TerminologyGraphImpl
